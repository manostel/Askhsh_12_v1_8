
Askhsh_12_v1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdf4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  0800c094  0800c094  0001c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9c4  0800c9c4  0001c9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c9cc  0800c9cc  0001c9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c9d0  0800c9d0  0001c9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  0800c9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001848  24000080  0800ca54  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240018c8  0800ca54  000218c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000313b9  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000484d  00000000  00000000  00051467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a70  00000000  00000000  00055cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001900  00000000  00000000  00057728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003eda1  00000000  00000000  00059028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021ab4  00000000  00000000  00097dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bb7a  00000000  00000000  000b987d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002353f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007650  00000000  00000000  0023544c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c07c 	.word	0x0800c07c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800c07c 	.word	0x0800c07c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <delayUS_DWT>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delayUS_DWT(volatile uint32_t microseconds)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <delayUS_DWT+0x40>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000696:	f005 fefd 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <delayUS_DWT+0x44>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <delayUS_DWT+0x40>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f8      	bcc.n	80006ae <delayUS_DWT+0x26>
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <writeSDA>:
#define HEX2BCD(v)	((v) % 10 + (v) / 10 * 16)
#define BCD2HEX(v)	((v) % 16 + (v) / 16 * 10)


// SDA Write(output) Mode
static void writeSDA(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <writeSDA+0x24>)
 80006e8:	f003 ff76 	bl	80045d8 <HAL_GPIO_Init>
	
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58021400 	.word	0x58021400

080006f8 <readSDA>:


// SDA Read(input) Mode
static void readSDA(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SDA;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);	
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <readSDA+0x28>)
 8000714:	f003 ff60 	bl	80045d8 <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58021400 	.word	0x58021400

08000724 <DS1302_SendCmd>:


/* Отправка адреса или команды */
static void DS1302_SendCmd(uint8_t cmd) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i ++) 
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01e      	b.n	8000772 <DS1302_SendCmd+0x4e>
	{	
		//		DS1302_SDA = (bit)(addr & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (cmd & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2101      	movs	r1, #1
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <DS1302_SendCmd+0x60>)
 8000742:	f004 f911 	bl	8004968 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <DS1302_SendCmd+0x60>)
 800074c:	f004 f90c 	bl	8004968 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff99 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <DS1302_SendCmd+0x60>)
 800075c:	f004 f904 	bl	8004968 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff91 	bl	8000688 <delayUS_DWT>
		cmd >>= 1;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i ++) 
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d9dd      	bls.n	8000734 <DS1302_SendCmd+0x10>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58021400 	.word	0x58021400

08000788 <DS1302_WriteByte>:


/* Прочитать байт по адресу 'addr' */
static void DS1302_WriteByte(uint8_t addr, uint8_t d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <DS1302_WriteByte+0x88>)
 800079e:	f004 f8e3 	bl	8004968 <HAL_GPIO_WritePin>
	
	//addr = addr & 0xFE;
	DS1302_SendCmd(addr);	// Отправка адреса
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffbd 	bl	8000724 <DS1302_SendCmd>
	
	for (i = 0; i < 8; i ++) 
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01e      	b.n	80007ee <DS1302_WriteByte+0x66>
	{
		//		DS1302_SDA = (bit)(d & 1);
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA, (d & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	2101      	movs	r1, #1
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS1302_WriteByte+0x88>)
 80007be:	f004 f8d3 	bl	8004968 <HAL_GPIO_WritePin>
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <DS1302_WriteByte+0x88>)
 80007c8:	f004 f8ce 	bl	8004968 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff5b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <DS1302_WriteByte+0x88>)
 80007d8:	f004 f8c6 	bl	8004968 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff53 	bl	8000688 <delayUS_DWT>
		d >>= 1;
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i ++) 
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9dd      	bls.n	80007b0 <DS1302_WriteByte+0x28>
	}
	
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <DS1302_WriteByte+0x88>)
 80007fa:	f004 f8b5 	bl	8004968 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <DS1302_WriteByte+0x88>)
 8000804:	f004 f8b0 	bl	8004968 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58021400 	.word	0x58021400

08000814 <DS1302_ReadByte>:
}


/* Reads a byte from addr */
static uint8_t DS1302_ReadByte(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73bb      	strb	r3, [r7, #14]

	//	DS1302_RST = 1;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_SET);	
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000828:	f004 f89e 	bl	8004968 <HAL_GPIO_WritePin>
	addr = addr | 0x01; 	// Generate Read Address
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]

	DS1302_SendCmd(addr);	// Sends address
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff74 	bl	8000724 <DS1302_SendCmd>
	
	readSDA();
 800083c:	f7ff ff5c 	bl	80006f8 <readSDA>
	for (i = 0; i < 8; i ++) 
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e020      	b.n	8000888 <DS1302_ReadByte+0x74>
	{
		temp >>= 1;
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
		//		if(DS1302_SDA)
		if(HAL_GPIO_ReadPin(DS1302_GPIO, DS1302_SDA))
 800084c:	2101      	movs	r1, #1
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000850:	f004 f872 	bl	8004938 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <DS1302_ReadByte+0x4e>
			temp |= 0x80;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	73bb      	strb	r3, [r7, #14]
		//		DS1302_SCK = 1;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000868:	f004 f87e 	bl	8004968 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff0b 	bl	8000688 <delayUS_DWT>
		//		DS1302_SCK = 0;
		HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000878:	f004 f876 	bl	8004968 <HAL_GPIO_WritePin>
		delayUS_DWT(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff03 	bl	8000688 <delayUS_DWT>
	for (i = 0; i < 8; i ++) 
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	3301      	adds	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9db      	bls.n	8000846 <DS1302_ReadByte+0x32>
	}
	writeSDA();
 800088e:	f7ff ff1f 	bl	80006d0 <writeSDA>

	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <DS1302_ReadByte+0x9c>)
 8000898:	f004 f866 	bl	8004968 <HAL_GPIO_WritePin>
	//	DS1302_SDA = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SDA,  GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <DS1302_ReadByte+0x9c>)
 80008a2:	f004 f861 	bl	8004968 <HAL_GPIO_WritePin>
	return temp;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58021400 	.word	0x58021400

080008b4 <DS1302_ReadTime>:
}


/* Reads time byte by byte to 'buf' */
void DS1302_ReadTime(uint8_t *buf)  
{ 
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
   	uint8_t tmp;
	
	tmp = DS1302_ReadByte(DS1302_YEAR); 	
 80008bc:	208c      	movs	r0, #140	; 0x8c
 80008be:	f7ff ffa9 	bl	8000814 <DS1302_ReadByte>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]
	buf[1] = BCD2HEX(tmp);		 
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	b2d9      	uxtb	r1, r3
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	4413      	add	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	440a      	add	r2, r1
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MONTH); 	
 80008e8:	2088      	movs	r0, #136	; 0x88
 80008ea:	f7ff ff93 	bl	8000814 <DS1302_ReadByte>
 80008ee:	4603      	mov	r3, r0
 80008f0:	73fb      	strb	r3, [r7, #15]
	buf[2] = BCD2HEX(tmp);	 
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	b2d9      	uxtb	r1, r3
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	091b      	lsrs	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3302      	adds	r3, #2
 800090e:	440a      	add	r2, r1
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DATE); 	
 8000914:	2086      	movs	r0, #134	; 0x86
 8000916:	f7ff ff7d 	bl	8000814 <DS1302_ReadByte>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
	buf[3] = BCD2HEX(tmp);
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	4413      	add	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3303      	adds	r3, #3
 800093a:	440a      	add	r2, r1
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_HOUR);		
 8000940:	2084      	movs	r0, #132	; 0x84
 8000942:	f7ff ff67 	bl	8000814 <DS1302_ReadByte>
 8000946:	4603      	mov	r3, r0
 8000948:	73fb      	strb	r3, [r7, #15]
	buf[4] = BCD2HEX(tmp);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	b2d9      	uxtb	r1, r3
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	440a      	add	r2, r1
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_MIN);		
 800096c:	2082      	movs	r0, #130	; 0x82
 800096e:	f7ff ff51 	bl	8000814 <DS1302_ReadByte>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
	buf[5] = BCD2HEX(tmp); 
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	b2d9      	uxtb	r1, r3
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	091b      	lsrs	r3, r3, #4
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	0092      	lsls	r2, r2, #2
 8000988:	4413      	add	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3305      	adds	r3, #5
 8000992:	440a      	add	r2, r1
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte((DS1302_SEC)) & 0x7F;
 8000998:	2080      	movs	r0, #128	; 0x80
 800099a:	f7ff ff3b 	bl	8000814 <DS1302_ReadByte>
 800099e:	4603      	mov	r3, r0
 80009a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009a4:	73fb      	strb	r3, [r7, #15]
	buf[6] = BCD2HEX(tmp);
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	f003 030f 	and.w	r3, r3, #15
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3306      	adds	r3, #6
 80009c2:	440a      	add	r2, r1
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
	tmp = DS1302_ReadByte(DS1302_DAY);		
 80009c8:	208a      	movs	r0, #138	; 0x8a
 80009ca:	f7ff ff23 	bl	8000814 <DS1302_ReadByte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]
	buf[7] = BCD2HEX(tmp);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3307      	adds	r3, #7
 80009ee:	440a      	add	r2, r1
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DS1302_Init>:


/* Инициализация */
void DS1302_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
	DWT_Delay_Init(); //Инициализация таймера для отсчета милисекунд
 8000a02:	f000 f849 	bl	8000a98 <DWT_Delay_Init>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = DS1302_SCLK | DS1302_SDA | DS1302_RST;
 8000a06:	2307      	movs	r3, #7
 8000a08:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS1302_GPIO, &GPIO_InitStructure);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <DS1302_Init+0x50>)
 8000a18:	f003 fdde 	bl	80045d8 <HAL_GPIO_Init>
	
	DS1302_WriteByte(DS1302_CHARGER, 0x00);			// Отключить Trickle Charger
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2090      	movs	r0, #144	; 0x90
 8000a20:	f7ff feb2 	bl	8000788 <DS1302_WriteByte>
		
	//	DS1302_RST = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_RST,  GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <DS1302_Init+0x50>)
 8000a2a:	f003 ff9d 	bl	8004968 <HAL_GPIO_WritePin>
	//	DS1302_SCK = 0;
	HAL_GPIO_WritePin(DS1302_GPIO, DS1302_SCLK,  GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <DS1302_Init+0x50>)
 8000a34:	f003 ff98 	bl	8004968 <HAL_GPIO_WritePin>

	delayUS_DWT(10); // Меньше 10 мкс делать не стоит.
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f7ff fe25 	bl	8000688 <delayUS_DWT>
	DS1302_ClockStart();
 8000a3e:	f000 f807 	bl	8000a50 <DS1302_ClockStart>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58021400 	.word	0x58021400

08000a50 <DS1302_ClockStart>:

//Запуск часов.
//Изначально DS1302 в режиме HALT (остановлена, режим энергосбережения).
//Чтоб начался отсчет времени необходимо однократно выполнить эту функцию.
void DS1302_ClockStart(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint8_t buf = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]

	DS1302_WriteByte(DS1302_CONTROL, 0x00);			// Отключить защиту от записи
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	208e      	movs	r0, #142	; 0x8e
 8000a5e:	f7ff fe93 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fe10 	bl	8000688 <delayUS_DWT>

	buf = DS1302_ReadByte(DS1302_SEC) & 0x7F;		// Записываем в 8 бит 0. При этом сохраняем установленное значение секунд.
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	f7ff fed3 	bl	8000814 <DS1302_ReadByte>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a74:	71fb      	strb	r3, [r7, #7]
	DS1302_WriteByte(DS1302_SEC, buf);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	f7ff fe84 	bl	8000788 <DS1302_WriteByte>

	DS1302_WriteByte(DS1302_CONTROL, 0x80);			// Включить защиту от записи
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	208e      	movs	r0, #142	; 0x8e
 8000a84:	f7ff fe80 	bl	8000788 <DS1302_WriteByte>
	delayUS_DWT(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fdfd 	bl	8000688 <delayUS_DWT>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aa6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <DWT_Delay_Init+0x58>)
 8000aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ad2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ad4:	bf00      	nop
     __ASM volatile ("NOP");
 8000ad6:	bf00      	nop

     /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <DWT_Delay_Init+0x5c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e000      	b.n	8000ae6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ae4:	2301      	movs	r3, #1
  }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000edf0 	.word	0xe000edf0
 8000af4:	e0001000 	.word	0xe0001000

08000af8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM5)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d125      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x5e>
  {
	  counterclk++;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b12:	6013      	str	r3, [r2, #0]
	  counter2++;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b1c:	6013      	str	r3, [r2, #0]
	  adc_flag=0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
	  uartflag=0;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
	  if(counterclk>=setTiming1)
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d305      	bcc.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  {
//	  dataloggerflag=1;

	  adc_flag=1;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
	  counterclk=0;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
	  }
	  if(counter2>=5)
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d905      	bls.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x5e>
	  {
		  uartflag=1;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
		  counter2=0;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
	  }
    // Code to execute every 1 second interval
    // Place your desired actions here
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40000c00 	.word	0x40000c00
 8000b68:	240000c4 	.word	0x240000c4
 8000b6c:	240000c0 	.word	0x240000c0
 8000b70:	2400009c 	.word	0x2400009c
 8000b74:	240000a0 	.word	0x240000a0
 8000b78:	24000000 	.word	0x24000000

08000b7c <datalogger>:

void datalogger() ////5 lepta
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0


	HAL_Delay(500);
 8000b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b86:	f001 ffff 	bl	8002b88 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 8000b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8e:	485b      	ldr	r0, [pc, #364]	; (8000cfc <datalogger+0x180>)
 8000b90:	f003 fed2 	bl	8004938 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 80ab 	bne.w	8000cf2 <datalogger+0x176>
	{
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000b9c:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <datalogger+0x184>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e09e      	b.n	8000ce2 <datalogger+0x166>
	{

	char buffer2[50];
	ssd1306_Fill(Black);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f001 f9c7 	bl	8001f38 <ssd1306_Fill>
    sprintf(buffer2, "DATA LOGGER SENDING TO PuTTy");
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4955      	ldr	r1, [pc, #340]	; (8000d04 <datalogger+0x188>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00a fe56 	bl	800b860 <siprintf>
    ssd1306_SetCursor(0,20); // Adjust these values according to where you want the text to start
 8000bb4:	2114      	movs	r1, #20
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f001 fb0c 	bl	80021d4 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer2, Font_7x10, White); // Replace with your font and color choice
 8000bbc:	4a52      	ldr	r2, [pc, #328]	; (8000d08 <datalogger+0x18c>)
 8000bbe:	1d38      	adds	r0, r7, #4
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	ca06      	ldmia	r2, {r1, r2}
 8000bc4:	f001 fae0 	bl	8002188 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000bc8:	f001 f9da 	bl	8001f80 <ssd1306_UpdateScreen>
    sprintf(graphbuffer, "\n\r~~~~~~~~~~~~~~DATALOGGER~~~~~~~~~~~~~~~~\n\r");
 8000bcc:	494f      	ldr	r1, [pc, #316]	; (8000d0c <datalogger+0x190>)
 8000bce:	4850      	ldr	r0, [pc, #320]	; (8000d10 <datalogger+0x194>)
 8000bd0:	f00a fe46 	bl	800b860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphbuffer, strlen(graphbuffer), 100);
 8000bd4:	484e      	ldr	r0, [pc, #312]	; (8000d10 <datalogger+0x194>)
 8000bd6:	f7ff fb83 	bl	80002e0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	494b      	ldr	r1, [pc, #300]	; (8000d10 <datalogger+0x194>)
 8000be2:	484c      	ldr	r0, [pc, #304]	; (8000d14 <datalogger+0x198>)
 8000be4:	f009 fa30 	bl	800a048 <HAL_UART_Transmit>
    sprintf(graphTimeBuffer, "\n\r~~~~~~~~~~~~~~%s~~~~~~~~~~~~~~~~\n\r",TimeArray[i]);
 8000be8:	4b45      	ldr	r3, [pc, #276]	; (8000d00 <datalogger+0x184>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a4a      	ldr	r2, [pc, #296]	; (8000d18 <datalogger+0x19c>)
 8000bee:	5cd3      	ldrb	r3, [r2, r3]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	494a      	ldr	r1, [pc, #296]	; (8000d1c <datalogger+0x1a0>)
 8000bf4:	484a      	ldr	r0, [pc, #296]	; (8000d20 <datalogger+0x1a4>)
 8000bf6:	f00a fe33 	bl	800b860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)graphTimeBuffer, strlen(graphTimeBuffer), 100);
 8000bfa:	4849      	ldr	r0, [pc, #292]	; (8000d20 <datalogger+0x1a4>)
 8000bfc:	f7ff fb70 	bl	80002e0 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	2364      	movs	r3, #100	; 0x64
 8000c06:	4946      	ldr	r1, [pc, #280]	; (8000d20 <datalogger+0x1a4>)
 8000c08:	4842      	ldr	r0, [pc, #264]	; (8000d14 <datalogger+0x198>)
 8000c0a:	f009 fa1d 	bl	800a048 <HAL_UART_Transmit>
    sprintf(datalogbuf0, "\n\r%d Channel 0  %2d\n\r", i,adcarray0[i]);
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <datalogger+0x184>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <datalogger+0x184>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4943      	ldr	r1, [pc, #268]	; (8000d24 <datalogger+0x1a8>)
 8000c18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c1c:	4942      	ldr	r1, [pc, #264]	; (8000d28 <datalogger+0x1ac>)
 8000c1e:	4843      	ldr	r0, [pc, #268]	; (8000d2c <datalogger+0x1b0>)
 8000c20:	f00a fe1e 	bl	800b860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf0, strlen(datalogbuf0), 100);
 8000c24:	4841      	ldr	r0, [pc, #260]	; (8000d2c <datalogger+0x1b0>)
 8000c26:	f7ff fb5b 	bl	80002e0 <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	2364      	movs	r3, #100	; 0x64
 8000c30:	493e      	ldr	r1, [pc, #248]	; (8000d2c <datalogger+0x1b0>)
 8000c32:	4838      	ldr	r0, [pc, #224]	; (8000d14 <datalogger+0x198>)
 8000c34:	f009 fa08 	bl	800a048 <HAL_UART_Transmit>
    sprintf(datalogbuf1, "\n\r   Channel 1  %2d\n\r", adcarray1[i]);
 8000c38:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <datalogger+0x184>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a3c      	ldr	r2, [pc, #240]	; (8000d30 <datalogger+0x1b4>)
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	461a      	mov	r2, r3
 8000c44:	493b      	ldr	r1, [pc, #236]	; (8000d34 <datalogger+0x1b8>)
 8000c46:	483c      	ldr	r0, [pc, #240]	; (8000d38 <datalogger+0x1bc>)
 8000c48:	f00a fe0a 	bl	800b860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf1, strlen(datalogbuf1), 100);
 8000c4c:	483a      	ldr	r0, [pc, #232]	; (8000d38 <datalogger+0x1bc>)
 8000c4e:	f7ff fb47 	bl	80002e0 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	2364      	movs	r3, #100	; 0x64
 8000c58:	4937      	ldr	r1, [pc, #220]	; (8000d38 <datalogger+0x1bc>)
 8000c5a:	482e      	ldr	r0, [pc, #184]	; (8000d14 <datalogger+0x198>)
 8000c5c:	f009 f9f4 	bl	800a048 <HAL_UART_Transmit>
    sprintf(datalogbuf4, "\n\r   Channel 4  %2d\n\r", adcarray4[i]);
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <datalogger+0x184>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a35      	ldr	r2, [pc, #212]	; (8000d3c <datalogger+0x1c0>)
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4934      	ldr	r1, [pc, #208]	; (8000d40 <datalogger+0x1c4>)
 8000c6e:	4835      	ldr	r0, [pc, #212]	; (8000d44 <datalogger+0x1c8>)
 8000c70:	f00a fdf6 	bl	800b860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf4, strlen(datalogbuf4), 100);
 8000c74:	4833      	ldr	r0, [pc, #204]	; (8000d44 <datalogger+0x1c8>)
 8000c76:	f7ff fb33 	bl	80002e0 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	4930      	ldr	r1, [pc, #192]	; (8000d44 <datalogger+0x1c8>)
 8000c82:	4824      	ldr	r0, [pc, #144]	; (8000d14 <datalogger+0x198>)
 8000c84:	f009 f9e0 	bl	800a048 <HAL_UART_Transmit>
    sprintf(datalogbuf6, "\n\r   Channel 6  %2d\n\r", adcarray6[i]);
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <datalogger+0x184>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <datalogger+0x1cc>)
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	461a      	mov	r2, r3
 8000c94:	492d      	ldr	r1, [pc, #180]	; (8000d4c <datalogger+0x1d0>)
 8000c96:	482e      	ldr	r0, [pc, #184]	; (8000d50 <datalogger+0x1d4>)
 8000c98:	f00a fde2 	bl	800b860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf6, strlen(datalogbuf6), 100);
 8000c9c:	482c      	ldr	r0, [pc, #176]	; (8000d50 <datalogger+0x1d4>)
 8000c9e:	f7ff fb1f 	bl	80002e0 <strlen>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	4929      	ldr	r1, [pc, #164]	; (8000d50 <datalogger+0x1d4>)
 8000caa:	481a      	ldr	r0, [pc, #104]	; (8000d14 <datalogger+0x198>)
 8000cac:	f009 f9cc 	bl	800a048 <HAL_UART_Transmit>
    sprintf(datalogbuf7, "\n\r   Channel 7  %2d\n\r", adcarray7[i]);
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <datalogger+0x184>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <datalogger+0x1d8>)
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4926      	ldr	r1, [pc, #152]	; (8000d58 <datalogger+0x1dc>)
 8000cbe:	4827      	ldr	r0, [pc, #156]	; (8000d5c <datalogger+0x1e0>)
 8000cc0:	f00a fdce 	bl	800b860 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf7, strlen(datalogbuf7), 100);
 8000cc4:	4825      	ldr	r0, [pc, #148]	; (8000d5c <datalogger+0x1e0>)
 8000cc6:	f7ff fb0b 	bl	80002e0 <strlen>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	4922      	ldr	r1, [pc, #136]	; (8000d5c <datalogger+0x1e0>)
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <datalogger+0x198>)
 8000cd4:	f009 f9b8 	bl	800a048 <HAL_UART_Transmit>
	for (i=0; i<100; i++) // 10 gia test  288 gia 5 lepta gia na bgalw ola ta apothikeumena apo to datalogger_array na ta metatrepsw kai na ta dw sto hyper terminal
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <datalogger+0x184>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <datalogger+0x184>)
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <datalogger+0x184>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b63      	cmp	r3, #99	; 0x63
 8000ce8:	f77f af5c 	ble.w	8000ba4 <datalogger+0x28>


//    sprintf(datalogbuf2, " %c\n\r", datalogger_array_status[i]);
//    HAL_UART_Transmit(&huart3, (uint8_t*)datalogbuf2, strlen(datalogbuf2), 100);
	}
	ssd1306_Fill(Black);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f001 f923 	bl	8001f38 <ssd1306_Fill>

	}


}
 8000cf2:	bf00      	nop
 8000cf4:	3738      	adds	r7, #56	; 0x38
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58020800 	.word	0x58020800
 8000d00:	240000a4 	.word	0x240000a4
 8000d04:	0800c094 	.word	0x0800c094
 8000d08:	24000004 	.word	0x24000004
 8000d0c:	0800c0b4 	.word	0x0800c0b4
 8000d10:	2400131c 	.word	0x2400131c
 8000d14:	24000658 	.word	0x24000658
 8000d18:	24000b88 	.word	0x24000b88
 8000d1c:	0800c0e4 	.word	0x0800c0e4
 8000d20:	2400058c 	.word	0x2400058c
 8000d24:	24001138 	.word	0x24001138
 8000d28:	0800c10c 	.word	0x0800c10c
 8000d2c:	2400168c 	.word	0x2400168c
 8000d30:	24000f28 	.word	0x24000f28
 8000d34:	0800c124 	.word	0x0800c124
 8000d38:	240013b4 	.word	0x240013b4
 8000d3c:	2400147c 	.word	0x2400147c
 8000d40:	0800c13c 	.word	0x0800c13c
 8000d44:	240005f4 	.word	0x240005f4
 8000d48:	24001724 	.word	0x24001724
 8000d4c:	0800c154 	.word	0x0800c154
 8000d50:	24000ec4 	.word	0x24000ec4
 8000d54:	24000c9c 	.word	0x24000c9c
 8000d58:	0800c16c 	.word	0x0800c16c
 8000d5c:	240004dc 	.word	0x240004dc

08000d60 <ADC_CH0_SELECT>:




void ADC_CH0_SELECT()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_0;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d88:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <ADC_CH0_SELECT+0x50>)
 8000d98:	f002 fd0e 	bl	80037b8 <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <ADC_CH0_SELECT+0x46>
	  {
	    Error_Handler();
 8000da2:	f001 f807 	bl	8001db4 <Error_Handler>
	  }
}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000e60 	.word	0x24000e60

08000db4 <ADC_CH1_SELECT>:
void ADC_CH1_SELECT()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <ADC_CH1_SELECT+0x50>)
 8000dce:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ddc:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dde:	2304      	movs	r3, #4
 8000de0:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <ADC_CH1_SELECT+0x54>)
 8000dec:	f002 fce4 	bl	80037b8 <HAL_ADC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <ADC_CH1_SELECT+0x46>
	  {
	    Error_Handler();
 8000df6:	f000 ffdd 	bl	8001db4 <Error_Handler>
	  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3720      	adds	r7, #32
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	04300002 	.word	0x04300002
 8000e08:	24000e60 	.word	0x24000e60

08000e0c <ADC_CH4_SELECT>:
void ADC_CH4_SELECT()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_4;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <ADC_CH4_SELECT+0x50>)
 8000e26:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e28:	2306      	movs	r3, #6
 8000e2a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e34:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e36:	2304      	movs	r3, #4
 8000e38:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <ADC_CH4_SELECT+0x54>)
 8000e44:	f002 fcb8 	bl	80037b8 <HAL_ADC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <ADC_CH4_SELECT+0x46>
	  {
	    Error_Handler();
 8000e4e:	f000 ffb1 	bl	8001db4 <Error_Handler>
	  }
}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	10c00010 	.word	0x10c00010
 8000e60:	24000e60 	.word	0x24000e60

08000e64 <ADC_CH6_SELECT>:
void ADC_CH6_SELECT()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]
 8000e7a:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_6;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <ADC_CH6_SELECT+0x50>)
 8000e7e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e80:	2306      	movs	r3, #6
 8000e82:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e84:	2301      	movs	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e8c:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <ADC_CH6_SELECT+0x54>)
 8000e9c:	f002 fc8c 	bl	80037b8 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <ADC_CH6_SELECT+0x46>
	  {
	    Error_Handler();
 8000ea6:	f000 ff85 	bl	8001db4 <Error_Handler>
	  }
}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	19200040 	.word	0x19200040
 8000eb8:	24000e60 	.word	0x24000e60

08000ebc <ADC_CH7_SELECT>:
void ADC_CH7_SELECT()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	619a      	str	r2, [r3, #24]
	  sConfig.Channel = ADC_CHANNEL_7;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <ADC_CH7_SELECT+0x50>)
 8000ed6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ee4:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <ADC_CH7_SELECT+0x54>)
 8000ef4:	f002 fc60 	bl	80037b8 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <ADC_CH7_SELECT+0x46>
	  {
	    Error_Handler();
 8000efe:	f000 ff59 	bl	8001db4 <Error_Handler>
	  }
}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	1d500080 	.word	0x1d500080
 8000f10:	24000e60 	.word	0x24000e60

08000f14 <ADC_TAKE_ALL>:

void ADC_TAKE_ALL()
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af04      	add	r7, sp, #16


	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	4865      	ldr	r0, [pc, #404]	; (80010b8 <ADC_TAKE_ALL+0x1a4>)
 8000f22:	f003 fd21 	bl	8004968 <HAL_GPIO_WritePin>
	DS1302_ReadTime(time);
 8000f26:	4865      	ldr	r0, [pc, #404]	; (80010bc <ADC_TAKE_ALL+0x1a8>)
 8000f28:	f7ff fcc4 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer2,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 8000f2c:	4b63      	ldr	r3, [pc, #396]	; (80010bc <ADC_TAKE_ALL+0x1a8>)
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	461c      	mov	r4, r3
 8000f32:	4b62      	ldr	r3, [pc, #392]	; (80010bc <ADC_TAKE_ALL+0x1a8>)
 8000f34:	789b      	ldrb	r3, [r3, #2]
 8000f36:	461d      	mov	r5, r3
 8000f38:	4b60      	ldr	r3, [pc, #384]	; (80010bc <ADC_TAKE_ALL+0x1a8>)
 8000f3a:	78db      	ldrb	r3, [r3, #3]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <ADC_TAKE_ALL+0x1a8>)
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <ADC_TAKE_ALL+0x1a8>)
 8000f46:	795b      	ldrb	r3, [r3, #5]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	4b5c      	ldr	r3, [pc, #368]	; (80010bc <ADC_TAKE_ALL+0x1a8>)
 8000f4c:	799b      	ldrb	r3, [r3, #6]
 8000f4e:	9303      	str	r3, [sp, #12]
 8000f50:	9002      	str	r0, [sp, #8]
 8000f52:	9101      	str	r1, [sp, #4]
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	462b      	mov	r3, r5
 8000f58:	4622      	mov	r2, r4
 8000f5a:	4959      	ldr	r1, [pc, #356]	; (80010c0 <ADC_TAKE_ALL+0x1ac>)
 8000f5c:	4859      	ldr	r0, [pc, #356]	; (80010c4 <ADC_TAKE_ALL+0x1b0>)
 8000f5e:	f00a fc7f 	bl	800b860 <siprintf>
	strcpy(TimeArray[counter1], timeBuffer2);
 8000f62:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a59      	ldr	r2, [pc, #356]	; (80010cc <ADC_TAKE_ALL+0x1b8>)
 8000f68:	5cd3      	ldrb	r3, [r2, r3]
 8000f6a:	4956      	ldr	r1, [pc, #344]	; (80010c4 <ADC_TAKE_ALL+0x1b0>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f00a fc97 	bl	800b8a0 <strcpy>
    HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f001 fe08 	bl	8002b88 <HAL_Delay>
    ADC_CH0_SELECT();
 8000f78:	f7ff fef2 	bl	8000d60 <ADC_CH0_SELECT>
    HAL_ADC_Start(&hadc3);
 8000f7c:	4854      	ldr	r0, [pc, #336]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000f7e:	f002 fa1b 	bl	80033b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8000f82:	2164      	movs	r1, #100	; 0x64
 8000f84:	4852      	ldr	r0, [pc, #328]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000f86:	f002 fb15 	bl	80035b4 <HAL_ADC_PollForConversion>
    adcraw0 = HAL_ADC_GetValue(&hadc3);
 8000f8a:	4851      	ldr	r0, [pc, #324]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000f8c:	f002 fc06 	bl	800379c <HAL_ADC_GetValue>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <ADC_TAKE_ALL+0x1c0>)
 8000f96:	601a      	str	r2, [r3, #0]
    adcarray0[counter1]=adcraw0;
 8000f98:	4b4b      	ldr	r3, [pc, #300]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <ADC_TAKE_ALL+0x1c0>)
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	494d      	ldr	r1, [pc, #308]	; (80010d8 <ADC_TAKE_ALL+0x1c4>)
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8000fa6:	484a      	ldr	r0, [pc, #296]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000fa8:	f002 fad0 	bl	800354c <HAL_ADC_Stop>
    HAL_Delay(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f001 fdeb 	bl	8002b88 <HAL_Delay>
    ADC_CH1_SELECT();
 8000fb2:	f7ff feff 	bl	8000db4 <ADC_CH1_SELECT>
    HAL_ADC_Start(&hadc3);
 8000fb6:	4846      	ldr	r0, [pc, #280]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000fb8:	f002 f9fe 	bl	80033b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8000fbc:	2164      	movs	r1, #100	; 0x64
 8000fbe:	4844      	ldr	r0, [pc, #272]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000fc0:	f002 faf8 	bl	80035b4 <HAL_ADC_PollForConversion>
    adcraw1 = HAL_ADC_GetValue(&hadc3);
 8000fc4:	4842      	ldr	r0, [pc, #264]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000fc6:	f002 fbe9 	bl	800379c <HAL_ADC_GetValue>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <ADC_TAKE_ALL+0x1c8>)
 8000fd0:	601a      	str	r2, [r3, #0]
    adcarray1[counter1]=adcraw1;
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a41      	ldr	r2, [pc, #260]	; (80010dc <ADC_TAKE_ALL+0x1c8>)
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	4941      	ldr	r1, [pc, #260]	; (80010e0 <ADC_TAKE_ALL+0x1cc>)
 8000fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8000fe0:	483b      	ldr	r0, [pc, #236]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000fe2:	f002 fab3 	bl	800354c <HAL_ADC_Stop>
    HAL_Delay(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f001 fdce 	bl	8002b88 <HAL_Delay>
    ADC_CH4_SELECT();
 8000fec:	f7ff ff0e 	bl	8000e0c <ADC_CH4_SELECT>
    HAL_ADC_Start(&hadc3);
 8000ff0:	4837      	ldr	r0, [pc, #220]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000ff2:	f002 f9e1 	bl	80033b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8000ff6:	2164      	movs	r1, #100	; 0x64
 8000ff8:	4835      	ldr	r0, [pc, #212]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8000ffa:	f002 fadb 	bl	80035b4 <HAL_ADC_PollForConversion>
    adcraw4 = HAL_ADC_GetValue(&hadc3);
 8000ffe:	4834      	ldr	r0, [pc, #208]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8001000:	f002 fbcc 	bl	800379c <HAL_ADC_GetValue>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <ADC_TAKE_ALL+0x1d0>)
 800100a:	601a      	str	r2, [r3, #0]
    adcarray4[counter1]=adcraw4;
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a34      	ldr	r2, [pc, #208]	; (80010e4 <ADC_TAKE_ALL+0x1d0>)
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	4934      	ldr	r1, [pc, #208]	; (80010e8 <ADC_TAKE_ALL+0x1d4>)
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 800101a:	482d      	ldr	r0, [pc, #180]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 800101c:	f002 fa96 	bl	800354c <HAL_ADC_Stop>
    HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f001 fdb1 	bl	8002b88 <HAL_Delay>
    ADC_CH6_SELECT();
 8001026:	f7ff ff1d 	bl	8000e64 <ADC_CH6_SELECT>
    HAL_ADC_Start(&hadc3);
 800102a:	4829      	ldr	r0, [pc, #164]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 800102c:	f002 f9c4 	bl	80033b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 8001030:	2164      	movs	r1, #100	; 0x64
 8001032:	4827      	ldr	r0, [pc, #156]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8001034:	f002 fabe 	bl	80035b4 <HAL_ADC_PollForConversion>
    adcraw6 = HAL_ADC_GetValue(&hadc3);
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 800103a:	f002 fbaf 	bl	800379c <HAL_ADC_GetValue>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <ADC_TAKE_ALL+0x1d8>)
 8001044:	601a      	str	r2, [r3, #0]
    adcarray6[counter1]=adcraw6;
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a28      	ldr	r2, [pc, #160]	; (80010ec <ADC_TAKE_ALL+0x1d8>)
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	4928      	ldr	r1, [pc, #160]	; (80010f0 <ADC_TAKE_ALL+0x1dc>)
 8001050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8001056:	f002 fa79 	bl	800354c <HAL_ADC_Stop>
    HAL_Delay(10);
 800105a:	200a      	movs	r0, #10
 800105c:	f001 fd94 	bl	8002b88 <HAL_Delay>
    ADC_CH7_SELECT();
 8001060:	f7ff ff2c 	bl	8000ebc <ADC_CH7_SELECT>
    HAL_ADC_Start(&hadc3);
 8001064:	481a      	ldr	r0, [pc, #104]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8001066:	f002 f9a7 	bl	80033b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 100);
 800106a:	2164      	movs	r1, #100	; 0x64
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 800106e:	f002 faa1 	bl	80035b4 <HAL_ADC_PollForConversion>
    adcraw7 = HAL_ADC_GetValue(&hadc3);
 8001072:	4817      	ldr	r0, [pc, #92]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8001074:	f002 fb92 	bl	800379c <HAL_ADC_GetValue>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <ADC_TAKE_ALL+0x1e0>)
 800107e:	601a      	str	r2, [r3, #0]
    adcarray7[counter1]=adcraw7;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <ADC_TAKE_ALL+0x1e0>)
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	491b      	ldr	r1, [pc, #108]	; (80010f8 <ADC_TAKE_ALL+0x1e4>)
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    HAL_ADC_Stop(&hadc3);
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <ADC_TAKE_ALL+0x1bc>)
 8001090:	f002 fa5c 	bl	800354c <HAL_ADC_Stop>
    HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <ADC_TAKE_ALL+0x1a4>)
 800109c:	f003 fc64 	bl	8004968 <HAL_GPIO_WritePin>

    counter1++;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <ADC_TAKE_ALL+0x1b4>)
 80010a8:	6013      	str	r3, [r2, #0]
    adc_flag=0;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <ADC_TAKE_ALL+0x1e8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	58020400 	.word	0x58020400
 80010bc:	24001314 	.word	0x24001314
 80010c0:	0800c184 	.word	0x0800c184
 80010c4:	24001418 	.word	0x24001418
 80010c8:	240000bc 	.word	0x240000bc
 80010cc:	24000b88 	.word	0x24000b88
 80010d0:	24000e60 	.word	0x24000e60
 80010d4:	240000a8 	.word	0x240000a8
 80010d8:	24001138 	.word	0x24001138
 80010dc:	240000ac 	.word	0x240000ac
 80010e0:	24000f28 	.word	0x24000f28
 80010e4:	240000b0 	.word	0x240000b0
 80010e8:	2400147c 	.word	0x2400147c
 80010ec:	240000b4 	.word	0x240000b4
 80010f0:	24001724 	.word	0x24001724
 80010f4:	240000b8 	.word	0x240000b8
 80010f8:	24000c9c 	.word	0x24000c9c
 80010fc:	2400009c 	.word	0x2400009c

08001100 <uarttrigger>:

void uarttrigger()
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af04      	add	r7, sp, #16
	DS1302_ReadTime(time);
 8001106:	4856      	ldr	r0, [pc, #344]	; (8001260 <uarttrigger+0x160>)
 8001108:	f7ff fbd4 	bl	80008b4 <DS1302_ReadTime>
	sprintf(timeBuffer,"\n\r %2d/%2d/%2d %2d:%2d:%2d \n\r",time[1],time[2],time[3],time[4],time[5],time[6]);
 800110c:	4b54      	ldr	r3, [pc, #336]	; (8001260 <uarttrigger+0x160>)
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	461c      	mov	r4, r3
 8001112:	4b53      	ldr	r3, [pc, #332]	; (8001260 <uarttrigger+0x160>)
 8001114:	789b      	ldrb	r3, [r3, #2]
 8001116:	461d      	mov	r5, r3
 8001118:	4b51      	ldr	r3, [pc, #324]	; (8001260 <uarttrigger+0x160>)
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	461a      	mov	r2, r3
 800111e:	4b50      	ldr	r3, [pc, #320]	; (8001260 <uarttrigger+0x160>)
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	4619      	mov	r1, r3
 8001124:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <uarttrigger+0x160>)
 8001126:	795b      	ldrb	r3, [r3, #5]
 8001128:	4618      	mov	r0, r3
 800112a:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <uarttrigger+0x160>)
 800112c:	799b      	ldrb	r3, [r3, #6]
 800112e:	9303      	str	r3, [sp, #12]
 8001130:	9002      	str	r0, [sp, #8]
 8001132:	9101      	str	r1, [sp, #4]
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	462b      	mov	r3, r5
 8001138:	4622      	mov	r2, r4
 800113a:	494a      	ldr	r1, [pc, #296]	; (8001264 <uarttrigger+0x164>)
 800113c:	484a      	ldr	r0, [pc, #296]	; (8001268 <uarttrigger+0x168>)
 800113e:	f00a fb8f 	bl	800b860 <siprintf>


	HAL_UART_Transmit(&huart3, (uint8_t*)timeBuffer, strlen(timeBuffer), HAL_MAX_DELAY);
 8001142:	4849      	ldr	r0, [pc, #292]	; (8001268 <uarttrigger+0x168>)
 8001144:	f7ff f8cc 	bl	80002e0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	4945      	ldr	r1, [pc, #276]	; (8001268 <uarttrigger+0x168>)
 8001152:	4846      	ldr	r0, [pc, #280]	; (800126c <uarttrigger+0x16c>)
 8001154:	f008 ff78 	bl	800a048 <HAL_UART_Transmit>

	sprintf(uartBuf, "Encoder count: %d\r\n", (int)TIM4->CNT);
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <uarttrigger+0x170>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	461a      	mov	r2, r3
 800115e:	4945      	ldr	r1, [pc, #276]	; (8001274 <uarttrigger+0x174>)
 8001160:	4845      	ldr	r0, [pc, #276]	; (8001278 <uarttrigger+0x178>)
 8001162:	f00a fb7d 	bl	800b860 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001166:	4844      	ldr	r0, [pc, #272]	; (8001278 <uarttrigger+0x178>)
 8001168:	f7ff f8ba 	bl	80002e0 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	4940      	ldr	r1, [pc, #256]	; (8001278 <uarttrigger+0x178>)
 8001176:	483d      	ldr	r0, [pc, #244]	; (800126c <uarttrigger+0x16c>)
 8001178:	f008 ff66 	bl	800a048 <HAL_UART_Transmit>
    sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <uarttrigger+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	493f      	ldr	r1, [pc, #252]	; (8001280 <uarttrigger+0x180>)
 8001184:	483f      	ldr	r0, [pc, #252]	; (8001284 <uarttrigger+0x184>)
 8001186:	f00a fb6b 	bl	800b860 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800118a:	483e      	ldr	r0, [pc, #248]	; (8001284 <uarttrigger+0x184>)
 800118c:	f7ff f8a8 	bl	80002e0 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	493a      	ldr	r1, [pc, #232]	; (8001284 <uarttrigger+0x184>)
 800119a:	4834      	ldr	r0, [pc, #208]	; (800126c <uarttrigger+0x16c>)
 800119c:	f008 ff54 	bl	800a048 <HAL_UART_Transmit>

	sprintf(adcbuffer0,"\n\r %2d \n\r",adcraw0);
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <uarttrigger+0x188>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4939      	ldr	r1, [pc, #228]	; (800128c <uarttrigger+0x18c>)
 80011a8:	4839      	ldr	r0, [pc, #228]	; (8001290 <uarttrigger+0x190>)
 80011aa:	f00a fb59 	bl	800b860 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer0, strlen(adcbuffer0), HAL_MAX_DELAY);
 80011ae:	4838      	ldr	r0, [pc, #224]	; (8001290 <uarttrigger+0x190>)
 80011b0:	f7ff f896 	bl	80002e0 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	4934      	ldr	r1, [pc, #208]	; (8001290 <uarttrigger+0x190>)
 80011be:	482b      	ldr	r0, [pc, #172]	; (800126c <uarttrigger+0x16c>)
 80011c0:	f008 ff42 	bl	800a048 <HAL_UART_Transmit>
	sprintf(adcbuffer1,"\n\r %2d \n\r",adcraw1);
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <uarttrigger+0x194>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4930      	ldr	r1, [pc, #192]	; (800128c <uarttrigger+0x18c>)
 80011cc:	4832      	ldr	r0, [pc, #200]	; (8001298 <uarttrigger+0x198>)
 80011ce:	f00a fb47 	bl	800b860 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer1, strlen(adcbuffer1), HAL_MAX_DELAY);
 80011d2:	4831      	ldr	r0, [pc, #196]	; (8001298 <uarttrigger+0x198>)
 80011d4:	f7ff f884 	bl	80002e0 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	492d      	ldr	r1, [pc, #180]	; (8001298 <uarttrigger+0x198>)
 80011e2:	4822      	ldr	r0, [pc, #136]	; (800126c <uarttrigger+0x16c>)
 80011e4:	f008 ff30 	bl	800a048 <HAL_UART_Transmit>
	sprintf(adcbuffer4,"\n\r %2d \n\r",adcraw4);
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <uarttrigger+0x19c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4927      	ldr	r1, [pc, #156]	; (800128c <uarttrigger+0x18c>)
 80011f0:	482b      	ldr	r0, [pc, #172]	; (80012a0 <uarttrigger+0x1a0>)
 80011f2:	f00a fb35 	bl	800b860 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer4, strlen(adcbuffer4), HAL_MAX_DELAY);
 80011f6:	482a      	ldr	r0, [pc, #168]	; (80012a0 <uarttrigger+0x1a0>)
 80011f8:	f7ff f872 	bl	80002e0 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	4926      	ldr	r1, [pc, #152]	; (80012a0 <uarttrigger+0x1a0>)
 8001206:	4819      	ldr	r0, [pc, #100]	; (800126c <uarttrigger+0x16c>)
 8001208:	f008 ff1e 	bl	800a048 <HAL_UART_Transmit>
	sprintf(adcbuffer6,"\n\r %2d \n\r",adcraw6);
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <uarttrigger+0x1a4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	491e      	ldr	r1, [pc, #120]	; (800128c <uarttrigger+0x18c>)
 8001214:	4824      	ldr	r0, [pc, #144]	; (80012a8 <uarttrigger+0x1a8>)
 8001216:	f00a fb23 	bl	800b860 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer6, strlen(adcbuffer6), HAL_MAX_DELAY);
 800121a:	4823      	ldr	r0, [pc, #140]	; (80012a8 <uarttrigger+0x1a8>)
 800121c:	f7ff f860 	bl	80002e0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	491f      	ldr	r1, [pc, #124]	; (80012a8 <uarttrigger+0x1a8>)
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <uarttrigger+0x16c>)
 800122c:	f008 ff0c 	bl	800a048 <HAL_UART_Transmit>
	sprintf(adcbuffer7,"\n\r %2d \n\r",adcraw7);
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <uarttrigger+0x1ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4915      	ldr	r1, [pc, #84]	; (800128c <uarttrigger+0x18c>)
 8001238:	481d      	ldr	r0, [pc, #116]	; (80012b0 <uarttrigger+0x1b0>)
 800123a:	f00a fb11 	bl	800b860 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)adcbuffer7, strlen(adcbuffer7), HAL_MAX_DELAY);
 800123e:	481c      	ldr	r0, [pc, #112]	; (80012b0 <uarttrigger+0x1b0>)
 8001240:	f7ff f84e 	bl	80002e0 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	4918      	ldr	r1, [pc, #96]	; (80012b0 <uarttrigger+0x1b0>)
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <uarttrigger+0x16c>)
 8001250:	f008 fefa 	bl	800a048 <HAL_UART_Transmit>

	HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f001 fc97 	bl	8002b88 <HAL_Delay>

}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	24001314 	.word	0x24001314
 8001264:	0800c184 	.word	0x0800c184
 8001268:	24000c38 	.word	0x24000c38
 800126c:	24000658 	.word	0x24000658
 8001270:	40000800 	.word	0x40000800
 8001274:	0800c1a4 	.word	0x0800c1a4
 8001278:	240010b8 	.word	0x240010b8
 800127c:	24001100 	.word	0x24001100
 8001280:	0800c1b8 	.word	0x0800c1b8
 8001284:	240010ec 	.word	0x240010ec
 8001288:	240000a8 	.word	0x240000a8
 800128c:	0800c1cc 	.word	0x0800c1cc
 8001290:	240016f0 	.word	0x240016f0
 8001294:	240000ac 	.word	0x240000ac
 8001298:	24001380 	.word	0x24001380
 800129c:	240000b0 	.word	0x240000b0
 80012a0:	24001104 	.word	0x24001104
 80012a4:	240000b4 	.word	0x240000b4
 80012a8:	24000e2c 	.word	0x24000e2c
 80012ac:	240000b8 	.word	0x240000b8
 80012b0:	2400160c 	.word	0x2400160c

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f001 fbd4 	bl	8002a64 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f898 	bl	80013f0 <SystemClock_Config>
/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012c0:	f000 f916 	bl	80014f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c4:	f000 fbf0 	bl	8001aa8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012c8:	f000 fb70 	bl	80019ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012cc:	f000 fbba 	bl	8001a44 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80012d0:	f000 f98c 	bl	80015ec <MX_I2C1_Init>
  MX_ADC3_Init();
 80012d4:	f000 f928 	bl	8001528 <MX_ADC3_Init>
  MX_TIM1_Init();
 80012d8:	f000 f9c8 	bl	800166c <MX_TIM1_Init>
  MX_TIM3_Init();
 80012dc:	f000 fa1a 	bl	8001714 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012e0:	f000 fa68 	bl	80017b4 <MX_TIM4_Init>
  MX_TIM14_Init();
 80012e4:	f000 fb14 	bl	8001910 <MX_TIM14_Init>
  MX_TIM5_Init();
 80012e8:	f000 faba 	bl	8001860 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80012ec:	f000 fdba 	bl	8001e64 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80012f0:	4830      	ldr	r0, [pc, #192]	; (80013b4 <main+0x100>)
 80012f2:	f007 fb09 	bl	8008908 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80012f6:	4830      	ldr	r0, [pc, #192]	; (80013b8 <main+0x104>)
 80012f8:	f007 fb06 	bl	8008908 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012fc:	201d      	movs	r0, #29
 80012fe:	f003 f950 	bl	80045a2 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001302:	213c      	movs	r1, #60	; 0x3c
 8001304:	482d      	ldr	r0, [pc, #180]	; (80013bc <main+0x108>)
 8001306:	f007 fd8d 	bl	8008e24 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800130a:	2100      	movs	r1, #0
 800130c:	482c      	ldr	r0, [pc, #176]	; (80013c0 <main+0x10c>)
 800130e:	f007 fbd5 	bl	8008abc <HAL_TIM_PWM_Start>
  DS1302_Init();
 8001312:	f7ff fb73 	bl	80009fc <DS1302_Init>
  HAL_Delay(200);
 8001316:	20c8      	movs	r0, #200	; 0xc8
 8001318:	f001 fc36 	bl	8002b88 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uartflag==1)
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <main+0x110>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d104      	bne.n	800132e <main+0x7a>
	  {
		  uarttrigger();
 8001324:	f7ff feec 	bl	8001100 <uarttrigger>
		  uartflag=0;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <main+0x110>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
	  }
      encoderReading = TIM4->CNT;  // Original reading
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <main+0x114>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	4a26      	ldr	r2, [pc, #152]	; (80013cc <main+0x118>)
 8001334:	6013      	str	r3, [r2, #0]
      // Scale the reading to a range of 1 second to 300 seconds
      scaledTime = MIN_TIME + ((encoderReading * (MAX_TIME - MIN_TIME)) / MAX_ENCODER_VALUE);
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <main+0x118>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f240 122b 	movw	r2, #299	; 0x12b
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	0a9b      	lsrs	r3, r3, #10
 8001344:	3301      	adds	r3, #1
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <main+0x11c>)
 8001348:	6013      	str	r3, [r2, #0]
      setTiming1=(scaledTime);
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <main+0x11c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <main+0x120>)
 8001350:	6013      	str	r3, [r2, #0]
      // Now scaledTime should be in the range of 1 second to 300 seconds
      sprintf(buffer, "SetTime ADC:%ds\n", scaledTime);
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <main+0x11c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	491f      	ldr	r1, [pc, #124]	; (80013d8 <main+0x124>)
 800135a:	4820      	ldr	r0, [pc, #128]	; (80013dc <main+0x128>)
 800135c:	f00a fa80 	bl	800b860 <siprintf>
      ssd1306_Fill(Black);
 8001360:	2000      	movs	r0, #0
 8001362:	f000 fde9 	bl	8001f38 <ssd1306_Fill>
      ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 8001366:	2100      	movs	r1, #0
 8001368:	2000      	movs	r0, #0
 800136a:	f000 ff33 	bl	80021d4 <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <main+0x12c>)
 8001370:	2301      	movs	r3, #1
 8001372:	ca06      	ldmia	r2, {r1, r2}
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <main+0x128>)
 8001376:	f000 ff07 	bl	8002188 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800137a:	f000 fe01 	bl	8001f80 <ssd1306_UpdateScreen>

      // take all the adc measurements
      if(counter1>99)
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <main+0x130>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b63      	cmp	r3, #99	; 0x63
 8001384:	d902      	bls.n	800138c <main+0xd8>
      {
    	  counter1=0;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <main+0x130>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
      }

      if(adc_flag==1)
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <main+0x134>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d104      	bne.n	800139e <main+0xea>
      {

    	  ADC_TAKE_ALL();
 8001394:	f7ff fdbe 	bl	8000f14 <ADC_TAKE_ALL>
    	  adc_flag=0;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <main+0x134>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

      }

      if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1)
 800139e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <main+0x138>)
 80013a4:	f003 fac8 	bl	8004938 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d1b6      	bne.n	800131c <main+0x68>
      {
    	  datalogger();
 80013ae:	f7ff fbe5 	bl	8000b7c <datalogger>
	  if(uartflag==1)
 80013b2:	e7b3      	b.n	800131c <main+0x68>
 80013b4:	24000bec 	.word	0x24000bec
 80013b8:	24000b3c 	.word	0x24000b3c
 80013bc:	24000540 	.word	0x24000540
 80013c0:	24001640 	.word	0x24001640
 80013c4:	240000a0 	.word	0x240000a0
 80013c8:	40000800 	.word	0x40000800
 80013cc:	240005f0 	.word	0x240005f0
 80013d0:	24001100 	.word	0x24001100
 80013d4:	24000000 	.word	0x24000000
 80013d8:	0800c1b8 	.word	0x0800c1b8
 80013dc:	240010ec 	.word	0x240010ec
 80013e0:	24000004 	.word	0x24000004
 80013e4:	240000bc 	.word	0x240000bc
 80013e8:	2400009c 	.word	0x2400009c
 80013ec:	58020800 	.word	0x58020800

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09c      	sub	sp, #112	; 0x70
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	224c      	movs	r2, #76	; 0x4c
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f00a fa26 	bl	800b850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2220      	movs	r2, #32
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f00a fa20 	bl	800b850 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001410:	2002      	movs	r0, #2
 8001412:	f004 f899 	bl	8005548 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <SystemClock_Config+0xf8>)
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <SystemClock_Config+0xf8>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <SystemClock_Config+0xf8>)
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <SystemClock_Config+0xfc>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001438:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <SystemClock_Config+0xfc>)
 800143a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <SystemClock_Config+0xfc>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800144c:	bf00      	nop
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <SystemClock_Config+0xfc>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145a:	d1f8      	bne.n	800144e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 800145c:	2312      	movs	r3, #18
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001460:	2309      	movs	r3, #9
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800146c:	2320      	movs	r3, #32
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001474:	2301      	movs	r3, #1
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001478:	2301      	movs	r3, #1
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 800147c:	2325      	movs	r3, #37	; 0x25
 800147e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001484:	2303      	movs	r3, #3
 8001486:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001488:	2302      	movs	r3, #2
 800148a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800148c:	2308      	movs	r3, #8
 800148e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001490:	2302      	movs	r3, #2
 8001492:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4618      	mov	r0, r3
 800149e:	f004 f89d 	bl	80055dc <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80014a8:	f000 fc84 	bl	8001db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	233f      	movs	r3, #63	; 0x3f
 80014ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fcaf 	bl	8005e34 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80014dc:	f000 fc6a 	bl	8001db4 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3770      	adds	r7, #112	; 0x70
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58000400 	.word	0x58000400
 80014ec:	58024800 	.word	0x58024800

080014f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0b0      	sub	sp, #192	; 0xc0
 80014f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	22bc      	movs	r2, #188	; 0xbc
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00a f9a7 	bl	800b850 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001506:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001508:	2300      	movs	r3, #0
 800150a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4618      	mov	r0, r3
 8001510:	f005 f81c 	bl	800654c <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 800151a:	f000 fc4b 	bl	8001db4 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	37c0      	adds	r7, #192	; 0xc0
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001542:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <MX_ADC3_Init+0xc0>)
 8001544:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <MX_ADC3_Init+0xbc>)
 800154e:	2208      	movs	r2, #8
 8001550:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_ADC3_Init+0xbc>)
 800155a:	2204      	movs	r2, #4
 800155c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001560:	2200      	movs	r2, #0
 8001562:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001566:	2201      	movs	r2, #1
 8001568:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_ADC3_Init+0xbc>)
 800156c:	2201      	movs	r2, #1
 800156e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001572:	2200      	movs	r2, #0
 8001574:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_ADC3_Init+0xbc>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001584:	2200      	movs	r2, #0
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_ADC3_Init+0xbc>)
 800158a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001592:	2200      	movs	r2, #0
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_ADC3_Init+0xbc>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800159e:	4811      	ldr	r0, [pc, #68]	; (80015e4 <MX_ADC3_Init+0xbc>)
 80015a0:	f001 fd6a 	bl	8003078 <HAL_ADC_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80015aa:	f000 fc03 	bl	8001db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ae:	2301      	movs	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b2:	2306      	movs	r3, #6
 80015b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015c0:	2304      	movs	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_ADC3_Init+0xbc>)
 80015ce:	f002 f8f3 	bl	80037b8 <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80015d8:	f000 fbec 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	24000e60 	.word	0x24000e60
 80015e8:	58026000 	.word	0x58026000

080015ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_I2C1_Init+0x74>)
 80015f2:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <MX_I2C1_Init+0x78>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_I2C1_Init+0x74>)
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <MX_I2C1_Init+0x7c>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_I2C1_Init+0x74>)
 8001604:	2201      	movs	r2, #1
 8001606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_I2C1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001626:	480e      	ldr	r0, [pc, #56]	; (8001660 <MX_I2C1_Init+0x74>)
 8001628:	f003 f9b8 	bl	800499c <HAL_I2C_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001632:	f000 fbbf 	bl	8001db4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <MX_I2C1_Init+0x74>)
 800163a:	f003 fda5 	bl	8005188 <HAL_I2CEx_ConfigAnalogFilter>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001644:	f000 fbb6 	bl	8001db4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_I2C1_Init+0x74>)
 800164c:	f003 fde7 	bl	800521e <HAL_I2CEx_ConfigDigitalFilter>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001656:	f000 fbad 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	240006e8 	.word	0x240006e8
 8001664:	40005400 	.word	0x40005400
 8001668:	10b0dcfb 	.word	0x10b0dcfb

0800166c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_TIM1_Init+0xa0>)
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <MX_TIM1_Init+0xa4>)
 800168e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_TIM1_Init+0xa0>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_TIM1_Init+0xa0>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_TIM1_Init+0xa0>)
 800169e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_TIM1_Init+0xa0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_TIM1_Init+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_TIM1_Init+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <MX_TIM1_Init+0xa0>)
 80016b8:	f007 f8ce 	bl	8008858 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016c2:	f000 fb77 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <MX_TIM1_Init+0xa0>)
 80016d4:	f007 fe68 	bl	80093a8 <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016de:	f000 fb69 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_TIM1_Init+0xa0>)
 80016f4:	f008 fbac 	bl	8009e50 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016fe:	f000 fb59 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	240012c8 	.word	0x240012c8
 8001710:	40010000 	.word	0x40010000

08001714 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_TIM3_Init+0x98>)
 8001734:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <MX_TIM3_Init+0x9c>)
 8001736:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_TIM3_Init+0x98>)
 800173a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800173e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_TIM3_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_TIM3_Init+0x98>)
 8001748:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800174c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_TIM3_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_TIM3_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800175a:	4814      	ldr	r0, [pc, #80]	; (80017ac <MX_TIM3_Init+0x98>)
 800175c:	f007 f87c 	bl	8008858 <HAL_TIM_Base_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001766:	f000 fb25 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_TIM3_Init+0x98>)
 8001778:	f007 fe16 	bl	80093a8 <HAL_TIM_ConfigClockSource>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001782:	f000 fb17 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_TIM3_Init+0x98>)
 8001794:	f008 fb5c 	bl	8009e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800179e:	f000 fb09 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	24000bec 	.word	0x24000bec
 80017b0:	40000400 	.word	0x40000400

080017b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2224      	movs	r2, #36	; 0x24
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00a f844 	bl	800b850 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	463b      	mov	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_TIM4_Init+0xa4>)
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <MX_TIM4_Init+0xa8>)
 80017d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_TIM4_Init+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_TIM4_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_TIM4_Init+0xa4>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_TIM4_Init+0xa4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_TIM4_Init+0xa4>)
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017f8:	2303      	movs	r3, #3
 80017fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001800:	2301      	movs	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	4619      	mov	r1, r3
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_TIM4_Init+0xa4>)
 8001824:	f007 fa58 	bl	8008cd8 <HAL_TIM_Encoder_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800182e:	f000 fac1 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_TIM4_Init+0xa4>)
 8001840:	f008 fb06 	bl	8009e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800184a:	f000 fab3 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3730      	adds	r7, #48	; 0x30
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24000540 	.word	0x24000540
 800185c:	40000800 	.word	0x40000800

08001860 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_TIM5_Init+0xa0>)
 8001880:	4a20      	ldr	r2, [pc, #128]	; (8001904 <MX_TIM5_Init+0xa4>)
 8001882:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = (SystemCoreClock/1000)-1;
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_TIM5_Init+0xa8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <MX_TIM5_Init+0xac>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	3b01      	subs	r3, #1
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <MX_TIM5_Init+0xa0>)
 8001894:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_TIM5_Init+0xa0>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_TIM5_Init+0xa0>)
 800189e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_TIM5_Init+0xa0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_TIM5_Init+0xa0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018b0:	4813      	ldr	r0, [pc, #76]	; (8001900 <MX_TIM5_Init+0xa0>)
 80018b2:	f006 ffd1 	bl	8008858 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80018bc:	f000 fa7a 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	4619      	mov	r1, r3
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_TIM5_Init+0xa0>)
 80018ce:	f007 fd6b 	bl	80093a8 <HAL_TIM_ConfigClockSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80018d8:	f000 fa6c 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_TIM5_Init+0xa0>)
 80018ea:	f008 fab1 	bl	8009e50 <HAL_TIMEx_MasterConfigSynchronization>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80018f4:	f000 fa5e 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	24000b3c 	.word	0x24000b3c
 8001904:	40000c00 	.word	0x40000c00
 8001908:	2400000c 	.word	0x2400000c
 800190c:	10624dd3 	.word	0x10624dd3

08001910 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	615a      	str	r2, [r3, #20]
 8001926:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_TIM14_Init+0x94>)
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <MX_TIM14_Init+0x98>)
 800192c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <MX_TIM14_Init+0x94>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_TIM14_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1024;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_TIM14_Init+0x94>)
 800193c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001940:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_TIM14_Init+0x94>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_TIM14_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800194e:	4815      	ldr	r0, [pc, #84]	; (80019a4 <MX_TIM14_Init+0x94>)
 8001950:	f006 ff82 	bl	8008858 <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800195a:	f000 fa2b 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800195e:	4811      	ldr	r0, [pc, #68]	; (80019a4 <MX_TIM14_Init+0x94>)
 8001960:	f007 f84a 	bl	80089f8 <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800196a:	f000 fa23 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_TIM14_Init+0x94>)
 8001986:	f007 fbfb 	bl	8009180 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001990:	f000 fa10 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_TIM14_Init+0x94>)
 8001996:	f000 fe23 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	24001640 	.word	0x24001640
 80019a8:	40002000 	.word	0x40002000

080019ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019b2:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <MX_USART3_UART_Init+0x94>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019f4:	4811      	ldr	r0, [pc, #68]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 80019f6:	f008 fad7 	bl	8009fa8 <HAL_UART_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a00:	f000 f9d8 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a04:	2100      	movs	r1, #0
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 8001a08:	f009 fb02 	bl	800b010 <HAL_UARTEx_SetTxFifoThreshold>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a12:	f000 f9cf 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a16:	2100      	movs	r1, #0
 8001a18:	4808      	ldr	r0, [pc, #32]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 8001a1a:	f009 fb37 	bl	800b08c <HAL_UARTEx_SetRxFifoThreshold>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a24:	f000 f9c6 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_USART3_UART_Init+0x90>)
 8001a2a:	f009 fab8 	bl	800af9e <HAL_UARTEx_DisableFifoMode>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a34:	f000 f9be 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	24000658 	.word	0x24000658
 8001a40:	40004800 	.word	0x40004800

08001a44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a50:	2209      	movs	r2, #9
 8001a52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a8c:	f003 fc13 	bl	80052b6 <HAL_PCD_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001a96:	f000 f98d 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	24000734 	.word	0x24000734
 8001aa4:	40080000 	.word	0x40080000

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	; 0x38
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001abe:	4bb5      	ldr	r3, [pc, #724]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac4:	4ab3      	ldr	r2, [pc, #716]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001ac6:	f043 0310 	orr.w	r3, r3, #16
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ace:	4bb1      	ldr	r3, [pc, #708]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	4bad      	ldr	r3, [pc, #692]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	4aac      	ldr	r2, [pc, #688]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aec:	4ba9      	ldr	r3, [pc, #676]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afa:	4ba6      	ldr	r3, [pc, #664]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b00:	4aa4      	ldr	r2, [pc, #656]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0a:	4ba2      	ldr	r3, [pc, #648]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b18:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1e:	4a9d      	ldr	r2, [pc, #628]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b28:	4b9a      	ldr	r3, [pc, #616]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b97      	ldr	r3, [pc, #604]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	4a95      	ldr	r2, [pc, #596]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b46:	4b93      	ldr	r3, [pc, #588]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b54:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	4a8e      	ldr	r2, [pc, #568]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b64:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	4a86      	ldr	r2, [pc, #536]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b82:	4b84      	ldr	r3, [pc, #528]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b90:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	4a7f      	ldr	r2, [pc, #508]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba0:	4b7c      	ldr	r3, [pc, #496]	; (8001d94 <MX_GPIO_Init+0x2ec>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RTC_CLK_Pin|RTC_RST_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2106      	movs	r1, #6
 8001bb2:	4879      	ldr	r0, [pc, #484]	; (8001d98 <MX_GPIO_Init+0x2f0>)
 8001bb4:	f002 fed8 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001bbe:	4877      	ldr	r0, [pc, #476]	; (8001d9c <MX_GPIO_Init+0x2f4>)
 8001bc0:	f002 fed2 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	4875      	ldr	r0, [pc, #468]	; (8001da0 <MX_GPIO_Init+0x2f8>)
 8001bca:	f002 fecd 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	4619      	mov	r1, r3
 8001be2:	4870      	ldr	r0, [pc, #448]	; (8001da4 <MX_GPIO_Init+0x2fc>)
 8001be4:	f002 fcf8 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	486a      	ldr	r0, [pc, #424]	; (8001da8 <MX_GPIO_Init+0x300>)
 8001c00:	f002 fcea 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_IO_Pin */
  GPIO_InitStruct.Pin = RTC_IO_Pin;
 8001c04:	2301      	movs	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RTC_IO_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4860      	ldr	r0, [pc, #384]	; (8001d98 <MX_GPIO_Init+0x2f0>)
 8001c18:	f002 fcde 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CLK_Pin RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_CLK_Pin|RTC_RST_Pin;
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4859      	ldr	r0, [pc, #356]	; (8001d98 <MX_GPIO_Init+0x2f0>)
 8001c34:	f002 fcd0 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF6 PF7
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001c38:	f64f 03d8 	movw	r3, #63704	; 0xf8d8
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4852      	ldr	r0, [pc, #328]	; (8001d98 <MX_GPIO_Init+0x2f0>)
 8001c4e:	f002 fcc3 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001c52:	f641 73f1 	movw	r3, #8177	; 0x1ff1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4850      	ldr	r0, [pc, #320]	; (8001da8 <MX_GPIO_Init+0x300>)
 8001c68:	f002 fcb6 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4848      	ldr	r0, [pc, #288]	; (8001da8 <MX_GPIO_Init+0x300>)
 8001c88:	f002 fca6 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c8c:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c92:	2303      	movs	r3, #3
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4842      	ldr	r0, [pc, #264]	; (8001dac <MX_GPIO_Init+0x304>)
 8001ca2:	f002 fc99 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001ca6:	f649 4377 	movw	r3, #40055	; 0x9c77
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cac:	2303      	movs	r3, #3
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4838      	ldr	r0, [pc, #224]	; (8001d9c <MX_GPIO_Init+0x2f4>)
 8001cbc:	f002 fc8c 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cc0:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4832      	ldr	r0, [pc, #200]	; (8001da0 <MX_GPIO_Init+0x2f8>)
 8001cd6:	f002 fc7f 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cec:	230b      	movs	r3, #11
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4829      	ldr	r0, [pc, #164]	; (8001d9c <MX_GPIO_Init+0x2f4>)
 8001cf8:	f002 fc6e 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001cfc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4821      	ldr	r0, [pc, #132]	; (8001d9c <MX_GPIO_Init+0x2f4>)
 8001d16:	f002 fc5f 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001d1a:	f64c 43ff 	movw	r3, #52479	; 0xccff
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d20:	2303      	movs	r3, #3
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4820      	ldr	r0, [pc, #128]	; (8001db0 <MX_GPIO_Init+0x308>)
 8001d30:	f002 fc52 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4815      	ldr	r0, [pc, #84]	; (8001da0 <MX_GPIO_Init+0x2f8>)
 8001d4c:	f002 fc44 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	4619      	mov	r1, r3
 8001d62:	480f      	ldr	r0, [pc, #60]	; (8001da0 <MX_GPIO_Init+0x2f8>)
 8001d64:	f002 fc38 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d7a:	230b      	movs	r3, #11
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <MX_GPIO_Init+0x2f8>)
 8001d86:	f002 fc27 	bl	80045d8 <HAL_GPIO_Init>

}
 8001d8a:	bf00      	nop
 8001d8c:	3738      	adds	r7, #56	; 0x38
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	58024400 	.word	0x58024400
 8001d98:	58021400 	.word	0x58021400
 8001d9c:	58020400 	.word	0x58020400
 8001da0:	58021800 	.word	0x58021800
 8001da4:	58021000 	.word	0x58021000
 8001da8:	58020800 	.word	0x58020800
 8001dac:	58020000 	.word	0x58020000
 8001db0:	58020c00 	.word	0x58020c00

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    char buffer[20];

    ssd1306_Fill(Black);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f8bc 	bl	8001f38 <ssd1306_Fill>

    sprintf(buffer, "gGMTXMMMMMMMMMMMM\n");
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4909      	ldr	r1, [pc, #36]	; (8001de8 <Error_Handler+0x34>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f009 fd4b 	bl	800b860 <siprintf>
    ssd1306_SetCursor(0,0); // Adjust these values according to where you want the text to start
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f000 fa01 	bl	80021d4 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer, Font_7x10, White); // Replace with your font and color choice
 8001dd2:	4a06      	ldr	r2, [pc, #24]	; (8001dec <Error_Handler+0x38>)
 8001dd4:	1d38      	adds	r0, r7, #4
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	ca06      	ldmia	r2, {r1, r2}
 8001dda:	f000 f9d5 	bl	8002188 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001dde:	f000 f8cf 	bl	8001f80 <ssd1306_UpdateScreen>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de2:	b672      	cpsid	i
}
 8001de4:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <Error_Handler+0x32>
 8001de8:	0800c1d8 	.word	0x0800c1d8
 8001dec:	24000004 	.word	0x24000004

08001df0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af04      	add	r7, sp, #16
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	2301      	movs	r3, #1
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2178      	movs	r1, #120	; 0x78
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <ssd1306_WriteCommand+0x2c>)
 8001e20:	f002 fe4c 	bl	8004abc <HAL_I2C_Mem_Write>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	240006e8 	.word	0x240006e8

08001e30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af04      	add	r7, sp, #16
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e42:	9202      	str	r2, [sp, #8]
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	2178      	movs	r1, #120	; 0x78
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <ssd1306_WriteData+0x30>)
 8001e52:	f002 fe33 	bl	8004abc <HAL_I2C_Mem_Write>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	240006e8 	.word	0x240006e8

08001e64 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e68:	f7ff ffc2 	bl	8001df0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e6c:	2064      	movs	r0, #100	; 0x64
 8001e6e:	f000 fe8b 	bl	8002b88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e72:	2000      	movs	r0, #0
 8001e74:	f000 f9da 	bl	800222c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e78:	2020      	movs	r0, #32
 8001e7a:	f7ff ffc1 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff ffbe 	bl	8001e00 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e84:	20b0      	movs	r0, #176	; 0xb0
 8001e86:	f7ff ffbb 	bl	8001e00 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e8a:	20c8      	movs	r0, #200	; 0xc8
 8001e8c:	f7ff ffb8 	bl	8001e00 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff ffb5 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e96:	2010      	movs	r0, #16
 8001e98:	f7ff ffb2 	bl	8001e00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e9c:	2040      	movs	r0, #64	; 0x40
 8001e9e:	f7ff ffaf 	bl	8001e00 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ea2:	20ff      	movs	r0, #255	; 0xff
 8001ea4:	f000 f9ae 	bl	8002204 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ea8:	20a1      	movs	r0, #161	; 0xa1
 8001eaa:	f7ff ffa9 	bl	8001e00 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001eae:	20a6      	movs	r0, #166	; 0xa6
 8001eb0:	f7ff ffa6 	bl	8001e00 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001eb4:	20a8      	movs	r0, #168	; 0xa8
 8001eb6:	f7ff ffa3 	bl	8001e00 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001eba:	203f      	movs	r0, #63	; 0x3f
 8001ebc:	f7ff ffa0 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ec0:	20a4      	movs	r0, #164	; 0xa4
 8001ec2:	f7ff ff9d 	bl	8001e00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001ec6:	20d3      	movs	r0, #211	; 0xd3
 8001ec8:	f7ff ff9a 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff ff97 	bl	8001e00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ed2:	20d5      	movs	r0, #213	; 0xd5
 8001ed4:	f7ff ff94 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ed8:	20f0      	movs	r0, #240	; 0xf0
 8001eda:	f7ff ff91 	bl	8001e00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ede:	20d9      	movs	r0, #217	; 0xd9
 8001ee0:	f7ff ff8e 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ee4:	2022      	movs	r0, #34	; 0x22
 8001ee6:	f7ff ff8b 	bl	8001e00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001eea:	20da      	movs	r0, #218	; 0xda
 8001eec:	f7ff ff88 	bl	8001e00 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ef0:	2012      	movs	r0, #18
 8001ef2:	f7ff ff85 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ef6:	20db      	movs	r0, #219	; 0xdb
 8001ef8:	f7ff ff82 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001efc:	2020      	movs	r0, #32
 8001efe:	f7ff ff7f 	bl	8001e00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f02:	208d      	movs	r0, #141	; 0x8d
 8001f04:	f7ff ff7c 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f08:	2014      	movs	r0, #20
 8001f0a:	f7ff ff79 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 f98c 	bl	800222c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 f80f 	bl	8001f38 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f1a:	f000 f831 	bl	8001f80 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <ssd1306_Init+0xd0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <ssd1306_Init+0xd0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f2a:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <ssd1306_Init+0xd0>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	711a      	strb	r2, [r3, #4]
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	240004c8 	.word	0x240004c8

08001f38 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e00d      	b.n	8001f64 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <ssd1306_Fill+0x1a>
 8001f4e:	2100      	movs	r1, #0
 8001f50:	e000      	b.n	8001f54 <ssd1306_Fill+0x1c>
 8001f52:	21ff      	movs	r1, #255	; 0xff
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <ssd1306_Fill+0x44>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d3ed      	bcc.n	8001f48 <ssd1306_Fill+0x10>
    }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	240000c8 	.word	0x240000c8

08001f80 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	e016      	b.n	8001fba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	3b50      	subs	r3, #80	; 0x50
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff34 	bl	8001e00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff ff31 	bl	8001e00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f7ff ff2e 	bl	8001e00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <ssd1306_UpdateScreen+0x4c>)
 8001faa:	4413      	add	r3, r2
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff3e 	bl	8001e30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b07      	cmp	r3, #7
 8001fbe:	d9e5      	bls.n	8001f8c <ssd1306_UpdateScreen+0xc>
    }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	240000c8 	.word	0x240000c8

08001fd0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db3d      	blt.n	8002066 <ssd1306_DrawPixel+0x96>
 8001fea:	79bb      	ldrb	r3, [r7, #6]
 8001fec:	2b3f      	cmp	r3, #63	; 0x3f
 8001fee:	d83a      	bhi.n	8002066 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ff0:	797b      	ldrb	r3, [r7, #5]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d11a      	bne.n	800202c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	79bb      	ldrb	r3, [r7, #6]
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	b2d8      	uxtb	r0, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	01db      	lsls	r3, r3, #7
 8002002:	4413      	add	r3, r2
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <ssd1306_DrawPixel+0xa4>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	b25a      	sxtb	r2, r3
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b259      	sxtb	r1, r3
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	4603      	mov	r3, r0
 8002020:	01db      	lsls	r3, r3, #7
 8002022:	4413      	add	r3, r2
 8002024:	b2c9      	uxtb	r1, r1
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <ssd1306_DrawPixel+0xa4>)
 8002028:	54d1      	strb	r1, [r2, r3]
 800202a:	e01d      	b.n	8002068 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800202c:	79fa      	ldrb	r2, [r7, #7]
 800202e:	79bb      	ldrb	r3, [r7, #6]
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	b2d8      	uxtb	r0, r3
 8002034:	4603      	mov	r3, r0
 8002036:	01db      	lsls	r3, r3, #7
 8002038:	4413      	add	r3, r2
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <ssd1306_DrawPixel+0xa4>)
 800203c:	5cd3      	ldrb	r3, [r2, r3]
 800203e:	b25a      	sxtb	r2, r3
 8002040:	79bb      	ldrb	r3, [r7, #6]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	b25b      	sxtb	r3, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	b25b      	sxtb	r3, r3
 8002052:	4013      	ands	r3, r2
 8002054:	b259      	sxtb	r1, r3
 8002056:	79fa      	ldrb	r2, [r7, #7]
 8002058:	4603      	mov	r3, r0
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	4413      	add	r3, r2
 800205e:	b2c9      	uxtb	r1, r1
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <ssd1306_DrawPixel+0xa4>)
 8002062:	54d1      	strb	r1, [r2, r3]
 8002064:	e000      	b.n	8002068 <ssd1306_DrawPixel+0x98>
        return;
 8002066:	bf00      	nop
    }
}
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	240000c8 	.word	0x240000c8

08002078 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	4604      	mov	r4, r0
 8002080:	1d38      	adds	r0, r7, #4
 8002082:	e880 0006 	stmia.w	r0, {r1, r2}
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	4613      	mov	r3, r2
 800208e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b1f      	cmp	r3, #31
 8002094:	d902      	bls.n	800209c <ssd1306_WriteChar+0x24>
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b7e      	cmp	r3, #126	; 0x7e
 800209a:	d901      	bls.n	80020a0 <ssd1306_WriteChar+0x28>
        return 0;
 800209c:	2300      	movs	r3, #0
 800209e:	e06d      	b.n	800217c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020a0:	4b38      	ldr	r3, [pc, #224]	; (8002184 <ssd1306_WriteChar+0x10c>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	793b      	ldrb	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	dc06      	bgt.n	80020bc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020ae:	4b35      	ldr	r3, [pc, #212]	; (8002184 <ssd1306_WriteChar+0x10c>)
 80020b0:	885b      	ldrh	r3, [r3, #2]
 80020b2:	461a      	mov	r2, r3
 80020b4:	797b      	ldrb	r3, [r7, #5]
 80020b6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	dd01      	ble.n	80020c0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	e05d      	b.n	800217c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	e04c      	b.n	8002160 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	3b20      	subs	r3, #32
 80020cc:	7979      	ldrb	r1, [r7, #5]
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4619      	mov	r1, r3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	440b      	add	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e034      	b.n	8002150 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d012      	beq.n	800211c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <ssd1306_WriteChar+0x10c>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4413      	add	r3, r2
 8002102:	b2d8      	uxtb	r0, r3
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <ssd1306_WriteChar+0x10c>)
 8002106:	885b      	ldrh	r3, [r3, #2]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4413      	add	r3, r2
 8002110:	b2db      	uxtb	r3, r3
 8002112:	7bba      	ldrb	r2, [r7, #14]
 8002114:	4619      	mov	r1, r3
 8002116:	f7ff ff5b 	bl	8001fd0 <ssd1306_DrawPixel>
 800211a:	e016      	b.n	800214a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <ssd1306_WriteChar+0x10c>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	b2d8      	uxtb	r0, r3
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <ssd1306_WriteChar+0x10c>)
 800212c:	885b      	ldrh	r3, [r3, #2]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	4413      	add	r3, r2
 8002136:	b2d9      	uxtb	r1, r3
 8002138:	7bbb      	ldrb	r3, [r7, #14]
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	f7ff ff43 	bl	8001fd0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3301      	adds	r3, #1
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	793b      	ldrb	r3, [r7, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4293      	cmp	r3, r2
 8002158:	d3c5      	bcc.n	80020e6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	797b      	ldrb	r3, [r7, #5]
 8002162:	461a      	mov	r2, r3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	4293      	cmp	r3, r2
 8002168:	d3ad      	bcc.n	80020c6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <ssd1306_WriteChar+0x10c>)
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	793b      	ldrb	r3, [r7, #4]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4413      	add	r3, r2
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b03      	ldr	r3, [pc, #12]	; (8002184 <ssd1306_WriteChar+0x10c>)
 8002178:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3724      	adds	r7, #36	; 0x24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}
 8002184:	240004c8 	.word	0x240004c8

08002188 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	1d38      	adds	r0, r7, #4
 8002192:	e880 0006 	stmia.w	r0, {r1, r2}
 8002196:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002198:	e012      	b.n	80021c0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	7818      	ldrb	r0, [r3, #0]
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	1d3a      	adds	r2, r7, #4
 80021a2:	ca06      	ldmia	r2, {r1, r2}
 80021a4:	f7ff ff68 	bl	8002078 <ssd1306_WriteChar>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d002      	beq.n	80021ba <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	e008      	b.n	80021cc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3301      	adds	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1e8      	bne.n	800219a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	781b      	ldrb	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	460a      	mov	r2, r1
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <ssd1306_SetCursor+0x2c>)
 80021ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80021ec:	79bb      	ldrb	r3, [r7, #6]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <ssd1306_SetCursor+0x2c>)
 80021f2:	805a      	strh	r2, [r3, #2]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	240004c8 	.word	0x240004c8

08002204 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800220e:	2381      	movs	r3, #129	; 0x81
 8002210:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fdf3 	bl	8001e00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fdef 	bl	8001e00 <ssd1306_WriteCommand>
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800223c:	23af      	movs	r3, #175	; 0xaf
 800223e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <ssd1306_SetDisplayOn+0x38>)
 8002242:	2201      	movs	r2, #1
 8002244:	715a      	strb	r2, [r3, #5]
 8002246:	e004      	b.n	8002252 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002248:	23ae      	movs	r3, #174	; 0xae
 800224a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <ssd1306_SetDisplayOn+0x38>)
 800224e:	2200      	movs	r2, #0
 8002250:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fdd3 	bl	8001e00 <ssd1306_WriteCommand>
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	240004c8 	.word	0x240004c8

08002268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_MspInit+0x30>)
 8002270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002274:	4a08      	ldr	r2, [pc, #32]	; (8002298 <HAL_MspInit+0x30>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_MspInit+0x30>)
 8002280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58024400 	.word	0x58024400

0800229c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b0ba      	sub	sp, #232	; 0xe8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b4:	f107 0318 	add.w	r3, r7, #24
 80022b8:	22bc      	movs	r2, #188	; 0xbc
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f009 fac7 	bl	800b850 <memset>
  if(hadc->Instance==ADC3)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_ADC_MspInit+0xec>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d159      	bne.n	8002380 <HAL_ADC_MspInit+0xe4>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 f934 	bl	800654c <HAL_RCCEx_PeriphCLKConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80022ea:	f7ff fd63 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_ADC_MspInit+0xf0>)
 80022f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <HAL_ADC_MspInit+0xf0>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_ADC_MspInit+0xf0>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_ADC_MspInit+0xf0>)
 800230e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_ADC_MspInit+0xf0>)
 8002314:	f043 0320 	orr.w	r3, r3, #32
 8002318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_ADC_MspInit+0xf0>)
 800231e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_ADC_MspInit+0xf0>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002330:	4a16      	ldr	r2, [pc, #88]	; (800238c <HAL_ADC_MspInit+0xf0>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_ADC_MspInit+0xf0>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> ADC3_INP7
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10;
 8002348:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800234c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002350:	2303      	movs	r3, #3
 8002352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800235c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002360:	4619      	mov	r1, r3
 8002362:	480b      	ldr	r0, [pc, #44]	; (8002390 <HAL_ADC_MspInit+0xf4>)
 8002364:	f002 f938 	bl	80045d8 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002368:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800236c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002370:	f000 fc3a 	bl	8002be8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002374:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002378:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800237c:	f000 fc34 	bl	8002be8 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	37e8      	adds	r7, #232	; 0xe8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58026000 	.word	0x58026000
 800238c:	58024400 	.word	0x58024400
 8002390:	58021400 	.word	0x58021400

08002394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0b8      	sub	sp, #224	; 0xe0
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	22bc      	movs	r2, #188	; 0xbc
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f009 fa4b 	bl	800b850 <memset>
  if(hi2c->Instance==I2C1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_I2C_MspInit+0xc0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d143      	bne.n	800244c <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023c4:	2308      	movs	r3, #8
 80023c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 80023c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f8b9 	bl	800654c <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80023e0:	f7ff fce8 	bl	8001db4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_I2C_MspInit+0xc4>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_I2C_MspInit+0xc4>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_I2C_MspInit+0xc4>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002406:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240a:	2312      	movs	r3, #18
 800240c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002410:	2301      	movs	r3, #1
 8002412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800241c:	2304      	movs	r3, #4
 800241e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002422:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002426:	4619      	mov	r1, r3
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <HAL_I2C_MspInit+0xc8>)
 800242a:	f002 f8d5 	bl	80045d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_I2C_MspInit+0xc4>)
 8002430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002434:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_I2C_MspInit+0xc4>)
 8002436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_I2C_MspInit+0xc4>)
 8002440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800244c:	bf00      	nop
 800244e:	37e0      	adds	r7, #224	; 0xe0
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40005400 	.word	0x40005400
 8002458:	58024400 	.word	0x58024400
 800245c:	58020400 	.word	0x58020400

08002460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a32      	ldr	r2, [pc, #200]	; (8002538 <HAL_TIM_Base_MspInit+0xd8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10f      	bne.n	8002492 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002472:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 8002474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002478:	4a30      	ldr	r2, [pc, #192]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 8002484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002490:	e04d      	b.n	800252e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2a      	ldr	r2, [pc, #168]	; (8002540 <HAL_TIM_Base_MspInit+0xe0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d117      	bne.n	80024cc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 800249e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ac:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	201d      	movs	r0, #29
 80024c0:	f002 f855 	bl	800456e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024c4:	201d      	movs	r0, #29
 80024c6:	f002 f86c 	bl	80045a2 <HAL_NVIC_EnableIRQ>
}
 80024ca:	e030      	b.n	800252e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_TIM_Base_MspInit+0xe4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d117      	bne.n	8002506 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 80024d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024dc:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 80024e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	2032      	movs	r0, #50	; 0x32
 80024fa:	f002 f838 	bl	800456e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024fe:	2032      	movs	r0, #50	; 0x32
 8002500:	f002 f84f 	bl	80045a2 <HAL_NVIC_EnableIRQ>
}
 8002504:	e013      	b.n	800252e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM14)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_TIM_Base_MspInit+0xe8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10e      	bne.n	800252e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 8002512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_TIM_Base_MspInit+0xdc>)
 8002522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40010000 	.word	0x40010000
 800253c:	58024400 	.word	0x58024400
 8002540:	40000400 	.word	0x40000400
 8002544:	40000c00 	.word	0x40000c00
 8002548:	40002000 	.word	0x40002000

0800254c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d12e      	bne.n	80025cc <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025bc:	2302      	movs	r3, #2
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4619      	mov	r1, r3
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <HAL_TIM_Encoder_MspInit+0x90>)
 80025c8:	f002 f806 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025cc:	bf00      	nop
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40000800 	.word	0x40000800
 80025d8:	58024400 	.word	0x58024400
 80025dc:	58020c00 	.word	0x58020c00

080025e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a13      	ldr	r2, [pc, #76]	; (800264c <HAL_TIM_MspPostInit+0x6c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d11f      	bne.n	8002642 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_TIM_MspPostInit+0x70>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_TIM_MspPostInit+0x70>)
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_TIM_MspPostInit+0x70>)
 8002614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002632:	2309      	movs	r3, #9
 8002634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	4619      	mov	r1, r3
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <HAL_TIM_MspPostInit+0x74>)
 800263e:	f001 ffcb 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002642:	bf00      	nop
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40002000 	.word	0x40002000
 8002650:	58024400 	.word	0x58024400
 8002654:	58021400 	.word	0x58021400

08002658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0b8      	sub	sp, #224	; 0xe0
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	22bc      	movs	r2, #188	; 0xbc
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f009 f8e9 	bl	800b850 <memset>
  if(huart->Instance==USART3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <HAL_UART_MspInit+0xc0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d142      	bne.n	800270e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002688:	2302      	movs	r3, #2
 800268a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f003 ff58 	bl	800654c <HAL_RCCEx_PeriphCLKConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80026a2:	f7ff fb87 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_UART_MspInit+0xc4>)
 80026a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <HAL_UART_MspInit+0xc4>)
 80026ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_UART_MspInit+0xc4>)
 80026b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_UART_MspInit+0xc4>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <HAL_UART_MspInit+0xc4>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_UART_MspInit+0xc4>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80026e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026fc:	2307      	movs	r3, #7
 80026fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002702:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002706:	4619      	mov	r1, r3
 8002708:	4805      	ldr	r0, [pc, #20]	; (8002720 <HAL_UART_MspInit+0xc8>)
 800270a:	f001 ff65 	bl	80045d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800270e:	bf00      	nop
 8002710:	37e0      	adds	r7, #224	; 0xe0
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40004800 	.word	0x40004800
 800271c:	58024400 	.word	0x58024400
 8002720:	58020c00 	.word	0x58020c00

08002724 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b8      	sub	sp, #224	; 0xe0
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	22bc      	movs	r2, #188	; 0xbc
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f009 f883 	bl	800b850 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2f      	ldr	r2, [pc, #188]	; (800280c <HAL_PCD_MspInit+0xe8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d156      	bne.n	8002802 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002758:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800275a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800275e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fef0 	bl	800654c <HAL_RCCEx_PeriphCLKConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002772:	f7ff fb1f 	bl	8001db4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002776:	f002 ff21 	bl	80055bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_PCD_MspInit+0xec>)
 800277c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <HAL_PCD_MspInit+0xec>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_PCD_MspInit+0xec>)
 800278c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002798:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800279c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80027b2:	230a      	movs	r3, #10
 80027b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027bc:	4619      	mov	r1, r3
 80027be:	4815      	ldr	r0, [pc, #84]	; (8002814 <HAL_PCD_MspInit+0xf0>)
 80027c0:	f001 ff0a 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80027c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027dc:	4619      	mov	r1, r3
 80027de:	480d      	ldr	r0, [pc, #52]	; (8002814 <HAL_PCD_MspInit+0xf0>)
 80027e0:	f001 fefa 	bl	80045d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_PCD_MspInit+0xec>)
 80027e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_PCD_MspInit+0xec>)
 80027ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_PCD_MspInit+0xec>)
 80027f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	37e0      	adds	r7, #224	; 0xe0
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40080000 	.word	0x40080000
 8002810:	58024400 	.word	0x58024400
 8002814:	58020000 	.word	0x58020000

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002864:	f000 f970 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <TIM3_IRQHandler+0x10>)
 8002872:	f006 fb65 	bl	8008f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	24000bec 	.word	0x24000bec

08002880 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <TIM5_IRQHandler+0x10>)
 8002886:	f006 fb5b 	bl	8008f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	24000b3c 	.word	0x24000b3c

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f008 ff72 	bl	800b7ac <__errno>
 80028c8:	4603      	mov	r3, r0
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	24080000 	.word	0x24080000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	240004d0 	.word	0x240004d0
 80028fc:	240018c8 	.word	0x240018c8

08002900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002904:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <SystemInit+0xe4>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <SystemInit+0xe4>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <SystemInit+0xe8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	2b06      	cmp	r3, #6
 800291e:	d807      	bhi.n	8002930 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <SystemInit+0xe8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 030f 	bic.w	r3, r3, #15
 8002928:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <SystemInit+0xe8>)
 800292a:	f043 0307 	orr.w	r3, r3, #7
 800292e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002930:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <SystemInit+0xec>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <SystemInit+0xec>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <SystemInit+0xec>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002942:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <SystemInit+0xec>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4929      	ldr	r1, [pc, #164]	; (80029ec <SystemInit+0xec>)
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <SystemInit+0xf0>)
 800294a:	4013      	ands	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <SystemInit+0xe8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <SystemInit+0xe8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 030f 	bic.w	r3, r3, #15
 8002962:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <SystemInit+0xe8>)
 8002964:	f043 0307 	orr.w	r3, r3, #7
 8002968:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <SystemInit+0xec>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <SystemInit+0xec>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <SystemInit+0xec>)
 8002978:	2200      	movs	r2, #0
 800297a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <SystemInit+0xec>)
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <SystemInit+0xf4>)
 8002980:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <SystemInit+0xec>)
 8002984:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <SystemInit+0xf8>)
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <SystemInit+0xec>)
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <SystemInit+0xfc>)
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <SystemInit+0xec>)
 8002990:	2200      	movs	r2, #0
 8002992:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <SystemInit+0xec>)
 8002996:	4a19      	ldr	r2, [pc, #100]	; (80029fc <SystemInit+0xfc>)
 8002998:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <SystemInit+0xec>)
 800299c:	2200      	movs	r2, #0
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <SystemInit+0xec>)
 80029a2:	4a16      	ldr	r2, [pc, #88]	; (80029fc <SystemInit+0xfc>)
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <SystemInit+0xec>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <SystemInit+0xec>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <SystemInit+0xec>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <SystemInit+0xec>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <SystemInit+0x100>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <SystemInit+0x104>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ca:	d202      	bcs.n	80029d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <SystemInit+0x108>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <SystemInit+0x10c>)
 80029d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80029d8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00
 80029e8:	52002000 	.word	0x52002000
 80029ec:	58024400 	.word	0x58024400
 80029f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80029f4:	02020200 	.word	0x02020200
 80029f8:	01ff0000 	.word	0x01ff0000
 80029fc:	01010280 	.word	0x01010280
 8002a00:	5c001000 	.word	0x5c001000
 8002a04:	ffff0000 	.word	0xffff0000
 8002a08:	51008108 	.word	0x51008108
 8002a0c:	52004000 	.word	0x52004000

08002a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a14:	f7ff ff74 	bl	8002900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a18:	480c      	ldr	r0, [pc, #48]	; (8002a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a1a:	490d      	ldr	r1, [pc, #52]	; (8002a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a30:	4c0a      	ldr	r4, [pc, #40]	; (8002a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f008 febb 	bl	800b7b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a42:	f7fe fc37 	bl	80012b4 <main>
  bx  lr
 8002a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a50:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8002a54:	0800c9d4 	.word	0x0800c9d4
  ldr r2, =_sbss
 8002a58:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002a5c:	240018c8 	.word	0x240018c8

08002a60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC3_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	f001 fd74 	bl	8004558 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a70:	f003 fb96 	bl	80061a0 <HAL_RCC_GetSysClockFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_Init+0x68>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	4913      	ldr	r1, [pc, #76]	; (8002ad0 <HAL_Init+0x6c>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_Init+0x68>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <HAL_Init+0x6c>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <HAL_Init+0x70>)
 8002aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <HAL_Init+0x74>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f000 f814 	bl	8002adc <HAL_InitTick>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e002      	b.n	8002ac4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002abe:	f7ff fbd3 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	0800c958 	.word	0x0800c958
 8002ad4:	24000010 	.word	0x24000010
 8002ad8:	2400000c 	.word	0x2400000c

08002adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_InitTick+0x60>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e021      	b.n	8002b34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_InitTick+0x64>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_InitTick+0x60>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fd59 	bl	80045be <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f001 fd23 	bl	800456e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x68>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	24000018 	.word	0x24000018
 8002b40:	2400000c 	.word	0x2400000c
 8002b44:	24000014 	.word	0x24000014

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	24000018 	.word	0x24000018
 8002b6c:	240018b4 	.word	0x240018b4

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	240018b4 	.word	0x240018b4

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	24000018 	.word	0x24000018

08002bd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_GetREVID+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	5c001000 	.word	0x5c001000

08002be8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	58000400 	.word	0x58000400

08002c14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3360      	adds	r3, #96	; 0x60
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	611a      	str	r2, [r3, #16]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3360      	adds	r3, #96	; 0x60
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	601a      	str	r2, [r3, #0]
  }
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3330      	adds	r3, #48	; 0x30
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	4413      	add	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	211f      	movs	r1, #31
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 011f 	and.w	r1, r3, #31
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	431a      	orrs	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b087      	sub	sp, #28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3314      	adds	r3, #20
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	0e5b      	lsrs	r3, r3, #25
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	4413      	add	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0d1b      	lsrs	r3, r3, #20
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2107      	movs	r1, #7
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	0d1b      	lsrs	r3, r3, #20
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	431a      	orrs	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0318 	and.w	r3, r3, #24
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e1c:	40d9      	lsrs	r1, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	400b      	ands	r3, r1
 8002e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e26:	431a      	orrs	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	000fffff 	.word	0x000fffff

08002e40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6093      	str	r3, [r2, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	5fffffc0 	.word	0x5fffffc0

08002e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb0:	d101      	bne.n	8002eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	6fffffc0 	.word	0x6fffffc0

08002eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <LL_ADC_Enable+0x24>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	7fffffc0 	.word	0x7fffffc0

08002f3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <LL_ADC_Disable+0x24>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	f043 0202 	orr.w	r2, r3, #2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	7fffffc0 	.word	0x7fffffc0

08002f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <LL_ADC_IsEnabled+0x18>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_ADC_IsEnabled+0x1a>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d101      	bne.n	8002fa2 <LL_ADC_IsDisableOngoing+0x18>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_ADC_IsDisableOngoing+0x1a>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <LL_ADC_REG_StartConversion+0x24>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	f043 0204 	orr.w	r2, r3, #4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	7fffffc0 	.word	0x7fffffc0

08002fd8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <LL_ADC_REG_StopConversion+0x24>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	f043 0210 	orr.w	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	7fffffc0 	.word	0x7fffffc0

08003000 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d101      	bne.n	8003018 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <LL_ADC_INJ_StopConversion+0x24>)
 8003036:	4013      	ands	r3, r2
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	7fffffc0 	.word	0x7fffffc0

08003050 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b08      	cmp	r3, #8
 8003062:	d101      	bne.n	8003068 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e18e      	b.n	80033b0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff f8fb 	bl	800229c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff feef 	bl	8002e9c <LL_ADC_IsDeepPowerDownEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fed5 	bl	8002e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff0a 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d114      	bne.n	8003108 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff feee 	bl	8002ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e8:	4b9a      	ldr	r3, [pc, #616]	; (8003354 <HAL_ADC_Init+0x2dc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	4a9a      	ldr	r2, [pc, #616]	; (8003358 <HAL_ADC_Init+0x2e0>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	3301      	adds	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030fa:	e002      	b.n	8003102 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3b01      	subs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff feed 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10d      	bne.n	8003134 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	f043 0210 	orr.w	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f043 0201 	orr.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff61 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 800313e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	f040 8128 	bne.w	800339e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8124 	bne.w	800339e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800315e:	f043 0202 	orr.w	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fefa 	bl	8002f64 <LL_ADC_IsEnabled>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d136      	bne.n	80031e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a78      	ldr	r2, [pc, #480]	; (800335c <HAL_ADC_Init+0x2e4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_ADC_Init+0x112>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a76      	ldr	r2, [pc, #472]	; (8003360 <HAL_ADC_Init+0x2e8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10e      	bne.n	80031a8 <HAL_ADC_Init+0x130>
 800318a:	4874      	ldr	r0, [pc, #464]	; (800335c <HAL_ADC_Init+0x2e4>)
 800318c:	f7ff feea 	bl	8002f64 <LL_ADC_IsEnabled>
 8003190:	4604      	mov	r4, r0
 8003192:	4873      	ldr	r0, [pc, #460]	; (8003360 <HAL_ADC_Init+0x2e8>)
 8003194:	f7ff fee6 	bl	8002f64 <LL_ADC_IsEnabled>
 8003198:	4603      	mov	r3, r0
 800319a:	4323      	orrs	r3, r4
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e008      	b.n	80031ba <HAL_ADC_Init+0x142>
 80031a8:	486e      	ldr	r0, [pc, #440]	; (8003364 <HAL_ADC_Init+0x2ec>)
 80031aa:	f7ff fedb 	bl	8002f64 <LL_ADC_IsEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d012      	beq.n	80031e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a66      	ldr	r2, [pc, #408]	; (800335c <HAL_ADC_Init+0x2e4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_ADC_Init+0x15a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a64      	ldr	r2, [pc, #400]	; (8003360 <HAL_ADC_Init+0x2e8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Init+0x15e>
 80031d2:	4a65      	ldr	r2, [pc, #404]	; (8003368 <HAL_ADC_Init+0x2f0>)
 80031d4:	e000      	b.n	80031d8 <HAL_ADC_Init+0x160>
 80031d6:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_ADC_Init+0x2f4>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f7ff fd18 	bl	8002c14 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031e4:	f7ff fcf4 	bl	8002bd0 <HAL_GetREVID>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d914      	bls.n	800321c <HAL_ADC_Init+0x1a4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d110      	bne.n	800321c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7d5b      	ldrb	r3, [r3, #21]
 80031fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003204:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800320a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7f1b      	ldrb	r3, [r3, #28]
 8003210:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003212:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003214:	f043 030c 	orr.w	r3, r3, #12
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e00d      	b.n	8003238 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7d5b      	ldrb	r3, [r3, #21]
 8003220:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003226:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800322c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7f1b      	ldrb	r3, [r3, #28]
 8003232:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7f1b      	ldrb	r3, [r3, #28]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d106      	bne.n	800324e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	3b01      	subs	r3, #1
 8003246:	045b      	lsls	r3, r3, #17
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_ADC_Init+0x2f8>)
 8003272:	4013      	ands	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	69b9      	ldr	r1, [r7, #24]
 800327a:	430b      	orrs	r3, r1
 800327c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff febc 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003288:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fede 	bl	8003050 <LL_ADC_INJ_IsConversionOngoing>
 8003294:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d14a      	bne.n	8003332 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d147      	bne.n	8003332 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7d1b      	ldrb	r3, [r3, #20]
 80032a6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_ADC_Init+0x2fc>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d11b      	bne.n	8003306 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_ADC_Init+0x300>)
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032e2:	3a01      	subs	r2, #1
 80032e4:	0411      	lsls	r1, r2, #16
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032f6:	430a      	orrs	r2, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	611a      	str	r2, [r3, #16]
 8003304:	e007      	b.n	8003316 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 ff39 	bl	80041a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d120      	bne.n	800337c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	f023 010f 	bic.w	r1, r3, #15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	1e5a      	subs	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
 8003352:	e01b      	b.n	800338c <HAL_ADC_Init+0x314>
 8003354:	2400000c 	.word	0x2400000c
 8003358:	053e2d63 	.word	0x053e2d63
 800335c:	40022000 	.word	0x40022000
 8003360:	40022100 	.word	0x40022100
 8003364:	58026000 	.word	0x58026000
 8003368:	40022300 	.word	0x40022300
 800336c:	58026300 	.word	0x58026300
 8003370:	fff0c003 	.word	0xfff0c003
 8003374:	ffffbffc 	.word	0xffffbffc
 8003378:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020f 	bic.w	r2, r2, #15
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	f023 0303 	bic.w	r3, r3, #3
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
 800339c:	e007      	b.n	80033ae <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3724      	adds	r7, #36	; 0x24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}

080033b8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5c      	ldr	r2, [pc, #368]	; (8003538 <HAL_ADC_Start+0x180>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d004      	beq.n	80033d4 <HAL_ADC_Start+0x1c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5b      	ldr	r2, [pc, #364]	; (800353c <HAL_ADC_Start+0x184>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_Start+0x20>
 80033d4:	4b5a      	ldr	r3, [pc, #360]	; (8003540 <HAL_ADC_Start+0x188>)
 80033d6:	e000      	b.n	80033da <HAL_ADC_Start+0x22>
 80033d8:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_ADC_Start+0x18c>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fd30 	bl	8002e40 <LL_ADC_GetMultimode>
 80033e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fe0a 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 809a 	bne.w	8003528 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_Start+0x4a>
 80033fe:	2302      	movs	r3, #2
 8003400:	e095      	b.n	800352e <HAL_ADC_Start+0x176>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fde0 	bl	8003fd0 <ADC_Enable>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 8081 	bne.w	800351e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003420:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_ADC_Start+0x190>)
 8003422:	4013      	ands	r3, r2
 8003424:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a42      	ldr	r2, [pc, #264]	; (800353c <HAL_ADC_Start+0x184>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d002      	beq.n	800343c <HAL_ADC_Start+0x84>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e000      	b.n	800343e <HAL_ADC_Start+0x86>
 800343c:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_ADC_Start+0x180>)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4293      	cmp	r3, r2
 8003444:	d002      	beq.n	800344c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003464:	d106      	bne.n	8003474 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f023 0206 	bic.w	r2, r3, #6
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	659a      	str	r2, [r3, #88]	; 0x58
 8003472:	e002      	b.n	800347a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	221c      	movs	r2, #28
 8003480:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_ADC_Start+0x184>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d002      	beq.n	800349a <HAL_ADC_Start+0xe2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e000      	b.n	800349c <HAL_ADC_Start+0xe4>
 800349a:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_ADC_Start+0x180>)
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d008      	beq.n	80034b6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d002      	beq.n	80034b6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b09      	cmp	r3, #9
 80034b4:	d114      	bne.n	80034e0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fd69 	bl	8002fb0 <LL_ADC_REG_StartConversion>
 80034de:	e025      	b.n	800352c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_ADC_Start+0x184>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d002      	beq.n	80034fc <HAL_ADC_Start+0x144>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	e000      	b.n	80034fe <HAL_ADC_Start+0x146>
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_ADC_Start+0x180>)
 80034fe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00f      	beq.n	800352c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003514:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
 800351c:	e006      	b.n	800352c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003526:	e001      	b.n	800352c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003528:	2302      	movs	r3, #2
 800352a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40022000 	.word	0x40022000
 800353c:	40022100 	.word	0x40022100
 8003540:	40022300 	.word	0x40022300
 8003544:	58026300 	.word	0x58026300
 8003548:	fffff0fe 	.word	0xfffff0fe

0800354c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_ADC_Stop+0x16>
 800355e:	2302      	movs	r3, #2
 8003560:	e021      	b.n	80035a6 <HAL_ADC_Stop+0x5a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800356a:	2103      	movs	r1, #3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fc73 	bl	8003e58 <ADC_ConversionStop>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fdb1 	bl	80040e4 <ADC_Disable>
 8003582:	4603      	mov	r3, r0
 8003584:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <HAL_ADC_Stop+0x64>)
 8003592:	4013      	ands	r3, r2
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	ffffeefe 	.word	0xffffeefe

080035b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a72      	ldr	r2, [pc, #456]	; (800378c <HAL_ADC_PollForConversion+0x1d8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_ADC_PollForConversion+0x1e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a70      	ldr	r2, [pc, #448]	; (8003790 <HAL_ADC_PollForConversion+0x1dc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_PollForConversion+0x22>
 80035d2:	4b70      	ldr	r3, [pc, #448]	; (8003794 <HAL_ADC_PollForConversion+0x1e0>)
 80035d4:	e000      	b.n	80035d8 <HAL_ADC_PollForConversion+0x24>
 80035d6:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_ADC_PollForConversion+0x1e4>)
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fc31 	bl	8002e40 <LL_ADC_GetMultimode>
 80035de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d102      	bne.n	80035ee <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80035e8:	2308      	movs	r3, #8
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e037      	b.n	800365e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d002      	beq.n	8003600 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b09      	cmp	r3, #9
 80035fe:	d111      	bne.n	8003624 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0b1      	b.n	8003782 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800361e:	2304      	movs	r3, #4
 8003620:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003622:	e01c      	b.n	800365e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_ADC_PollForConversion+0x1d8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_ADC_PollForConversion+0x84>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a57      	ldr	r2, [pc, #348]	; (8003790 <HAL_ADC_PollForConversion+0x1dc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_ADC_PollForConversion+0x88>
 8003638:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_ADC_PollForConversion+0x1e0>)
 800363a:	e000      	b.n	800363e <HAL_ADC_PollForConversion+0x8a>
 800363c:	4b56      	ldr	r3, [pc, #344]	; (8003798 <HAL_ADC_PollForConversion+0x1e4>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fc0c 	bl	8002e5c <LL_ADC_GetMultiDMATransfer>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e093      	b.n	8003782 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800365a:	2304      	movs	r3, #4
 800365c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800365e:	f7ff fa87 	bl	8002b70 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003664:	e021      	b.n	80036aa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d01d      	beq.n	80036aa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800366e:	f7ff fa7f 	bl	8002b70 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <HAL_ADC_PollForConversion+0xd0>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d112      	bne.n	80036aa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e06b      	b.n	8003782 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0d6      	beq.n	8003666 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fb2b 	bl	8002d24 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01c      	beq.n	800370e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7d5b      	ldrb	r3, [r3, #21]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d118      	bne.n	800370e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d111      	bne.n	800370e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_ADC_PollForConversion+0x1dc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d002      	beq.n	800371e <HAL_ADC_PollForConversion+0x16a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	e000      	b.n	8003720 <HAL_ADC_PollForConversion+0x16c>
 800371e:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_ADC_PollForConversion+0x1d8>)
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	4293      	cmp	r3, r2
 8003726:	d008      	beq.n	800373a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b05      	cmp	r3, #5
 8003732:	d002      	beq.n	800373a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b09      	cmp	r3, #9
 8003738:	d104      	bne.n	8003744 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e00c      	b.n	800375e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HAL_ADC_PollForConversion+0x1dc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d002      	beq.n	8003754 <HAL_ADC_PollForConversion+0x1a0>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	e000      	b.n	8003756 <HAL_ADC_PollForConversion+0x1a2>
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_ADC_PollForConversion+0x1d8>)
 8003756:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d104      	bne.n	800376e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2208      	movs	r2, #8
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e008      	b.n	8003780 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	220c      	movs	r2, #12
 800377e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000
 8003790:	40022100 	.word	0x40022100
 8003794:	40022300 	.word	0x40022300
 8003798:	58026300 	.word	0x58026300

0800379c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b0a1      	sub	sp, #132	; 0x84
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a9d      	ldr	r2, [pc, #628]	; (8003a48 <HAL_ADC_ConfigChannel+0x290>)
 80037d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x2a>
 80037de:	2302      	movs	r3, #2
 80037e0:	e321      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x66e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fc06 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 8306 	bne.w	8003e08 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003804:	2b00      	cmp	r3, #0
 8003806:	d108      	bne.n	800381a <HAL_ADC_ConfigChannel+0x62>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0e9b      	lsrs	r3, r3, #26
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2201      	movs	r2, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	e016      	b.n	8003848 <HAL_ADC_ConfigChannel+0x90>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800382a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800382c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003832:	2320      	movs	r3, #32
 8003834:	e003      	b.n	800383e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2201      	movs	r2, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	69d1      	ldr	r1, [r2, #28]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	430b      	orrs	r3, r1
 8003854:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f7ff fa71 	bl	8002d4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fbc7 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003872:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fbe9 	bl	8003050 <LL_ADC_INJ_IsConversionOngoing>
 800387e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 80b3 	bne.w	80039ee <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 80af 	bne.w	80039ee <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	461a      	mov	r2, r3
 800389e:	f7ff fa80 	bl	8002da2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038a2:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <HAL_ADC_ConfigChannel+0x294>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80038aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ae:	d10b      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x110>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	e01d      	b.n	8003904 <HAL_ADC_ConfigChannel+0x14c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x136>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	e00a      	b.n	8003904 <HAL_ADC_ConfigChannel+0x14c>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d027      	beq.n	800395e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6919      	ldr	r1, [r3, #16]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800391c:	f7ff f9ae 	bl	8002c7c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6919      	ldr	r1, [r3, #16]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	7e5b      	ldrb	r3, [r3, #25]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x17e>
 8003930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003934:	e000      	b.n	8003938 <HAL_ADC_ConfigChannel+0x180>
 8003936:	2300      	movs	r3, #0
 8003938:	461a      	mov	r2, r3
 800393a:	f7ff f9d8 	bl	8002cee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6919      	ldr	r1, [r3, #16]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	7e1b      	ldrb	r3, [r3, #24]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x19c>
 800394e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003952:	e000      	b.n	8003956 <HAL_ADC_ConfigChannel+0x19e>
 8003954:	2300      	movs	r3, #0
 8003956:	461a      	mov	r2, r3
 8003958:	f7ff f9b0 	bl	8002cbc <LL_ADC_SetDataRightShift>
 800395c:	e047      	b.n	80039ee <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	069b      	lsls	r3, r3, #26
 800396e:	429a      	cmp	r2, r3
 8003970:	d107      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003980:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003988:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	069b      	lsls	r3, r3, #26
 8003992:	429a      	cmp	r2, r3
 8003994:	d107      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039a4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	069b      	lsls	r3, r3, #26
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d107      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039c8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	069b      	lsls	r3, r3, #26
 80039da:	429a      	cmp	r2, r3
 80039dc:	d107      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fab6 	bl	8002f64 <LL_ADC_IsEnabled>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 820d 	bne.w	8003e1a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f7ff f9f3 	bl	8002df8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <HAL_ADC_ConfigChannel+0x290>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	f040 8133 	bne.w	8003c84 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d110      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x298>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0e9b      	lsrs	r3, r3, #26
 8003a34:	3301      	adds	r3, #1
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2b09      	cmp	r3, #9
 8003a3c:	bf94      	ite	ls
 8003a3e:	2301      	movls	r3, #1
 8003a40:	2300      	movhi	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	e01e      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x2cc>
 8003a46:	bf00      	nop
 8003a48:	47ff0000 	.word	0x47ff0000
 8003a4c:	5c001000 	.word	0x5c001000
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	bf94      	ite	ls
 8003a7e:	2301      	movls	r3, #1
 8003a80:	2300      	movhi	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d079      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x2ec>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	069b      	lsls	r3, r3, #26
 8003a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa2:	e015      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x318>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e003      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	069b      	lsls	r3, r3, #26
 8003acc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x338>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	e017      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x368>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b00:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x38e>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	3301      	adds	r3, #1
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	051b      	lsls	r3, r3, #20
 8003b44:	e018      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x3c0>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 021f 	and.w	r2, r3, #31
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	e07e      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x3e0>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	069b      	lsls	r3, r3, #26
 8003b92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b96:	e015      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x40c>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	069b      	lsls	r3, r3, #26
 8003bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x42c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	e017      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x45c>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	61bb      	str	r3, [r7, #24]
  return result;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e003      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	ea42 0103 	orr.w	r1, r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x488>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	3b1e      	subs	r3, #30
 8003c38:	051b      	lsls	r3, r3, #20
 8003c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	e01b      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x4c0>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	60fb      	str	r3, [r7, #12]
  return result;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e003      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	f003 021f 	and.w	r2, r3, #31
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	3b1e      	subs	r3, #30
 8003c72:	051b      	lsls	r3, r3, #20
 8003c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f7ff f88f 	bl	8002da2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f280 80c6 	bge.w	8003e1a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a67      	ldr	r2, [pc, #412]	; (8003e30 <HAL_ADC_ConfigChannel+0x678>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_ADC_ConfigChannel+0x4ea>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a65      	ldr	r2, [pc, #404]	; (8003e34 <HAL_ADC_ConfigChannel+0x67c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x4ee>
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_ADC_ConfigChannel+0x680>)
 8003ca4:	e000      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x4f0>
 8003ca6:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_ADC_ConfigChannel+0x684>)
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe ffd9 	bl	8002c60 <LL_ADC_GetCommonPathInternalCh>
 8003cae:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5e      	ldr	r2, [pc, #376]	; (8003e30 <HAL_ADC_ConfigChannel+0x678>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x50c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a5d      	ldr	r2, [pc, #372]	; (8003e34 <HAL_ADC_ConfigChannel+0x67c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x52a>
 8003cc4:	485a      	ldr	r0, [pc, #360]	; (8003e30 <HAL_ADC_ConfigChannel+0x678>)
 8003cc6:	f7ff f94d 	bl	8002f64 <LL_ADC_IsEnabled>
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4859      	ldr	r0, [pc, #356]	; (8003e34 <HAL_ADC_ConfigChannel+0x67c>)
 8003cce:	f7ff f949 	bl	8002f64 <LL_ADC_IsEnabled>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4323      	orrs	r3, r4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e008      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x53c>
 8003ce2:	4857      	ldr	r0, [pc, #348]	; (8003e40 <HAL_ADC_ConfigChannel+0x688>)
 8003ce4:	f7ff f93e 	bl	8002f64 <LL_ADC_IsEnabled>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d07d      	beq.n	8003df4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a51      	ldr	r2, [pc, #324]	; (8003e44 <HAL_ADC_ConfigChannel+0x68c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d130      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x5ac>
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d12b      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a4b      	ldr	r2, [pc, #300]	; (8003e40 <HAL_ADC_ConfigChannel+0x688>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	f040 8081 	bne.w	8003e1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a44      	ldr	r2, [pc, #272]	; (8003e30 <HAL_ADC_ConfigChannel+0x678>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x574>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a43      	ldr	r2, [pc, #268]	; (8003e34 <HAL_ADC_ConfigChannel+0x67c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x578>
 8003d2c:	4a42      	ldr	r2, [pc, #264]	; (8003e38 <HAL_ADC_ConfigChannel+0x680>)
 8003d2e:	e000      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x57a>
 8003d30:	4a42      	ldr	r2, [pc, #264]	; (8003e3c <HAL_ADC_ConfigChannel+0x684>)
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7fe ff7d 	bl	8002c3a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d40:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_ADC_ConfigChannel+0x690>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <HAL_ADC_ConfigChannel+0x694>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	3301      	adds	r3, #1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d54:	e002      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f9      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d62:	e05a      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a39      	ldr	r2, [pc, #228]	; (8003e50 <HAL_ADC_ConfigChannel+0x698>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d11e      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x5f4>
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d119      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <HAL_ADC_ConfigChannel+0x688>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d14b      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <HAL_ADC_ConfigChannel+0x678>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_ADC_ConfigChannel+0x5de>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <HAL_ADC_ConfigChannel+0x67c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x5e2>
 8003d96:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <HAL_ADC_ConfigChannel+0x680>)
 8003d98:	e000      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x5e4>
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_ADC_ConfigChannel+0x684>)
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7fe ff48 	bl	8002c3a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003daa:	e036      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <HAL_ADC_ConfigChannel+0x69c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d131      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d12c      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_ADC_ConfigChannel+0x688>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d127      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <HAL_ADC_ConfigChannel+0x678>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_ADC_ConfigChannel+0x626>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_ADC_ConfigChannel+0x67c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x62a>
 8003dde:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_ADC_ConfigChannel+0x680>)
 8003de0:	e000      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x62c>
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_ADC_ConfigChannel+0x684>)
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fe ff24 	bl	8002c3a <LL_ADC_SetCommonPathInternalCh>
 8003df2:	e012      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e06:	e008      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3784      	adds	r7, #132	; 0x84
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd90      	pop	{r4, r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40022000 	.word	0x40022000
 8003e34:	40022100 	.word	0x40022100
 8003e38:	40022300 	.word	0x40022300
 8003e3c:	58026300 	.word	0x58026300
 8003e40:	58026000 	.word	0x58026000
 8003e44:	cb840000 	.word	0xcb840000
 8003e48:	2400000c 	.word	0x2400000c
 8003e4c:	053e2d63 	.word	0x053e2d63
 8003e50:	c7520000 	.word	0xc7520000
 8003e54:	cfb80000 	.word	0xcfb80000

08003e58 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff f8c6 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003e74:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff f8e8 	bl	8003050 <LL_ADC_INJ_IsConversionOngoing>
 8003e80:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8098 	beq.w	8003fc0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02a      	beq.n	8003ef4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7d5b      	ldrb	r3, [r3, #21]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d126      	bne.n	8003ef4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7d1b      	ldrb	r3, [r3, #20]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d122      	bne.n	8003ef4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003eb2:	e014      	b.n	8003ede <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4a45      	ldr	r2, [pc, #276]	; (8003fcc <ADC_ConversionStop+0x174>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d90d      	bls.n	8003ed8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f043 0210 	orr.w	r2, r3, #16
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e074      	b.n	8003fc2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3301      	adds	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d1e3      	bne.n	8003eb4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2240      	movs	r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d014      	beq.n	8003f24 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff f87e 	bl	8003000 <LL_ADC_REG_IsConversionOngoing>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00c      	beq.n	8003f24 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f83b 	bl	8002f8a <LL_ADC_IsDisableOngoing>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f85a 	bl	8002fd8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d014      	beq.n	8003f54 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f88e 	bl	8003050 <LL_ADC_INJ_IsConversionOngoing>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff f823 	bl	8002f8a <LL_ADC_IsDisableOngoing>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff f86a 	bl	8003028 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d005      	beq.n	8003f66 <ADC_ConversionStop+0x10e>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d105      	bne.n	8003f6c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003f60:	230c      	movs	r3, #12
 8003f62:	617b      	str	r3, [r7, #20]
        break;
 8003f64:	e005      	b.n	8003f72 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003f66:	2308      	movs	r3, #8
 8003f68:	617b      	str	r3, [r7, #20]
        break;
 8003f6a:	e002      	b.n	8003f72 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	617b      	str	r3, [r7, #20]
        break;
 8003f70:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f72:	f7fe fdfd 	bl	8002b70 <HAL_GetTick>
 8003f76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f78:	e01b      	b.n	8003fb2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f7a:	f7fe fdf9 	bl	8002b70 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d914      	bls.n	8003fb2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 0210 	orr.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	f043 0201 	orr.w	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e007      	b.n	8003fc2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1dc      	bne.n	8003f7a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	000cdbff 	.word	0x000cdbff

08003fd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe ffc1 	bl	8002f64 <LL_ADC_IsEnabled>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d16e      	bne.n	80040c6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <ADC_Enable+0x100>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0210 	orr.w	r2, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e05a      	b.n	80040c8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe ff7c 	bl	8002f14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800401c:	f7fe fda8 	bl	8002b70 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <ADC_Enable+0x104>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <ADC_Enable+0x66>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <ADC_Enable+0x108>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d101      	bne.n	800403a <ADC_Enable+0x6a>
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <ADC_Enable+0x10c>)
 8004038:	e000      	b.n	800403c <ADC_Enable+0x6c>
 800403a:	4b29      	ldr	r3, [pc, #164]	; (80040e0 <ADC_Enable+0x110>)
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe feff 	bl	8002e40 <LL_ADC_GetMultimode>
 8004042:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <ADC_Enable+0x108>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d002      	beq.n	8004054 <ADC_Enable+0x84>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	e000      	b.n	8004056 <ADC_Enable+0x86>
 8004054:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <ADC_Enable+0x104>)
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	4293      	cmp	r3, r2
 800405c:	d02c      	beq.n	80040b8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d130      	bne.n	80040c6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004064:	e028      	b.n	80040b8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe ff7a 	bl	8002f64 <LL_ADC_IsEnabled>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ff4a 	bl	8002f14 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004080:	f7fe fd76 	bl	8002b70 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d914      	bls.n	80040b8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d00d      	beq.n	80040b8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f043 0210 	orr.w	r2, r3, #16
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e007      	b.n	80040c8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d1cf      	bne.n	8004066 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	8000003f 	.word	0x8000003f
 80040d4:	40022000 	.word	0x40022000
 80040d8:	40022100 	.word	0x40022100
 80040dc:	40022300 	.word	0x40022300
 80040e0:	58026300 	.word	0x58026300

080040e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe ff4a 	bl	8002f8a <LL_ADC_IsDisableOngoing>
 80040f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe ff31 	bl	8002f64 <LL_ADC_IsEnabled>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d047      	beq.n	8004198 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d144      	bne.n	8004198 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030d 	and.w	r3, r3, #13
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10c      	bne.n	8004136 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe ff0b 	bl	8002f3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2203      	movs	r2, #3
 800412c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800412e:	f7fe fd1f 	bl	8002b70 <HAL_GetTick>
 8004132:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004134:	e029      	b.n	800418a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0210 	orr.w	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f043 0201 	orr.w	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e023      	b.n	800419a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004152:	f7fe fd0d 	bl	8002b70 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d914      	bls.n	800418a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f043 0210 	orr.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e007      	b.n	800419a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1dc      	bne.n	8004152 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a79      	ldr	r2, [pc, #484]	; (8004398 <ADC_ConfigureBoostMode+0x1f4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <ADC_ConfigureBoostMode+0x1c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a78      	ldr	r2, [pc, #480]	; (800439c <ADC_ConfigureBoostMode+0x1f8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d109      	bne.n	80041d4 <ADC_ConfigureBoostMode+0x30>
 80041c0:	4b77      	ldr	r3, [pc, #476]	; (80043a0 <ADC_ConfigureBoostMode+0x1fc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e008      	b.n	80041e6 <ADC_ConfigureBoostMode+0x42>
 80041d4:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <ADC_ConfigureBoostMode+0x200>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01c      	beq.n	8004224 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80041ea:	f002 f953 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80041ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041f8:	d010      	beq.n	800421c <ADC_ConfigureBoostMode+0x78>
 80041fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041fe:	d871      	bhi.n	80042e4 <ADC_ConfigureBoostMode+0x140>
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d002      	beq.n	800420c <ADC_ConfigureBoostMode+0x68>
 8004206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420a:	d16b      	bne.n	80042e4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	60fb      	str	r3, [r7, #12]
        break;
 800421a:	e066      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	60fb      	str	r3, [r7, #12]
        break;
 8004222:	e062      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004224:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004228:	f003 f8d0 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 800422c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004236:	d051      	beq.n	80042dc <ADC_ConfigureBoostMode+0x138>
 8004238:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800423c:	d854      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 800423e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004242:	d047      	beq.n	80042d4 <ADC_ConfigureBoostMode+0x130>
 8004244:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004248:	d84e      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 800424a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800424e:	d03d      	beq.n	80042cc <ADC_ConfigureBoostMode+0x128>
 8004250:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004254:	d848      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 8004256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425a:	d033      	beq.n	80042c4 <ADC_ConfigureBoostMode+0x120>
 800425c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004260:	d842      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 8004262:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004266:	d029      	beq.n	80042bc <ADC_ConfigureBoostMode+0x118>
 8004268:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800426c:	d83c      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 800426e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004272:	d01a      	beq.n	80042aa <ADC_ConfigureBoostMode+0x106>
 8004274:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004278:	d836      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 800427a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800427e:	d014      	beq.n	80042aa <ADC_ConfigureBoostMode+0x106>
 8004280:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004284:	d830      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 8004286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800428a:	d00e      	beq.n	80042aa <ADC_ConfigureBoostMode+0x106>
 800428c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004290:	d82a      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 8004292:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004296:	d008      	beq.n	80042aa <ADC_ConfigureBoostMode+0x106>
 8004298:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800429c:	d824      	bhi.n	80042e8 <ADC_ConfigureBoostMode+0x144>
 800429e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042a2:	d002      	beq.n	80042aa <ADC_ConfigureBoostMode+0x106>
 80042a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042a8:	d11e      	bne.n	80042e8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	60fb      	str	r3, [r7, #12]
        break;
 80042ba:	e016      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]
        break;
 80042c2:	e012      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	60fb      	str	r3, [r7, #12]
        break;
 80042ca:	e00e      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	60fb      	str	r3, [r7, #12]
        break;
 80042d2:	e00a      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	09db      	lsrs	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
        break;
 80042da:	e006      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	60fb      	str	r3, [r7, #12]
        break;
 80042e2:	e002      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80042e8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80042ea:	f7fe fc71 	bl	8002bd0 <HAL_GetREVID>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d815      	bhi.n	8004324 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <ADC_ConfigureBoostMode+0x204>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d908      	bls.n	8004312 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004310:	e03e      	b.n	8004390 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004320:	609a      	str	r2, [r3, #8]
}
 8004322:	e035      	b.n	8004390 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <ADC_ConfigureBoostMode+0x208>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d808      	bhi.n	8004344 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004340:	609a      	str	r2, [r3, #8]
}
 8004342:	e025      	b.n	8004390 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a1a      	ldr	r2, [pc, #104]	; (80043b0 <ADC_ConfigureBoostMode+0x20c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d80a      	bhi.n	8004362 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	e016      	b.n	8004390 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <ADC_ConfigureBoostMode+0x210>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d80a      	bhi.n	8004380 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	e007      	b.n	8004390 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40022000 	.word	0x40022000
 800439c:	40022100 	.word	0x40022100
 80043a0:	40022300 	.word	0x40022300
 80043a4:	58026300 	.word	0x58026300
 80043a8:	01312d00 	.word	0x01312d00
 80043ac:	005f5e10 	.word	0x005f5e10
 80043b0:	00bebc20 	.word	0x00bebc20
 80043b4:	017d7840 	.word	0x017d7840

080043b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <__NVIC_SetPriorityGrouping+0x40>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043d4:	4013      	ands	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <__NVIC_SetPriorityGrouping+0x44>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043e6:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <__NVIC_SetPriorityGrouping+0x40>)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	60d3      	str	r3, [r2, #12]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	e000ed00 	.word	0xe000ed00
 80043fc:	05fa0000 	.word	0x05fa0000

08004400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <__NVIC_GetPriorityGrouping+0x18>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	f003 0307 	and.w	r3, r3, #7
}
 800440e:	4618      	mov	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	db0b      	blt.n	8004446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	4907      	ldr	r1, [pc, #28]	; (8004454 <__NVIC_EnableIRQ+0x38>)
 8004436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2001      	movs	r0, #1
 800443e:	fa00 f202 	lsl.w	r2, r0, r2
 8004442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000e100 	.word	0xe000e100

08004458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	db0a      	blt.n	8004482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	490c      	ldr	r1, [pc, #48]	; (80044a4 <__NVIC_SetPriority+0x4c>)
 8004472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004476:	0112      	lsls	r2, r2, #4
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	440b      	add	r3, r1
 800447c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004480:	e00a      	b.n	8004498 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	4908      	ldr	r1, [pc, #32]	; (80044a8 <__NVIC_SetPriority+0x50>)
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	3b04      	subs	r3, #4
 8004490:	0112      	lsls	r2, r2, #4
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	440b      	add	r3, r1
 8004496:	761a      	strb	r2, [r3, #24]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000e100 	.word	0xe000e100
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f1c3 0307 	rsb	r3, r3, #7
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	bf28      	it	cs
 80044ca:	2304      	movcs	r3, #4
 80044cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d902      	bls.n	80044dc <NVIC_EncodePriority+0x30>
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3b03      	subs	r3, #3
 80044da:	e000      	b.n	80044de <NVIC_EncodePriority+0x32>
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	401a      	ands	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f4:	f04f 31ff 	mov.w	r1, #4294967295
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	43d9      	mvns	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	4313      	orrs	r3, r2
         );
}
 8004506:	4618      	mov	r0, r3
 8004508:	3724      	adds	r7, #36	; 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004524:	d301      	bcc.n	800452a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004526:	2301      	movs	r3, #1
 8004528:	e00f      	b.n	800454a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <SysTick_Config+0x40>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3b01      	subs	r3, #1
 8004530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004532:	210f      	movs	r1, #15
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	f7ff ff8e 	bl	8004458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <SysTick_Config+0x40>)
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004542:	4b04      	ldr	r3, [pc, #16]	; (8004554 <SysTick_Config+0x40>)
 8004544:	2207      	movs	r2, #7
 8004546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e000e010 	.word	0xe000e010

08004558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff29 	bl	80043b8 <__NVIC_SetPriorityGrouping>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800457c:	f7ff ff40 	bl	8004400 <__NVIC_GetPriorityGrouping>
 8004580:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff90 	bl	80044ac <NVIC_EncodePriority>
 800458c:	4602      	mov	r2, r0
 800458e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff5f 	bl	8004458 <__NVIC_SetPriority>
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ff33 	bl	800441c <__NVIC_EnableIRQ>
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ffa4 	bl	8004514 <SysTick_Config>
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	; 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045e6:	4b89      	ldr	r3, [pc, #548]	; (800480c <HAL_GPIO_Init+0x234>)
 80045e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ea:	e194      	b.n	8004916 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8186 	beq.w	8004910 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d005      	beq.n	800461c <HAL_GPIO_Init+0x44>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d130      	bne.n	800467e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004652:	2201      	movs	r2, #1
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0201 	and.w	r2, r3, #1
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d017      	beq.n	80046ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d123      	bne.n	800470e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	08da      	lsrs	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3208      	adds	r2, #8
 80046ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	220f      	movs	r2, #15
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	69b9      	ldr	r1, [r7, #24]
 800470a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2203      	movs	r2, #3
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80e0 	beq.w	8004910 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <HAL_GPIO_Init+0x238>)
 8004752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004756:	4a2e      	ldr	r2, [pc, #184]	; (8004810 <HAL_GPIO_Init+0x238>)
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004760:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <HAL_GPIO_Init+0x238>)
 8004762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476e:	4a29      	ldr	r2, [pc, #164]	; (8004814 <HAL_GPIO_Init+0x23c>)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	3302      	adds	r3, #2
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	220f      	movs	r2, #15
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_GPIO_Init+0x240>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d052      	beq.n	8004840 <HAL_GPIO_Init+0x268>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <HAL_GPIO_Init+0x244>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d031      	beq.n	8004806 <HAL_GPIO_Init+0x22e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <HAL_GPIO_Init+0x248>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02b      	beq.n	8004802 <HAL_GPIO_Init+0x22a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_GPIO_Init+0x24c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d025      	beq.n	80047fe <HAL_GPIO_Init+0x226>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_GPIO_Init+0x250>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01f      	beq.n	80047fa <HAL_GPIO_Init+0x222>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_GPIO_Init+0x254>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d019      	beq.n	80047f6 <HAL_GPIO_Init+0x21e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <HAL_GPIO_Init+0x258>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_GPIO_Init+0x21a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <HAL_GPIO_Init+0x25c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00d      	beq.n	80047ee <HAL_GPIO_Init+0x216>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_GPIO_Init+0x260>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <HAL_GPIO_Init+0x212>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_GPIO_Init+0x264>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_GPIO_Init+0x20e>
 80047e2:	2309      	movs	r3, #9
 80047e4:	e02d      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 80047e6:	230a      	movs	r3, #10
 80047e8:	e02b      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 80047ea:	2308      	movs	r3, #8
 80047ec:	e029      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 80047ee:	2307      	movs	r3, #7
 80047f0:	e027      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 80047f2:	2306      	movs	r3, #6
 80047f4:	e025      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 80047f6:	2305      	movs	r3, #5
 80047f8:	e023      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 80047fa:	2304      	movs	r3, #4
 80047fc:	e021      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 80047fe:	2303      	movs	r3, #3
 8004800:	e01f      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 8004802:	2302      	movs	r3, #2
 8004804:	e01d      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 8004806:	2301      	movs	r3, #1
 8004808:	e01b      	b.n	8004842 <HAL_GPIO_Init+0x26a>
 800480a:	bf00      	nop
 800480c:	58000080 	.word	0x58000080
 8004810:	58024400 	.word	0x58024400
 8004814:	58000400 	.word	0x58000400
 8004818:	58020000 	.word	0x58020000
 800481c:	58020400 	.word	0x58020400
 8004820:	58020800 	.word	0x58020800
 8004824:	58020c00 	.word	0x58020c00
 8004828:	58021000 	.word	0x58021000
 800482c:	58021400 	.word	0x58021400
 8004830:	58021800 	.word	0x58021800
 8004834:	58021c00 	.word	0x58021c00
 8004838:	58022000 	.word	0x58022000
 800483c:	58022400 	.word	0x58022400
 8004840:	2300      	movs	r3, #0
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	f002 0203 	and.w	r2, r2, #3
 8004848:	0092      	lsls	r2, r2, #2
 800484a:	4093      	lsls	r3, r2
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004852:	4938      	ldr	r1, [pc, #224]	; (8004934 <HAL_GPIO_Init+0x35c>)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	3302      	adds	r3, #2
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	3301      	adds	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f ae63 	bne.w	80045ec <HAL_GPIO_Init+0x14>
  }
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	3724      	adds	r7, #36	; 0x24
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	58000400 	.word	0x58000400

08004938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	887b      	ldrh	r3, [r7, #2]
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
 8004954:	e001      	b.n	800495a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	807b      	strh	r3, [r7, #2]
 8004974:	4613      	mov	r3, r2
 8004976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004978:	787b      	ldrb	r3, [r7, #1]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800497e:	887a      	ldrh	r2, [r7, #2]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004984:	e003      	b.n	800498e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	041a      	lsls	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	619a      	str	r2, [r3, #24]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07f      	b.n	8004aae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd fce6 	bl	8002394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d107      	bne.n	8004a16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e006      	b.n	8004a24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d104      	bne.n	8004a36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_I2C_Init+0x11c>)
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	02008000 	.word	0x02008000

08004abc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	817b      	strh	r3, [r7, #10]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	813b      	strh	r3, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	f040 80f9 	bne.w	8004cd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_I2C_Mem_Write+0x34>
 8004aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0ed      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_I2C_Mem_Write+0x4e>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e0e6      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b12:	f7fe f82d 	bl	8002b70 <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	2319      	movs	r3, #25
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f955 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0d1      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2221      	movs	r2, #33	; 0x21
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b5c:	88f8      	ldrh	r0, [r7, #6]
 8004b5e:	893a      	ldrh	r2, [r7, #8]
 8004b60:	8979      	ldrh	r1, [r7, #10]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f8b9 	bl	8004ce4 <I2C_RequestMemoryWrite>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0a9      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2bff      	cmp	r3, #255	; 0xff
 8004b8c:	d90e      	bls.n	8004bac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	22ff      	movs	r2, #255	; 0xff
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	8979      	ldrh	r1, [r7, #10]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fabd 	bl	8005124 <I2C_TransferConfig>
 8004baa:	e00f      	b.n	8004bcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	8979      	ldrh	r1, [r7, #10]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 faac 	bl	8005124 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f93f 	bl	8004e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e07b      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d034      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x1c8>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d130      	bne.n	8004c84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2180      	movs	r1, #128	; 0x80
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f8d1 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e04d      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2bff      	cmp	r3, #255	; 0xff
 8004c44:	d90e      	bls.n	8004c64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	8979      	ldrh	r1, [r7, #10]
 8004c54:	2300      	movs	r3, #0
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fa61 	bl	8005124 <I2C_TransferConfig>
 8004c62:	e00f      	b.n	8004c84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	8979      	ldrh	r1, [r7, #10]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fa50 	bl	8005124 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d19e      	bne.n	8004bcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f91e 	bl	8004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e01a      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_I2C_Mem_Write+0x224>)
 8004cb6:	400b      	ands	r3, r1
 8004cb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e000      	b.n	8004cd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
  }
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	fe00e800 	.word	0xfe00e800

08004ce4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	817b      	strh	r3, [r7, #10]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	813b      	strh	r3, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	8979      	ldrh	r1, [r7, #10]
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <I2C_RequestMemoryWrite+0xa4>)
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fa09 	bl	8005124 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	69b9      	ldr	r1, [r7, #24]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f89c 	bl	8004e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e02c      	b.n	8004d80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d105      	bne.n	8004d38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2c:	893b      	ldrh	r3, [r7, #8]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
 8004d36:	e015      	b.n	8004d64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d38:	893b      	ldrh	r3, [r7, #8]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f882 	bl	8004e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e012      	b.n	8004d80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d5a:	893b      	ldrh	r3, [r7, #8]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f830 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	80002000 	.word	0x80002000

08004d8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d103      	bne.n	8004daa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2200      	movs	r2, #0
 8004da8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d007      	beq.n	8004dc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	619a      	str	r2, [r3, #24]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de4:	e022      	b.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d01e      	beq.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fd febf 	bl	8002b70 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d113      	bne.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e00f      	b.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d0cd      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e60:	e02c      	b.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f870 	bl	8004f4c <I2C_IsErrorOccurred>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e02a      	b.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d01e      	beq.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7e:	f7fd fe77 	bl	8002b70 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d113      	bne.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d1cb      	bne.n	8004e62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee0:	e028      	b.n	8004f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f830 	bl	8004f4c <I2C_IsErrorOccurred>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e026      	b.n	8004f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fd fe3b 	bl	8002b70 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d113      	bne.n	8004f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e007      	b.n	8004f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d1cf      	bne.n	8004ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d075      	beq.n	8005064 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f80:	e056      	b.n	8005030 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d052      	beq.n	8005030 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f8a:	f7fd fdf1 	bl	8002b70 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <I2C_IsErrorOccurred+0x54>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d147      	bne.n	8005030 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004faa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc2:	d12e      	bne.n	8005022 <I2C_IsErrorOccurred+0xd6>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fca:	d02a      	beq.n	8005022 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d027      	beq.n	8005022 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004fe2:	f7fd fdc5 	bl	8002b70 <HAL_GetTick>
 8004fe6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fe8:	e01b      	b.n	8005022 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fea:	f7fd fdc1 	bl	8002b70 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b19      	cmp	r3, #25
 8004ff6:	d914      	bls.n	8005022 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	f043 0220 	orr.w	r2, r3, #32
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b20      	cmp	r3, #32
 800502e:	d1dc      	bne.n	8004fea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b20      	cmp	r3, #32
 800503c:	d003      	beq.n	8005046 <I2C_IsErrorOccurred+0xfa>
 800503e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005042:	2b00      	cmp	r3, #0
 8005044:	d09d      	beq.n	8004f82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2220      	movs	r2, #32
 8005054:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f043 0304 	orr.w	r3, r3, #4
 800505c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005086:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	f043 0308 	orr.w	r3, r3, #8
 800509e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80050d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01c      	beq.n	8005114 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff fe56 	bl	8004d8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <I2C_IsErrorOccurred+0x1d4>)
 80050ec:	400b      	ands	r3, r1
 80050ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	; 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	fe00e800 	.word	0xfe00e800

08005124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	607b      	str	r3, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	817b      	strh	r3, [r7, #10]
 8005132:	4613      	mov	r3, r2
 8005134:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005136:	897b      	ldrh	r3, [r7, #10]
 8005138:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800513c:	7a7b      	ldrb	r3, [r7, #9]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005144:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	4313      	orrs	r3, r2
 800514e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005152:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	0d5b      	lsrs	r3, r3, #21
 800515e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <I2C_TransferConfig+0x60>)
 8005164:	430b      	orrs	r3, r1
 8005166:	43db      	mvns	r3, r3
 8005168:	ea02 0103 	and.w	r1, r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	03ff63ff 	.word	0x03ff63ff

08005188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b20      	cmp	r3, #32
 800519c:	d138      	bne.n	8005210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e032      	b.n	8005212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2224      	movs	r2, #36	; 0x24
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	e000      	b.n	8005212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b20      	cmp	r3, #32
 8005232:	d139      	bne.n	80052a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800523e:	2302      	movs	r3, #2
 8005240:	e033      	b.n	80052aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e000      	b.n	80052aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
  }
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b8:	b08f      	sub	sp, #60	; 0x3c
 80052ba:	af0a      	add	r7, sp, #40	; 0x28
 80052bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e116      	b.n	80054f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fd fa1e 	bl	8002724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2203      	movs	r2, #3
 80052ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f005 ffba 	bl	800b280 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	687e      	ldr	r6, [r7, #4]
 8005314:	466d      	mov	r5, sp
 8005316:	f106 0410 	add.w	r4, r6, #16
 800531a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800531c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800531e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005326:	e885 0003 	stmia.w	r5, {r0, r1}
 800532a:	1d33      	adds	r3, r6, #4
 800532c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800532e:	6838      	ldr	r0, [r7, #0]
 8005330:	f005 ff38 	bl	800b1a4 <USB_CoreInit>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e0d7      	b.n	80054f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f005 ffa8 	bl	800b2a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
 8005356:	e04a      	b.n	80053ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	333d      	adds	r3, #61	; 0x3d
 8005368:	2201      	movs	r2, #1
 800536a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800536c:	7bfa      	ldrb	r2, [r7, #15]
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	333c      	adds	r3, #60	; 0x3c
 800537c:	7bfa      	ldrb	r2, [r7, #15]
 800537e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	b298      	uxth	r0, r3
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	3342      	adds	r3, #66	; 0x42
 8005394:	4602      	mov	r2, r0
 8005396:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	333f      	adds	r3, #63	; 0x3f
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3344      	adds	r3, #68	; 0x44
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	3348      	adds	r3, #72	; 0x48
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053d4:	7bfa      	ldrb	r2, [r7, #15]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	3350      	adds	r3, #80	; 0x50
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	3301      	adds	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
 80053ee:	7bfa      	ldrb	r2, [r7, #15]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d3af      	bcc.n	8005358 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
 80053fc:	e044      	b.n	8005488 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005456:	7bfa      	ldrb	r2, [r7, #15]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	3301      	adds	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	7bfa      	ldrb	r2, [r7, #15]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d3b5      	bcc.n	80053fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	687e      	ldr	r6, [r7, #4]
 800549a:	466d      	mov	r5, sp
 800549c:	f106 0410 	add.w	r4, r6, #16
 80054a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80054b0:	1d33      	adds	r3, r6, #4
 80054b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054b4:	6838      	ldr	r0, [r7, #0]
 80054b6:	f005 ff41 	bl	800b33c <USB_DevInit>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e014      	b.n	80054f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d102      	bne.n	80054ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f80b 	bl	8005500 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f006 f8fb 	bl	800b6ea <USB_DevDisconnect>

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005500 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_PCDEx_ActivateLPM+0x44>)
 8005530:	4313      	orrs	r3, r2
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	10000003 	.word	0x10000003

08005548 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_PWREx_ConfigSupply+0x70>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b04      	cmp	r3, #4
 800555a:	d00a      	beq.n	8005572 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800555c:	4b16      	ldr	r3, [pc, #88]	; (80055b8 <HAL_PWREx_ConfigSupply+0x70>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d001      	beq.n	800556e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e01f      	b.n	80055ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e01d      	b.n	80055ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <HAL_PWREx_ConfigSupply+0x70>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f023 0207 	bic.w	r2, r3, #7
 800557a:	490f      	ldr	r1, [pc, #60]	; (80055b8 <HAL_PWREx_ConfigSupply+0x70>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4313      	orrs	r3, r2
 8005580:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005582:	f7fd faf5 	bl	8002b70 <HAL_GetTick>
 8005586:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005588:	e009      	b.n	800559e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800558a:	f7fd faf1 	bl	8002b70 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005598:	d901      	bls.n	800559e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e007      	b.n	80055ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_PWREx_ConfigSupply+0x70>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	d1ee      	bne.n	800558a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	58024800 	.word	0x58024800

080055bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	60d3      	str	r3, [r2, #12]
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	58024800 	.word	0x58024800

080055dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	; 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f000 bc1c 	b.w	8005e28 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8087 	beq.w	800570c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fe:	4b9e      	ldr	r3, [pc, #632]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005608:	4b9b      	ldr	r3, [pc, #620]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b10      	cmp	r3, #16
 8005612:	d007      	beq.n	8005624 <HAL_RCC_OscConfig+0x48>
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	2b18      	cmp	r3, #24
 8005618:	d110      	bne.n	800563c <HAL_RCC_OscConfig+0x60>
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d10b      	bne.n	800563c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005624:	4b94      	ldr	r3, [pc, #592]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d06c      	beq.n	800570a <HAL_RCC_OscConfig+0x12e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d168      	bne.n	800570a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e3f5      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005644:	d106      	bne.n	8005654 <HAL_RCC_OscConfig+0x78>
 8005646:	4b8c      	ldr	r3, [pc, #560]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a8b      	ldr	r2, [pc, #556]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e02e      	b.n	80056b2 <HAL_RCC_OscConfig+0xd6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10c      	bne.n	8005676 <HAL_RCC_OscConfig+0x9a>
 800565c:	4b86      	ldr	r3, [pc, #536]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a85      	ldr	r2, [pc, #532]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	4b83      	ldr	r3, [pc, #524]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a82      	ldr	r2, [pc, #520]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800566e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	e01d      	b.n	80056b2 <HAL_RCC_OscConfig+0xd6>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567e:	d10c      	bne.n	800569a <HAL_RCC_OscConfig+0xbe>
 8005680:	4b7d      	ldr	r3, [pc, #500]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a7c      	ldr	r2, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b7a      	ldr	r3, [pc, #488]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a79      	ldr	r2, [pc, #484]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e00b      	b.n	80056b2 <HAL_RCC_OscConfig+0xd6>
 800569a:	4b77      	ldr	r3, [pc, #476]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a76      	ldr	r2, [pc, #472]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b74      	ldr	r3, [pc, #464]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a73      	ldr	r2, [pc, #460]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80056ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d013      	beq.n	80056e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fd fa59 	bl	8002b70 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c2:	f7fd fa55 	bl	8002b70 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b64      	cmp	r3, #100	; 0x64
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e3a9      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056d4:	4b68      	ldr	r3, [pc, #416]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0xe6>
 80056e0:	e014      	b.n	800570c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fd fa45 	bl	8002b70 <HAL_GetTick>
 80056e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ea:	f7fd fa41 	bl	8002b70 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b64      	cmp	r3, #100	; 0x64
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e395      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056fc:	4b5e      	ldr	r3, [pc, #376]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f0      	bne.n	80056ea <HAL_RCC_OscConfig+0x10e>
 8005708:	e000      	b.n	800570c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80ca 	beq.w	80058ae <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571a:	4b57      	ldr	r3, [pc, #348]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005722:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005724:	4b54      	ldr	r3, [pc, #336]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_RCC_OscConfig+0x164>
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	2b18      	cmp	r3, #24
 8005734:	d156      	bne.n	80057e4 <HAL_RCC_OscConfig+0x208>
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d151      	bne.n	80057e4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005740:	4b4d      	ldr	r3, [pc, #308]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCC_OscConfig+0x17c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e367      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005758:	4b47      	ldr	r3, [pc, #284]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 0219 	bic.w	r2, r3, #25
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4944      	ldr	r1, [pc, #272]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800576a:	f7fd fa01 	bl	8002b70 <HAL_GetTick>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005772:	f7fd f9fd 	bl	8002b70 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e351      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005784:	4b3c      	ldr	r3, [pc, #240]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005790:	f7fd fa1e 	bl	8002bd0 <HAL_GetREVID>
 8005794:	4603      	mov	r3, r0
 8005796:	f241 0203 	movw	r2, #4099	; 0x1003
 800579a:	4293      	cmp	r3, r2
 800579c:	d817      	bhi.n	80057ce <HAL_RCC_OscConfig+0x1f2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d108      	bne.n	80057b8 <HAL_RCC_OscConfig+0x1dc>
 80057a6:	4b34      	ldr	r3, [pc, #208]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057ae:	4a32      	ldr	r2, [pc, #200]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b6:	e07a      	b.n	80058ae <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b8:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	492c      	ldr	r1, [pc, #176]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057cc:	e06f      	b.n	80058ae <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	061b      	lsls	r3, r3, #24
 80057dc:	4926      	ldr	r1, [pc, #152]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e2:	e064      	b.n	80058ae <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d047      	beq.n	800587c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057ec:	4b22      	ldr	r3, [pc, #136]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 0219 	bic.w	r2, r3, #25
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	491f      	ldr	r1, [pc, #124]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fd f9b7 	bl	8002b70 <HAL_GetTick>
 8005802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005806:	f7fd f9b3 	bl	8002b70 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e307      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005818:	4b17      	ldr	r3, [pc, #92]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005824:	f7fd f9d4 	bl	8002bd0 <HAL_GetREVID>
 8005828:	4603      	mov	r3, r0
 800582a:	f241 0203 	movw	r2, #4099	; 0x1003
 800582e:	4293      	cmp	r3, r2
 8005830:	d817      	bhi.n	8005862 <HAL_RCC_OscConfig+0x286>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d108      	bne.n	800584c <HAL_RCC_OscConfig+0x270>
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005842:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005848:	6053      	str	r3, [r2, #4]
 800584a:	e030      	b.n	80058ae <HAL_RCC_OscConfig+0x2d2>
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	031b      	lsls	r3, r3, #12
 800585a:	4907      	ldr	r1, [pc, #28]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	604b      	str	r3, [r1, #4]
 8005860:	e025      	b.n	80058ae <HAL_RCC_OscConfig+0x2d2>
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	4901      	ldr	r1, [pc, #4]	; (8005878 <HAL_RCC_OscConfig+0x29c>)
 8005872:	4313      	orrs	r3, r2
 8005874:	604b      	str	r3, [r1, #4]
 8005876:	e01a      	b.n	80058ae <HAL_RCC_OscConfig+0x2d2>
 8005878:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800587c:	4b9e      	ldr	r3, [pc, #632]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a9d      	ldr	r2, [pc, #628]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fd f972 	bl	8002b70 <HAL_GetTick>
 800588c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005890:	f7fd f96e 	bl	8002b70 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e2c2      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058a2:	4b95      	ldr	r3, [pc, #596]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80a9 	beq.w	8005a0e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058bc:	4b8e      	ldr	r3, [pc, #568]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058c6:	4b8c      	ldr	r3, [pc, #560]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d007      	beq.n	80058e2 <HAL_RCC_OscConfig+0x306>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b18      	cmp	r3, #24
 80058d6:	d13a      	bne.n	800594e <HAL_RCC_OscConfig+0x372>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d135      	bne.n	800594e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058e2:	4b85      	ldr	r3, [pc, #532]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_RCC_OscConfig+0x31e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d001      	beq.n	80058fa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e296      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058fa:	f7fd f969 	bl	8002bd0 <HAL_GetREVID>
 80058fe:	4603      	mov	r3, r0
 8005900:	f241 0203 	movw	r2, #4099	; 0x1003
 8005904:	4293      	cmp	r3, r2
 8005906:	d817      	bhi.n	8005938 <HAL_RCC_OscConfig+0x35c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	2b20      	cmp	r3, #32
 800590e:	d108      	bne.n	8005922 <HAL_RCC_OscConfig+0x346>
 8005910:	4b79      	ldr	r3, [pc, #484]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005918:	4a77      	ldr	r2, [pc, #476]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 800591a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800591e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005920:	e075      	b.n	8005a0e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005922:	4b75      	ldr	r3, [pc, #468]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	069b      	lsls	r3, r3, #26
 8005930:	4971      	ldr	r1, [pc, #452]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005936:	e06a      	b.n	8005a0e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005938:	4b6f      	ldr	r3, [pc, #444]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	496c      	ldr	r1, [pc, #432]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800594c:	e05f      	b.n	8005a0e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d042      	beq.n	80059dc <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005956:	4b68      	ldr	r3, [pc, #416]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a67      	ldr	r2, [pc, #412]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 800595c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd f905 	bl	8002b70 <HAL_GetTick>
 8005966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800596a:	f7fd f901 	bl	8002b70 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e255      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800597c:	4b5e      	ldr	r3, [pc, #376]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005988:	f7fd f922 	bl	8002bd0 <HAL_GetREVID>
 800598c:	4603      	mov	r3, r0
 800598e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005992:	4293      	cmp	r3, r2
 8005994:	d817      	bhi.n	80059c6 <HAL_RCC_OscConfig+0x3ea>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	2b20      	cmp	r3, #32
 800599c:	d108      	bne.n	80059b0 <HAL_RCC_OscConfig+0x3d4>
 800599e:	4b56      	ldr	r3, [pc, #344]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80059a6:	4a54      	ldr	r2, [pc, #336]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ac:	6053      	str	r3, [r2, #4]
 80059ae:	e02e      	b.n	8005a0e <HAL_RCC_OscConfig+0x432>
 80059b0:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	069b      	lsls	r3, r3, #26
 80059be:	494e      	ldr	r1, [pc, #312]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
 80059c4:	e023      	b.n	8005a0e <HAL_RCC_OscConfig+0x432>
 80059c6:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	4948      	ldr	r1, [pc, #288]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60cb      	str	r3, [r1, #12]
 80059da:	e018      	b.n	8005a0e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059dc:	4b46      	ldr	r3, [pc, #280]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a45      	ldr	r2, [pc, #276]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 80059e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fd f8c2 	bl	8002b70 <HAL_GetTick>
 80059ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059f0:	f7fd f8be 	bl	8002b70 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e212      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a02:	4b3d      	ldr	r3, [pc, #244]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d036      	beq.n	8005a88 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d019      	beq.n	8005a56 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a22:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a26:	4a34      	ldr	r2, [pc, #208]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2e:	f7fd f89f 	bl	8002b70 <HAL_GetTick>
 8005a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a36:	f7fd f89b 	bl	8002b70 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e1ef      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a48:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x45a>
 8005a54:	e018      	b.n	8005a88 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a56:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5a:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a62:	f7fd f885 	bl	8002b70 <HAL_GetTick>
 8005a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a6a:	f7fd f881 	bl	8002b70 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e1d5      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d039      	beq.n	8005b08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d019      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a9c:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005aa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005aa8:	f7fd f862 	bl	8002b70 <HAL_GetTick>
 8005aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ab0:	f7fd f85e 	bl	8002b70 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e1b2      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x4d4>
 8005ace:	e01b      	b.n	8005b08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <HAL_RCC_OscConfig+0x51c>)
 8005ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005adc:	f7fd f848 	bl	8002b70 <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ae2:	e00b      	b.n	8005afc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ae4:	f7fd f844 	bl	8002b70 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d904      	bls.n	8005afc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e198      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005afc:	4ba3      	ldr	r3, [pc, #652]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ed      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8081 	beq.w	8005c18 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b16:	4b9e      	ldr	r3, [pc, #632]	; (8005d90 <HAL_RCC_OscConfig+0x7b4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a9d      	ldr	r2, [pc, #628]	; (8005d90 <HAL_RCC_OscConfig+0x7b4>)
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b22:	f7fd f825 	bl	8002b70 <HAL_GetTick>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b2a:	f7fd f821 	bl	8002b70 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b64      	cmp	r3, #100	; 0x64
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e175      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3c:	4b94      	ldr	r3, [pc, #592]	; (8005d90 <HAL_RCC_OscConfig+0x7b4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCC_OscConfig+0x582>
 8005b50:	4b8e      	ldr	r3, [pc, #568]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	4a8d      	ldr	r2, [pc, #564]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5c:	e02d      	b.n	8005bba <HAL_RCC_OscConfig+0x5de>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x5a4>
 8005b66:	4b89      	ldr	r3, [pc, #548]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	4a88      	ldr	r2, [pc, #544]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	6713      	str	r3, [r2, #112]	; 0x70
 8005b72:	4b86      	ldr	r3, [pc, #536]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	4a85      	ldr	r2, [pc, #532]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b78:	f023 0304 	bic.w	r3, r3, #4
 8005b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7e:	e01c      	b.n	8005bba <HAL_RCC_OscConfig+0x5de>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b05      	cmp	r3, #5
 8005b86:	d10c      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x5c6>
 8005b88:	4b80      	ldr	r3, [pc, #512]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	4a7f      	ldr	r2, [pc, #508]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b8e:	f043 0304 	orr.w	r3, r3, #4
 8005b92:	6713      	str	r3, [r2, #112]	; 0x70
 8005b94:	4b7d      	ldr	r3, [pc, #500]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	4a7c      	ldr	r2, [pc, #496]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba0:	e00b      	b.n	8005bba <HAL_RCC_OscConfig+0x5de>
 8005ba2:	4b7a      	ldr	r3, [pc, #488]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	4a79      	ldr	r2, [pc, #484]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	6713      	str	r3, [r2, #112]	; 0x70
 8005bae:	4b77      	ldr	r3, [pc, #476]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	4a76      	ldr	r2, [pc, #472]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005bb4:	f023 0304 	bic.w	r3, r3, #4
 8005bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d015      	beq.n	8005bee <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc2:	f7fc ffd5 	bl	8002b70 <HAL_GetTick>
 8005bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bc8:	e00a      	b.n	8005be0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bca:	f7fc ffd1 	bl	8002b70 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e123      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005be0:	4b6a      	ldr	r3, [pc, #424]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0ee      	beq.n	8005bca <HAL_RCC_OscConfig+0x5ee>
 8005bec:	e014      	b.n	8005c18 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bee:	f7fc ffbf 	bl	8002b70 <HAL_GetTick>
 8005bf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bf4:	e00a      	b.n	8005c0c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf6:	f7fc ffbb 	bl	8002b70 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e10d      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c0c:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ee      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8102 	beq.w	8005e26 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c22:	4b5a      	ldr	r3, [pc, #360]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c2a:	2b18      	cmp	r3, #24
 8005c2c:	f000 80bd 	beq.w	8005daa <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f040 8095 	bne.w	8005d64 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3a:	4b54      	ldr	r3, [pc, #336]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a53      	ldr	r2, [pc, #332]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fc ff93 	bl	8002b70 <HAL_GetTick>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fc ff8f 	bl	8002b70 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e0e3      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c60:	4b4a      	ldr	r3, [pc, #296]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f0      	bne.n	8005c4e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c6c:	4b47      	ldr	r3, [pc, #284]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c70:	4b48      	ldr	r3, [pc, #288]	; (8005d94 <HAL_RCC_OscConfig+0x7b8>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c7c:	0112      	lsls	r2, r2, #4
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	4942      	ldr	r1, [pc, #264]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	628b      	str	r3, [r1, #40]	; 0x28
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	3b01      	subs	r3, #1
 8005c96:	025b      	lsls	r3, r3, #9
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	041b      	lsls	r3, r3, #16
 8005ca4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	061b      	lsls	r3, r3, #24
 8005cb2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cb6:	4935      	ldr	r1, [pc, #212]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005cbc:	4b33      	ldr	r3, [pc, #204]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a32      	ldr	r2, [pc, #200]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005cc8:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ccc:	4b32      	ldr	r3, [pc, #200]	; (8005d98 <HAL_RCC_OscConfig+0x7bc>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cd4:	00d2      	lsls	r2, r2, #3
 8005cd6:	492d      	ldr	r1, [pc, #180]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	f023 020c 	bic.w	r2, r3, #12
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	4928      	ldr	r1, [pc, #160]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005cee:	4b27      	ldr	r3, [pc, #156]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	f023 0202 	bic.w	r2, r3, #2
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	4924      	ldr	r1, [pc, #144]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d00:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d0c:	4b1f      	ldr	r3, [pc, #124]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	4a1e      	ldr	r2, [pc, #120]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d18:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005d24:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d30:	4b16      	ldr	r3, [pc, #88]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fc ff18 	bl	8002b70 <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fc ff14 	bl	8002b70 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e068      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x768>
 8005d62:	e060      	b.n	8005e26 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <HAL_RCC_OscConfig+0x7b0>)
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fc fefe 	bl	8002b70 <HAL_GetTick>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d76:	e011      	b.n	8005d9c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d78:	f7fc fefa 	bl	8002b70 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d90a      	bls.n	8005d9c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e04e      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
 8005d8a:	bf00      	nop
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	58024800 	.word	0x58024800
 8005d94:	fffffc0c 	.word	0xfffffc0c
 8005d98:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d9c:	4b24      	ldr	r3, [pc, #144]	; (8005e30 <HAL_RCC_OscConfig+0x854>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e7      	bne.n	8005d78 <HAL_RCC_OscConfig+0x79c>
 8005da8:	e03d      	b.n	8005e26 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005daa:	4b21      	ldr	r3, [pc, #132]	; (8005e30 <HAL_RCC_OscConfig+0x854>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005db0:	4b1f      	ldr	r3, [pc, #124]	; (8005e30 <HAL_RCC_OscConfig+0x854>)
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d031      	beq.n	8005e22 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f003 0203 	and.w	r2, r3, #3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d12a      	bne.n	8005e22 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d122      	bne.n	8005e22 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d11a      	bne.n	8005e22 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	0a5b      	lsrs	r3, r3, #9
 8005df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d111      	bne.n	8005e22 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d108      	bne.n	8005e22 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	0e1b      	lsrs	r3, r3, #24
 8005e14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d001      	beq.n	8005e26 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3730      	adds	r7, #48	; 0x30
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	58024400 	.word	0x58024400

08005e34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e19c      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e48:	4b8a      	ldr	r3, [pc, #552]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d910      	bls.n	8005e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b87      	ldr	r3, [pc, #540]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f023 020f 	bic.w	r2, r3, #15
 8005e5e:	4985      	ldr	r1, [pc, #532]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e66:	4b83      	ldr	r3, [pc, #524]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d001      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e184      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d010      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	4b7b      	ldr	r3, [pc, #492]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d908      	bls.n	8005ea6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e94:	4b78      	ldr	r3, [pc, #480]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	4975      	ldr	r1, [pc, #468]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d010      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	4b70      	ldr	r3, [pc, #448]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d908      	bls.n	8005ed4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ec2:	4b6d      	ldr	r3, [pc, #436]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	496a      	ldr	r1, [pc, #424]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699a      	ldr	r2, [r3, #24]
 8005ee4:	4b64      	ldr	r3, [pc, #400]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d908      	bls.n	8005f02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ef0:	4b61      	ldr	r3, [pc, #388]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	495e      	ldr	r1, [pc, #376]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d010      	beq.n	8005f30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	4b59      	ldr	r3, [pc, #356]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d908      	bls.n	8005f30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f1e:	4b56      	ldr	r3, [pc, #344]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	4953      	ldr	r1, [pc, #332]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	4b4d      	ldr	r3, [pc, #308]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d908      	bls.n	8005f5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4c:	4b4a      	ldr	r3, [pc, #296]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f023 020f 	bic.w	r2, r3, #15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4947      	ldr	r1, [pc, #284]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d055      	beq.n	8006016 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f6a:	4b43      	ldr	r3, [pc, #268]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4940      	ldr	r1, [pc, #256]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d107      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f84:	4b3c      	ldr	r3, [pc, #240]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d121      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0f6      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d107      	bne.n	8005fac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f9c:	4b36      	ldr	r3, [pc, #216]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d115      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0ea      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d107      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fb4:	4b30      	ldr	r3, [pc, #192]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d109      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0de      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0d6      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fd4:	4b28      	ldr	r3, [pc, #160]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f023 0207 	bic.w	r2, r3, #7
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4925      	ldr	r1, [pc, #148]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe6:	f7fc fdc3 	bl	8002b70 <HAL_GetTick>
 8005fea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fec:	e00a      	b.n	8006004 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fee:	f7fc fdbf 	bl	8002b70 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e0be      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006004:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	429a      	cmp	r2, r3
 8006014:	d1eb      	bne.n	8005fee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d010      	beq.n	8006044 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	429a      	cmp	r2, r3
 8006030:	d208      	bcs.n	8006044 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006032:	4b11      	ldr	r3, [pc, #68]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f023 020f 	bic.w	r2, r3, #15
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	490e      	ldr	r1, [pc, #56]	; (8006078 <HAL_RCC_ClockConfig+0x244>)
 8006040:	4313      	orrs	r3, r2
 8006042:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d214      	bcs.n	800607c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 020f 	bic.w	r2, r3, #15
 800605a:	4906      	ldr	r1, [pc, #24]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	4313      	orrs	r3, r2
 8006060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b04      	ldr	r3, [pc, #16]	; (8006074 <HAL_RCC_ClockConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d005      	beq.n	800607c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e086      	b.n	8006182 <HAL_RCC_ClockConfig+0x34e>
 8006074:	52002000 	.word	0x52002000
 8006078:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d010      	beq.n	80060aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	4b3f      	ldr	r3, [pc, #252]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006094:	429a      	cmp	r2, r3
 8006096:	d208      	bcs.n	80060aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006098:	4b3c      	ldr	r3, [pc, #240]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	4939      	ldr	r1, [pc, #228]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d010      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	4b34      	ldr	r3, [pc, #208]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d208      	bcs.n	80060d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060c6:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	492e      	ldr	r1, [pc, #184]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	4b28      	ldr	r3, [pc, #160]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d208      	bcs.n	8006106 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	4922      	ldr	r1, [pc, #136]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 8006102:	4313      	orrs	r3, r2
 8006104:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d010      	beq.n	8006134 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800611e:	429a      	cmp	r2, r3
 8006120:	d208      	bcs.n	8006134 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006122:	4b1a      	ldr	r3, [pc, #104]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	4917      	ldr	r1, [pc, #92]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 8006130:	4313      	orrs	r3, r2
 8006132:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006134:	f000 f834 	bl	80061a0 <HAL_RCC_GetSysClockFreq>
 8006138:	4602      	mov	r2, r0
 800613a:	4b14      	ldr	r3, [pc, #80]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	4912      	ldr	r1, [pc, #72]	; (8006190 <HAL_RCC_ClockConfig+0x35c>)
 8006146:	5ccb      	ldrb	r3, [r1, r3]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006152:	4b0e      	ldr	r3, [pc, #56]	; (800618c <HAL_RCC_ClockConfig+0x358>)
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	4a0d      	ldr	r2, [pc, #52]	; (8006190 <HAL_RCC_ClockConfig+0x35c>)
 800615c:	5cd3      	ldrb	r3, [r2, r3]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
 8006168:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <HAL_RCC_ClockConfig+0x360>)
 800616a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800616c:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <HAL_RCC_ClockConfig+0x364>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <HAL_RCC_ClockConfig+0x368>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f7fc fcb0 	bl	8002adc <HAL_InitTick>
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
 8006190:	0800c958 	.word	0x0800c958
 8006194:	24000010 	.word	0x24000010
 8006198:	2400000c 	.word	0x2400000c
 800619c:	24000014 	.word	0x24000014

080061a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b089      	sub	sp, #36	; 0x24
 80061a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a6:	4bb3      	ldr	r3, [pc, #716]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ae:	2b18      	cmp	r3, #24
 80061b0:	f200 8155 	bhi.w	800645e <HAL_RCC_GetSysClockFreq+0x2be>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	08006221 	.word	0x08006221
 80061c0:	0800645f 	.word	0x0800645f
 80061c4:	0800645f 	.word	0x0800645f
 80061c8:	0800645f 	.word	0x0800645f
 80061cc:	0800645f 	.word	0x0800645f
 80061d0:	0800645f 	.word	0x0800645f
 80061d4:	0800645f 	.word	0x0800645f
 80061d8:	0800645f 	.word	0x0800645f
 80061dc:	08006247 	.word	0x08006247
 80061e0:	0800645f 	.word	0x0800645f
 80061e4:	0800645f 	.word	0x0800645f
 80061e8:	0800645f 	.word	0x0800645f
 80061ec:	0800645f 	.word	0x0800645f
 80061f0:	0800645f 	.word	0x0800645f
 80061f4:	0800645f 	.word	0x0800645f
 80061f8:	0800645f 	.word	0x0800645f
 80061fc:	0800624d 	.word	0x0800624d
 8006200:	0800645f 	.word	0x0800645f
 8006204:	0800645f 	.word	0x0800645f
 8006208:	0800645f 	.word	0x0800645f
 800620c:	0800645f 	.word	0x0800645f
 8006210:	0800645f 	.word	0x0800645f
 8006214:	0800645f 	.word	0x0800645f
 8006218:	0800645f 	.word	0x0800645f
 800621c:	08006253 	.word	0x08006253
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006220:	4b94      	ldr	r3, [pc, #592]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800622c:	4b91      	ldr	r3, [pc, #580]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	4a90      	ldr	r2, [pc, #576]	; (8006478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
 800623c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800623e:	e111      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006240:	4b8d      	ldr	r3, [pc, #564]	; (8006478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006242:	61bb      	str	r3, [r7, #24]
    break;
 8006244:	e10e      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006246:	4b8d      	ldr	r3, [pc, #564]	; (800647c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006248:	61bb      	str	r3, [r7, #24]
    break;
 800624a:	e10b      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800624c:	4b8c      	ldr	r3, [pc, #560]	; (8006480 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800624e:	61bb      	str	r3, [r7, #24]
    break;
 8006250:	e108      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006252:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800625c:	4b85      	ldr	r3, [pc, #532]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006266:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006268:	4b82      	ldr	r3, [pc, #520]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006272:	4b80      	ldr	r3, [pc, #512]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	08db      	lsrs	r3, r3, #3
 8006278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80e1 	beq.w	8006458 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b02      	cmp	r3, #2
 800629a:	f000 8083 	beq.w	80063a4 <HAL_RCC_GetSysClockFreq+0x204>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	f200 80a1 	bhi.w	80063e8 <HAL_RCC_GetSysClockFreq+0x248>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0x114>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d056      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x1c0>
 80062b2:	e099      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b4:	4b6f      	ldr	r3, [pc, #444]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d02d      	beq.n	800631c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062c0:	4b6c      	ldr	r3, [pc, #432]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	08db      	lsrs	r3, r3, #3
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	4a6b      	ldr	r2, [pc, #428]	; (8006478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
 80062d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ea:	4b62      	ldr	r3, [pc, #392]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80062fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800630e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800631a:	e087      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006488 <HAL_RCC_GetSysClockFreq+0x2e8>
 800632a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632e:	4b51      	ldr	r3, [pc, #324]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006342:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800635e:	e065      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800648c <HAL_RCC_GetSysClockFreq+0x2ec>
 800636e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006372:	4b40      	ldr	r3, [pc, #256]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006382:	ed97 6a02 	vldr	s12, [r7, #8]
 8006386:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006484 <HAL_RCC_GetSysClockFreq+0x2e4>
 800638a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a2:	e043      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006490 <HAL_RCC_GetSysClockFreq+0x2f0>
 80063b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b6:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006484 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e6:	e021      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800648c <HAL_RCC_GetSysClockFreq+0x2ec>
 80063f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fa:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640a:	ed97 6a02 	vldr	s12, [r7, #8]
 800640e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800641e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800642a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800642c:	4b11      	ldr	r3, [pc, #68]	; (8006474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	0a5b      	lsrs	r3, r3, #9
 8006432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006436:	3301      	adds	r3, #1
 8006438:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006444:	edd7 6a07 	vldr	s13, [r7, #28]
 8006448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006450:	ee17 3a90 	vmov	r3, s15
 8006454:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006456:	e005      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	61bb      	str	r3, [r7, #24]
    break;
 800645c:	e002      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800645e:	4b07      	ldr	r3, [pc, #28]	; (800647c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006460:	61bb      	str	r3, [r7, #24]
    break;
 8006462:	bf00      	nop
  }

  return sysclockfreq;
 8006464:	69bb      	ldr	r3, [r7, #24]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3724      	adds	r7, #36	; 0x24
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	58024400 	.word	0x58024400
 8006478:	03d09000 	.word	0x03d09000
 800647c:	003d0900 	.word	0x003d0900
 8006480:	007a1200 	.word	0x007a1200
 8006484:	46000000 	.word	0x46000000
 8006488:	4c742400 	.word	0x4c742400
 800648c:	4a742400 	.word	0x4a742400
 8006490:	4af42400 	.word	0x4af42400

08006494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800649a:	f7ff fe81 	bl	80061a0 <HAL_RCC_GetSysClockFreq>
 800649e:	4602      	mov	r2, r0
 80064a0:	4b10      	ldr	r3, [pc, #64]	; (80064e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	490f      	ldr	r1, [pc, #60]	; (80064e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80064ac:	5ccb      	ldrb	r3, [r1, r3]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	fa22 f303 	lsr.w	r3, r2, r3
 80064b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80064c2:	5cd3      	ldrb	r3, [r2, r3]
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	4a07      	ldr	r2, [pc, #28]	; (80064ec <HAL_RCC_GetHCLKFreq+0x58>)
 80064d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064d2:	4a07      	ldr	r2, [pc, #28]	; (80064f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80064d8:	4b04      	ldr	r3, [pc, #16]	; (80064ec <HAL_RCC_GetHCLKFreq+0x58>)
 80064da:	681b      	ldr	r3, [r3, #0]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	58024400 	.word	0x58024400
 80064e8:	0800c958 	.word	0x0800c958
 80064ec:	24000010 	.word	0x24000010
 80064f0:	2400000c 	.word	0x2400000c

080064f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064f8:	f7ff ffcc 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	091b      	lsrs	r3, r3, #4
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	4904      	ldr	r1, [pc, #16]	; (800651c <HAL_RCC_GetPCLK1Freq+0x28>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006514:	4618      	mov	r0, r3
 8006516:	bd80      	pop	{r7, pc}
 8006518:	58024400 	.word	0x58024400
 800651c:	0800c958 	.word	0x0800c958

08006520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006524:	f7ff ffb6 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 8006528:	4602      	mov	r2, r0
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	4904      	ldr	r1, [pc, #16]	; (8006548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006536:	5ccb      	ldrb	r3, [r1, r3]
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006540:	4618      	mov	r0, r3
 8006542:	bd80      	pop	{r7, pc}
 8006544:	58024400 	.word	0x58024400
 8006548:	0800c958 	.word	0x0800c958

0800654c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006554:	2300      	movs	r3, #0
 8006556:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006558:	2300      	movs	r3, #0
 800655a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d03f      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800656c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006570:	d02a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006576:	d824      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800657c:	d018      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800657e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006582:	d81e      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658c:	d007      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800658e:	e018      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006590:	4bab      	ldr	r3, [pc, #684]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	4aaa      	ldr	r2, [pc, #680]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800659c:	e015      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3304      	adds	r3, #4
 80065a2:	2102      	movs	r1, #2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fff3 	bl	8008590 <RCCEx_PLL2_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065ae:	e00c      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3324      	adds	r3, #36	; 0x24
 80065b4:	2102      	movs	r1, #2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f002 f89c 	bl	80086f4 <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	75fb      	strb	r3, [r7, #23]
      break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80065c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065d0:	4b9b      	ldr	r3, [pc, #620]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065dc:	4998      	ldr	r1, [pc, #608]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	650b      	str	r3, [r1, #80]	; 0x50
 80065e2:	e001      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d03d      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d826      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80065fc:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80065fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006602:	bf00      	nop
 8006604:	08006619 	.word	0x08006619
 8006608:	08006627 	.word	0x08006627
 800660c:	08006639 	.word	0x08006639
 8006610:	08006651 	.word	0x08006651
 8006614:	08006651 	.word	0x08006651
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006618:	4b89      	ldr	r3, [pc, #548]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a88      	ldr	r2, [pc, #544]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800661e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006624:	e015      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3304      	adds	r3, #4
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f001 ffaf 	bl	8008590 <RCCEx_PLL2_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006636:	e00c      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3324      	adds	r3, #36	; 0x24
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f002 f858 	bl	80086f4 <RCCEx_PLL3_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006648:	e003      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
      break;
 800664e:	e000      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006658:	4b79      	ldr	r3, [pc, #484]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	f023 0207 	bic.w	r2, r3, #7
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	4976      	ldr	r1, [pc, #472]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006666:	4313      	orrs	r3, r2
 8006668:	650b      	str	r3, [r1, #80]	; 0x50
 800666a:	e001      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006678:	2b00      	cmp	r3, #0
 800667a:	d042      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006684:	d02b      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668a:	d825      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800668c:	2bc0      	cmp	r3, #192	; 0xc0
 800668e:	d028      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006690:	2bc0      	cmp	r3, #192	; 0xc0
 8006692:	d821      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006694:	2b80      	cmp	r3, #128	; 0x80
 8006696:	d016      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006698:	2b80      	cmp	r3, #128	; 0x80
 800669a:	d81d      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d007      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80066a4:	e018      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a6:	4b66      	ldr	r3, [pc, #408]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	4a65      	ldr	r2, [pc, #404]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066b2:	e017      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 ff68 	bl	8008590 <RCCEx_PLL2_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066c4:	e00e      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3324      	adds	r3, #36	; 0x24
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f002 f811 	bl	80086f4 <RCCEx_PLL3_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066d6:	e005      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
      break;
 80066dc:	e002      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066de:	bf00      	nop
 80066e0:	e000      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80066ea:	4b55      	ldr	r3, [pc, #340]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f6:	4952      	ldr	r1, [pc, #328]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	650b      	str	r3, [r1, #80]	; 0x50
 80066fc:	e001      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670a:	2b00      	cmp	r3, #0
 800670c:	d049      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006714:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006718:	d030      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800671a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800671e:	d82a      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006720:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006724:	d02c      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006726:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800672a:	d824      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800672c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006730:	d018      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006736:	d81e      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800673c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006740:	d007      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006742:	e018      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800674a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006750:	e017      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	2100      	movs	r1, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f001 ff19 	bl	8008590 <RCCEx_PLL2_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006762:	e00e      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3324      	adds	r3, #36	; 0x24
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f001 ffc2 	bl	80086f4 <RCCEx_PLL3_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006774:	e005      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	75fb      	strb	r3, [r7, #23]
      break;
 800677a:	e002      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006788:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800678a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006796:	492a      	ldr	r1, [pc, #168]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006798:	4313      	orrs	r3, r2
 800679a:	658b      	str	r3, [r1, #88]	; 0x58
 800679c:	e001      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d04c      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067b8:	d030      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80067ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067be:	d82a      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067c4:	d02c      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067ca:	d824      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067d0:	d018      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80067d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067d6:	d81e      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067e0:	d007      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067e2:	e018      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e4:	4b16      	ldr	r3, [pc, #88]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	4a15      	ldr	r2, [pc, #84]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067f0:	e017      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3304      	adds	r3, #4
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 fec9 	bl	8008590 <RCCEx_PLL2_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006802:	e00e      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3324      	adds	r3, #36	; 0x24
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f001 ff72 	bl	80086f4 <RCCEx_PLL3_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006814:	e005      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
      break;
 800681a:	e002      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800681c:	bf00      	nop
 800681e:	e000      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10d      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800682a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006836:	4902      	ldr	r1, [pc, #8]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006838:	4313      	orrs	r3, r2
 800683a:	658b      	str	r3, [r1, #88]	; 0x58
 800683c:	e004      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800683e:	bf00      	nop
 8006840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d032      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006858:	2b30      	cmp	r3, #48	; 0x30
 800685a:	d01c      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800685c:	2b30      	cmp	r3, #48	; 0x30
 800685e:	d817      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006860:	2b20      	cmp	r3, #32
 8006862:	d00c      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006864:	2b20      	cmp	r3, #32
 8006866:	d813      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d016      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800686c:	2b10      	cmp	r3, #16
 800686e:	d10f      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006870:	4baf      	ldr	r3, [pc, #700]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	4aae      	ldr	r2, [pc, #696]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800687c:	e00e      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fe83 	bl	8008590 <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800688e:	e005      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]
      break;
 8006894:	e002      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800689a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068a2:	4ba3      	ldr	r3, [pc, #652]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	49a0      	ldr	r1, [pc, #640]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068b4:	e001      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d047      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ce:	d030      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80068d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d4:	d82a      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068da:	d02c      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80068dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068e0:	d824      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e6:	d018      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80068e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ec:	d81e      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f6:	d007      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80068f8:	e018      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fa:	4b8d      	ldr	r3, [pc, #564]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	4a8c      	ldr	r2, [pc, #560]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006904:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006906:	e017      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3304      	adds	r3, #4
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f001 fe3e 	bl	8008590 <RCCEx_PLL2_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006918:	e00e      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3324      	adds	r3, #36	; 0x24
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fee7 	bl	80086f4 <RCCEx_PLL3_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800692a:	e005      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	75fb      	strb	r3, [r7, #23]
      break;
 8006930:	e002      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006932:	bf00      	nop
 8006934:	e000      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800693e:	4b7c      	ldr	r3, [pc, #496]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006942:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694a:	4979      	ldr	r1, [pc, #484]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800694c:	4313      	orrs	r3, r2
 800694e:	650b      	str	r3, [r1, #80]	; 0x50
 8006950:	e001      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d049      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800696a:	d02e      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800696c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006970:	d828      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006972:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006976:	d02a      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800697c:	d822      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800697e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006982:	d026      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006988:	d81c      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800698a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800698e:	d010      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006994:	d816      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d01d      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800699a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699e:	d111      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	2101      	movs	r1, #1
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 fdf2 	bl	8008590 <RCCEx_PLL2_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069b0:	e012      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3324      	adds	r3, #36	; 0x24
 80069b6:	2101      	movs	r1, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 fe9b 	bl	80086f4 <RCCEx_PLL3_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069c2:	e009      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e006      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069ca:	bf00      	nop
 80069cc:	e004      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069ce:	bf00      	nop
 80069d0:	e002      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069d2:	bf00      	nop
 80069d4:	e000      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80069d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069de:	4b54      	ldr	r3, [pc, #336]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ea:	4951      	ldr	r1, [pc, #324]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	650b      	str	r3, [r1, #80]	; 0x50
 80069f0:	e001      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d04b      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a0c:	d02e      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a12:	d828      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a18:	d02a      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1e:	d822      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a24:	d026      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006a26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a2a:	d81c      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a30:	d010      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a36:	d816      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01d      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a40:	d111      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3304      	adds	r3, #4
 8006a46:	2101      	movs	r1, #1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fda1 	bl	8008590 <RCCEx_PLL2_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a52:	e012      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3324      	adds	r3, #36	; 0x24
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fe4a 	bl	80086f4 <RCCEx_PLL3_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a64:	e009      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6a:	e006      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a80:	4b2b      	ldr	r3, [pc, #172]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a8e:	4928      	ldr	r1, [pc, #160]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	658b      	str	r3, [r1, #88]	; 0x58
 8006a94:	e001      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d02f      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aae:	d00e      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d814      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d015      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006abe:	d10f      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac0:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4a1a      	ldr	r2, [pc, #104]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006acc:	e00c      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fd5b 	bl	8008590 <RCCEx_PLL2_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ade:	e003      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afa:	490d      	ldr	r1, [pc, #52]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	650b      	str	r3, [r1, #80]	; 0x50
 8006b00:	e001      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d033      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d81c      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b5b 	.word	0x08006b5b
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b43 	.word	0x08006b43
 8006b2c:	08006b5b 	.word	0x08006b5b
 8006b30:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b34:	4bb8      	ldr	r3, [pc, #736]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4ab7      	ldr	r2, [pc, #732]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b40:	e00c      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3304      	adds	r3, #4
 8006b46:	2102      	movs	r1, #2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fd21 	bl	8008590 <RCCEx_PLL2_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b52:	e003      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
      break;
 8006b58:	e000      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b62:	4bad      	ldr	r3, [pc, #692]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b66:	f023 0203 	bic.w	r2, r3, #3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	49aa      	ldr	r1, [pc, #680]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b74:	e001      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8086 	beq.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b88:	4ba4      	ldr	r3, [pc, #656]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4aa3      	ldr	r2, [pc, #652]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b94:	f7fb ffec 	bl	8002b70 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b9a:	e009      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b9c:	f7fb ffe8 	bl	8002b70 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b64      	cmp	r3, #100	; 0x64
 8006ba8:	d902      	bls.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	75fb      	strb	r3, [r7, #23]
        break;
 8006bae:	e005      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb0:	4b9a      	ldr	r3, [pc, #616]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0ef      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d166      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bc2:	4b95      	ldr	r3, [pc, #596]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bcc:	4053      	eors	r3, r2
 8006bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d013      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bd6:	4b90      	ldr	r3, [pc, #576]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bde:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006be0:	4b8d      	ldr	r3, [pc, #564]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	4a8c      	ldr	r2, [pc, #560]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bec:	4b8a      	ldr	r3, [pc, #552]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a89      	ldr	r2, [pc, #548]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bf8:	4a87      	ldr	r2, [pc, #540]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c08:	d115      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0a:	f7fb ffb1 	bl	8002b70 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c10:	e00b      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c12:	f7fb ffad 	bl	8002b70 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d902      	bls.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	75fb      	strb	r3, [r7, #23]
            break;
 8006c28:	e005      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c2a:	4b7b      	ldr	r3, [pc, #492]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0ed      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d126      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c4a:	d10d      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006c4c:	4b72      	ldr	r3, [pc, #456]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c5a:	0919      	lsrs	r1, r3, #4
 8006c5c:	4b70      	ldr	r3, [pc, #448]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006c5e:	400b      	ands	r3, r1
 8006c60:	496d      	ldr	r1, [pc, #436]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	610b      	str	r3, [r1, #16]
 8006c66:	e005      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006c68:	4b6b      	ldr	r3, [pc, #428]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	4a6a      	ldr	r2, [pc, #424]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c72:	6113      	str	r3, [r2, #16]
 8006c74:	4b68      	ldr	r3, [pc, #416]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c82:	4965      	ldr	r1, [pc, #404]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	670b      	str	r3, [r1, #112]	; 0x70
 8006c88:	e004      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	75bb      	strb	r3, [r7, #22]
 8006c8e:	e001      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d07e      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ca4:	2b28      	cmp	r3, #40	; 0x28
 8006ca6:	d867      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006d7f 	.word	0x08006d7f
 8006cb4:	08006d79 	.word	0x08006d79
 8006cb8:	08006d79 	.word	0x08006d79
 8006cbc:	08006d79 	.word	0x08006d79
 8006cc0:	08006d79 	.word	0x08006d79
 8006cc4:	08006d79 	.word	0x08006d79
 8006cc8:	08006d79 	.word	0x08006d79
 8006ccc:	08006d79 	.word	0x08006d79
 8006cd0:	08006d55 	.word	0x08006d55
 8006cd4:	08006d79 	.word	0x08006d79
 8006cd8:	08006d79 	.word	0x08006d79
 8006cdc:	08006d79 	.word	0x08006d79
 8006ce0:	08006d79 	.word	0x08006d79
 8006ce4:	08006d79 	.word	0x08006d79
 8006ce8:	08006d79 	.word	0x08006d79
 8006cec:	08006d79 	.word	0x08006d79
 8006cf0:	08006d67 	.word	0x08006d67
 8006cf4:	08006d79 	.word	0x08006d79
 8006cf8:	08006d79 	.word	0x08006d79
 8006cfc:	08006d79 	.word	0x08006d79
 8006d00:	08006d79 	.word	0x08006d79
 8006d04:	08006d79 	.word	0x08006d79
 8006d08:	08006d79 	.word	0x08006d79
 8006d0c:	08006d79 	.word	0x08006d79
 8006d10:	08006d7f 	.word	0x08006d7f
 8006d14:	08006d79 	.word	0x08006d79
 8006d18:	08006d79 	.word	0x08006d79
 8006d1c:	08006d79 	.word	0x08006d79
 8006d20:	08006d79 	.word	0x08006d79
 8006d24:	08006d79 	.word	0x08006d79
 8006d28:	08006d79 	.word	0x08006d79
 8006d2c:	08006d79 	.word	0x08006d79
 8006d30:	08006d7f 	.word	0x08006d7f
 8006d34:	08006d79 	.word	0x08006d79
 8006d38:	08006d79 	.word	0x08006d79
 8006d3c:	08006d79 	.word	0x08006d79
 8006d40:	08006d79 	.word	0x08006d79
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	08006d7f 	.word	0x08006d7f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	2101      	movs	r1, #1
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fc18 	bl	8008590 <RCCEx_PLL2_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d64:	e00c      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3324      	adds	r3, #36	; 0x24
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 fcc1 	bl	80086f4 <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7c:	e000      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d109      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d86:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d92:	4921      	ldr	r1, [pc, #132]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	654b      	str	r3, [r1, #84]	; 0x54
 8006d98:	e001      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d03e      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	d820      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006db2:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006dfb 	.word	0x08006dfb
 8006dbc:	08006dd1 	.word	0x08006dd1
 8006dc0:	08006de3 	.word	0x08006de3
 8006dc4:	08006dfb 	.word	0x08006dfb
 8006dc8:	08006dfb 	.word	0x08006dfb
 8006dcc:	08006dfb 	.word	0x08006dfb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 fbda 	bl	8008590 <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006de0:	e00c      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3324      	adds	r3, #36	; 0x24
 8006de6:	2101      	movs	r1, #1
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 fc83 	bl	80086f4 <RCCEx_PLL3_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	75fb      	strb	r3, [r7, #23]
      break;
 8006df8:	e000      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d110      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	f023 0207 	bic.w	r2, r3, #7
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0e:	4902      	ldr	r1, [pc, #8]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	654b      	str	r3, [r1, #84]	; 0x54
 8006e14:	e008      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006e16:	bf00      	nop
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	58024800 	.word	0x58024800
 8006e20:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d039      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	d820      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e87 	.word	0x08006e87
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e6f 	.word	0x08006e6f
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e87 	.word	0x08006e87
 8006e58:	08006e87 	.word	0x08006e87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	2101      	movs	r1, #1
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fb94 	bl	8008590 <RCCEx_PLL2_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e6c:	e00c      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3324      	adds	r3, #36	; 0x24
 8006e72:	2101      	movs	r1, #1
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 fc3d 	bl	80086f4 <RCCEx_PLL3_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e7e:	e003      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
      break;
 8006e84:	e000      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e8e:	4bb7      	ldr	r3, [pc, #732]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e92:	f023 0207 	bic.w	r2, r3, #7
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	49b3      	ldr	r1, [pc, #716]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ea2:	e001      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d04b      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ebe:	d02e      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ec4:	d828      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d02a      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d822      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ed6:	d026      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006ed8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006edc:	d81c      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee2:	d010      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee8:	d816      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01d      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef2:	d111      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fb48 	bl	8008590 <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f04:	e012      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3324      	adds	r3, #36	; 0x24
 8006f0a:	2102      	movs	r1, #2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fbf1 	bl	80086f4 <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f16:	e009      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f1e:	bf00      	nop
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f32:	4b8e      	ldr	r3, [pc, #568]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f40:	498a      	ldr	r1, [pc, #552]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	654b      	str	r3, [r1, #84]	; 0x54
 8006f46:	e001      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d04b      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f62:	d02e      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006f64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f68:	d828      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6e:	d02a      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f74:	d822      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f7a:	d026      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f80:	d81c      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f86:	d010      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8c:	d816      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01d      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f96:	d111      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 faf6 	bl	8008590 <RCCEx_PLL2_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fa8:	e012      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3324      	adds	r3, #36	; 0x24
 8006fae:	2102      	movs	r1, #2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 fb9f 	bl	80086f4 <RCCEx_PLL3_Config>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fba:	e009      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	e006      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e004      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fd6:	4b65      	ldr	r3, [pc, #404]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fe4:	4961      	ldr	r1, [pc, #388]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	658b      	str	r3, [r1, #88]	; 0x58
 8006fea:	e001      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d04b      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007002:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007006:	d02e      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007008:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800700c:	d828      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800700e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007012:	d02a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007018:	d822      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800701a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800701e:	d026      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007020:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007024:	d81c      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800702a:	d010      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800702c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007030:	d816      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d01d      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703a:	d111      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f001 faa4 	bl	8008590 <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800704c:	e012      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3324      	adds	r3, #36	; 0x24
 8007052:	2102      	movs	r1, #2
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fb4d 	bl	80086f4 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800705e:	e009      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
      break;
 8007064:	e006      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007066:	bf00      	nop
 8007068:	e004      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800706a:	bf00      	nop
 800706c:	e002      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800706e:	bf00      	nop
 8007070:	e000      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800707a:	4b3c      	ldr	r3, [pc, #240]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800707c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007088:	4938      	ldr	r1, [pc, #224]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800708a:	4313      	orrs	r3, r2
 800708c:	658b      	str	r3, [r1, #88]	; 0x58
 800708e:	e001      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070aa:	d10a      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3324      	adds	r3, #36	; 0x24
 80070b0:	2102      	movs	r1, #2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 fb1e 	bl	80086f4 <RCCEx_PLL3_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070d0:	4926      	ldr	r1, [pc, #152]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ec:	d10a      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3324      	adds	r3, #36	; 0x24
 80070f2:	2102      	movs	r1, #2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fafd 	bl	80086f4 <RCCEx_PLL3_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007112:	4916      	ldr	r1, [pc, #88]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007114:	4313      	orrs	r3, r2
 8007116:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d036      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800712a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800712e:	d01f      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007134:	d817      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800713a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713e:	d009      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007140:	e011      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3304      	adds	r3, #4
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f001 fa21 	bl	8008590 <RCCEx_PLL2_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007152:	e00e      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3324      	adds	r3, #36	; 0x24
 8007158:	2102      	movs	r1, #2
 800715a:	4618      	mov	r0, r3
 800715c:	f001 faca 	bl	80086f4 <RCCEx_PLL3_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007164:	e005      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
      break;
 800716a:	e002      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800716c:	58024400 	.word	0x58024400
      break;
 8007170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007178:	4b93      	ldr	r3, [pc, #588]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007186:	4990      	ldr	r1, [pc, #576]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007188:	4313      	orrs	r3, r2
 800718a:	658b      	str	r3, [r1, #88]	; 0x58
 800718c:	e001      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d033      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071a8:	d01c      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80071aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071ae:	d816      	bhi.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80071b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b4:	d003      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80071b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ba:	d007      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80071bc:	e00f      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071be:	4b82      	ldr	r3, [pc, #520]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	4a81      	ldr	r2, [pc, #516]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80071ca:	e00c      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3324      	adds	r3, #36	; 0x24
 80071d0:	2101      	movs	r1, #1
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 fa8e 	bl	80086f4 <RCCEx_PLL3_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071dc:	e003      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
      break;
 80071e2:	e000      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80071e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071ec:	4b76      	ldr	r3, [pc, #472]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071fa:	4973      	ldr	r1, [pc, #460]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007200:	e001      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d029      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800721a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721e:	d007      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007222:	4b69      	ldr	r3, [pc, #420]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	4a68      	ldr	r2, [pc, #416]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800722c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800722e:	e00b      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	2102      	movs	r1, #2
 8007236:	4618      	mov	r0, r3
 8007238:	f001 f9aa 	bl	8008590 <RCCEx_PLL2_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007240:	e002      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
      break;
 8007246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800724e:	4b5e      	ldr	r3, [pc, #376]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007252:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725a:	495b      	ldr	r1, [pc, #364]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800725c:	4313      	orrs	r3, r2
 800725e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007260:	e001      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3324      	adds	r3, #36	; 0x24
 8007276:	2102      	movs	r1, #2
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fa3b 	bl	80086f4 <RCCEx_PLL3_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d030      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729c:	d017      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800729e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a2:	d811      	bhi.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a8:	d013      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80072aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ae:	d80b      	bhi.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d010      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	d106      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ba:	4b43      	ldr	r3, [pc, #268]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	4a42      	ldr	r2, [pc, #264]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80072c6:	e007      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	75fb      	strb	r3, [r7, #23]
      break;
 80072cc:	e004      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80072ce:	bf00      	nop
 80072d0:	e002      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80072d2:	bf00      	nop
 80072d4:	e000      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80072d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d109      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072de:	4b3a      	ldr	r3, [pc, #232]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ea:	4937      	ldr	r1, [pc, #220]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	654b      	str	r3, [r1, #84]	; 0x54
 80072f0:	e001      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007302:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	492e      	ldr	r1, [pc, #184]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007310:	4313      	orrs	r3, r2
 8007312:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d009      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007320:	4b29      	ldr	r3, [pc, #164]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800732e:	4926      	ldr	r1, [pc, #152]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007330:	4313      	orrs	r3, r2
 8007332:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007340:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007344:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800734c:	491e      	ldr	r1, [pc, #120]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00d      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800735e:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007368:	6113      	str	r3, [r2, #16]
 800736a:	4b17      	ldr	r3, [pc, #92]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007374:	4914      	ldr	r1, [pc, #80]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007376:	4313      	orrs	r3, r2
 8007378:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	da08      	bge.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007382:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	490e      	ldr	r1, [pc, #56]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007390:	4313      	orrs	r3, r2
 8007392:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d009      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	4906      	ldr	r1, [pc, #24]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80073b4:	7dbb      	ldrb	r3, [r7, #22]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	58024400 	.word	0x58024400

080073cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b090      	sub	sp, #64	; 0x40
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073da:	f040 8095 	bne.w	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80073de:	4bae      	ldr	r3, [pc, #696]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	f200 8088 	bhi.w	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80073f0:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	0800740d 	.word	0x0800740d
 80073fc:	08007435 	.word	0x08007435
 8007400:	0800745d 	.word	0x0800745d
 8007404:	080074f9 	.word	0x080074f9
 8007408:	08007485 	.word	0x08007485

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800740c:	4ba2      	ldr	r3, [pc, #648]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007418:	d108      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800741a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800741e:	4618      	mov	r0, r3
 8007420:	f000 ff64 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007428:	f000 bc95 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007430:	f000 bc91 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007434:	4b98      	ldr	r3, [pc, #608]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800743c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007440:	d108      	bne.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007442:	f107 0318 	add.w	r3, r7, #24
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fca8 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007450:	f000 bc81 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007458:	f000 bc7d 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800745c:	4b8e      	ldr	r3, [pc, #568]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007468:	d108      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800746a:	f107 030c 	add.w	r3, r7, #12
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fde8 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007478:	f000 bc6d 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007480:	f000 bc69 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007484:	4b84      	ldr	r3, [pc, #528]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800748c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800748e:	4b82      	ldr	r3, [pc, #520]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b04      	cmp	r3, #4
 8007498:	d10c      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a0:	4b7d      	ldr	r3, [pc, #500]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	08db      	lsrs	r3, r3, #3
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	4a7c      	ldr	r2, [pc, #496]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074b2:	e01f      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074b4:	4b78      	ldr	r3, [pc, #480]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c0:	d106      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c8:	d102      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80074ca:	4b75      	ldr	r3, [pc, #468]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ce:	e011      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074d0:	4b71      	ldr	r3, [pc, #452]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074dc:	d106      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e4:	d102      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80074e6:	4b6f      	ldr	r3, [pc, #444]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ea:	e003      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80074f0:	f000 bc31 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80074f4:	f000 bc2f 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80074f8:	4b6b      	ldr	r3, [pc, #428]	; (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074fc:	f000 bc2b 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007504:	f000 bc27 	b.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750e:	f040 8095 	bne.w	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007512:	4b61      	ldr	r3, [pc, #388]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007516:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800751a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007522:	d04d      	beq.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752a:	f200 8084 	bhi.w	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2bc0      	cmp	r3, #192	; 0xc0
 8007532:	d07d      	beq.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2bc0      	cmp	r3, #192	; 0xc0
 8007538:	d87d      	bhi.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	2b80      	cmp	r3, #128	; 0x80
 800753e:	d02d      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d877      	bhi.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d012      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007552:	e070      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007554:	4b50      	ldr	r3, [pc, #320]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007560:	d107      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fec0 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007570:	e3f1      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007576:	e3ee      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007578:	4b47      	ldr	r3, [pc, #284]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007584:	d107      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007586:	f107 0318 	add.w	r3, r7, #24
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fc06 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007594:	e3df      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800759a:	e3dc      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800759c:	4b3e      	ldr	r3, [pc, #248]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a8:	d107      	bne.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075aa:	f107 030c 	add.w	r3, r7, #12
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fd48 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075b8:	e3cd      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075be:	e3ca      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80075c0:	4b35      	ldr	r3, [pc, #212]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075ca:	4b33      	ldr	r3, [pc, #204]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075dc:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	08db      	lsrs	r3, r3, #3
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	4a2d      	ldr	r2, [pc, #180]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ee:	e01e      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075f0:	4b29      	ldr	r3, [pc, #164]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fc:	d106      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80075fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007604:	d102      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007606:	4b26      	ldr	r3, [pc, #152]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800760a:	e010      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800760c:	4b22      	ldr	r3, [pc, #136]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007618:	d106      	bne.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007620:	d102      	bne.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007622:	4b20      	ldr	r3, [pc, #128]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007626:	e002      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800762c:	e393      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800762e:	e392      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007634:	e38f      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800763a:	e38c      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007642:	f040 80a7 	bne.w	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800764e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007656:	d05f      	beq.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800765e:	f200 8096 	bhi.w	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007668:	f000 808e 	beq.w	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007672:	f200 808c 	bhi.w	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767c:	d03a      	beq.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007684:	f200 8083 	bhi.w	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00e      	beq.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007694:	d01c      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007696:	e07a      	b.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007698:	58024400 	.word	0x58024400
 800769c:	03d09000 	.word	0x03d09000
 80076a0:	003d0900 	.word	0x003d0900
 80076a4:	007a1200 	.word	0x007a1200
 80076a8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076ac:	4baa      	ldr	r3, [pc, #680]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076b8:	d107      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fe14 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076c8:	e345      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ce:	e342      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076d0:	4ba1      	ldr	r3, [pc, #644]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076dc:	d107      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076de:	f107 0318 	add.w	r3, r7, #24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fb5a 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076ec:	e333      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076f2:	e330      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076f4:	4b98      	ldr	r3, [pc, #608]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007700:	d107      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007702:	f107 030c 	add.w	r3, r7, #12
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fc9c 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007710:	e321      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007716:	e31e      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007718:	4b8f      	ldr	r3, [pc, #572]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007720:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007722:	4b8d      	ldr	r3, [pc, #564]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	2b04      	cmp	r3, #4
 800772c:	d10c      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	2b00      	cmp	r3, #0
 8007732:	d109      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007734:	4b88      	ldr	r3, [pc, #544]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	08db      	lsrs	r3, r3, #3
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	4a87      	ldr	r2, [pc, #540]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007746:	e01e      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007748:	4b83      	ldr	r3, [pc, #524]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007754:	d106      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775c:	d102      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800775e:	4b80      	ldr	r3, [pc, #512]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007762:	e010      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007764:	4b7c      	ldr	r3, [pc, #496]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007770:	d106      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007778:	d102      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800777a:	4b7a      	ldr	r3, [pc, #488]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800777e:	e002      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007784:	e2e7      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007786:	e2e6      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007788:	4b77      	ldr	r3, [pc, #476]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778c:	e2e3      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007792:	e2e0      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779a:	f040 809c 	bne.w	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800779e:	4b6e      	ldr	r3, [pc, #440]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077ae:	d054      	beq.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077b6:	f200 808b 	bhi.w	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077c0:	f000 8083 	beq.w	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077ca:	f200 8081 	bhi.w	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077d4:	d02f      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077dc:	d878      	bhi.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ea:	d012      	beq.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80077ec:	e070      	b.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077ee:	4b5a      	ldr	r3, [pc, #360]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077fa:	d107      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fd73 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800780a:	e2a4      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007810:	e2a1      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007812:	4b51      	ldr	r3, [pc, #324]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781e:	d107      	bne.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007820:	f107 0318 	add.w	r3, r7, #24
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fab9 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800782e:	e292      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007834:	e28f      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007836:	4b48      	ldr	r3, [pc, #288]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800783e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007842:	d107      	bne.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fbfb 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007852:	e280      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007854:	2300      	movs	r3, #0
 8007856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007858:	e27d      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800785a:	4b3f      	ldr	r3, [pc, #252]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800785c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007862:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007864:	4b3c      	ldr	r3, [pc, #240]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b04      	cmp	r3, #4
 800786e:	d10c      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007876:	4b38      	ldr	r3, [pc, #224]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	08db      	lsrs	r3, r3, #3
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	4a36      	ldr	r2, [pc, #216]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007882:	fa22 f303 	lsr.w	r3, r2, r3
 8007886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007888:	e01e      	b.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800788a:	4b33      	ldr	r3, [pc, #204]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007896:	d106      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800789e:	d102      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80078a0:	4b2f      	ldr	r3, [pc, #188]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a4:	e010      	b.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078a6:	4b2c      	ldr	r3, [pc, #176]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b2:	d106      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ba:	d102      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80078bc:	4b29      	ldr	r3, [pc, #164]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078c0:	e002      	b.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80078c6:	e246      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80078c8:	e245      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078ca:	4b27      	ldr	r3, [pc, #156]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ce:	e242      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078d4:	e23f      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078dc:	f040 80a8 	bne.w	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f0:	d060      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f8:	f200 8097 	bhi.w	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007902:	f000 808f 	beq.w	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800790c:	f200 808d 	bhi.w	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007916:	d03b      	beq.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800791e:	f200 8084 	bhi.w	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792e:	d01d      	beq.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007930:	e07b      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007932:	4b09      	ldr	r3, [pc, #36]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800793e:	d107      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fcd1 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800794e:	e202      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007954:	e1ff      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007956:	bf00      	nop
 8007958:	58024400 	.word	0x58024400
 800795c:	03d09000 	.word	0x03d09000
 8007960:	003d0900 	.word	0x003d0900
 8007964:	007a1200 	.word	0x007a1200
 8007968:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800796c:	4ba3      	ldr	r3, [pc, #652]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007978:	d107      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800797a:	f107 0318 	add.w	r3, r7, #24
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fa0c 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007988:	e1e5      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800798e:	e1e2      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007990:	4b9a      	ldr	r3, [pc, #616]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800799c:	d107      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fb4e 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079ac:	e1d3      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079b2:	e1d0      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079b4:	4b91      	ldr	r3, [pc, #580]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079be:	4b8f      	ldr	r3, [pc, #572]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d10c      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079d0:	4b8a      	ldr	r3, [pc, #552]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	08db      	lsrs	r3, r3, #3
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	4a89      	ldr	r2, [pc, #548]	; (8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e2:	e01e      	b.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079e4:	4b85      	ldr	r3, [pc, #532]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f0:	d106      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079f8:	d102      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079fa:	4b82      	ldr	r3, [pc, #520]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079fe:	e010      	b.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a00:	4b7e      	ldr	r3, [pc, #504]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a14:	d102      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a16:	4b7c      	ldr	r3, [pc, #496]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a1a:	e002      	b.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a20:	e199      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a22:	e198      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a24:	4b79      	ldr	r3, [pc, #484]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a28:	e195      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a2e:	e192      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a36:	d173      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007a38:	4b70      	ldr	r3, [pc, #448]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a48:	d02f      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a50:	d863      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a5e:	d012      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007a60:	e05b      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a62:	4b66      	ldr	r3, [pc, #408]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a6e:	d107      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a70:	f107 0318 	add.w	r3, r7, #24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f991 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a7e:	e16a      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a84:	e167      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a86:	4b5d      	ldr	r3, [pc, #372]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a94:	f107 030c 	add.w	r3, r7, #12
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 fad3 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007aa2:	e158      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa8:	e155      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007aaa:	4b54      	ldr	r3, [pc, #336]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ab4:	4b51      	ldr	r3, [pc, #324]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d10c      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ac6:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	08db      	lsrs	r3, r3, #3
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	4a4b      	ldr	r2, [pc, #300]	; (8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad8:	e01e      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ada:	4b48      	ldr	r3, [pc, #288]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae6:	d106      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aee:	d102      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007af0:	4b44      	ldr	r3, [pc, #272]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af4:	e010      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007af6:	4b41      	ldr	r3, [pc, #260]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b02:	d106      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b0a:	d102      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b0c:	4b3e      	ldr	r3, [pc, #248]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b10:	e002      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b16:	e11e      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b18:	e11d      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1e:	e11a      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b26:	d133      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007b28:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3e:	d012      	beq.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007b40:	e023      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b42:	4b2e      	ldr	r3, [pc, #184]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b4e:	d107      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fbc9 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b5e:	e0fa      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b64:	e0f7      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b66:	4b25      	ldr	r3, [pc, #148]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b72:	d107      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b74:	f107 0318 	add.w	r3, r7, #24
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f90f 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b82:	e0e8      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b88:	e0e5      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b8e:	e0e2      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b96:	f040 808f 	bne.w	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007b9a:	4b18      	ldr	r3, [pc, #96]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007ba2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007baa:	d075      	beq.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bb2:	d87e      	bhi.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bba:	d060      	beq.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc2:	d876      	bhi.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bca:	d045      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bd2:	d86e      	bhi.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bda:	d02b      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be2:	d866      	bhi.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bf0:	d00e      	beq.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007bf2:	e05e      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007bf4:	f000 f8bc 	bl	8007d70 <HAL_RCCEx_GetD3PCLK1Freq>
 8007bf8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007bfa:	e0ac      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	03d09000 	.word	0x03d09000
 8007c04:	003d0900 	.word	0x003d0900
 8007c08:	007a1200 	.word	0x007a1200
 8007c0c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c10:	4b53      	ldr	r3, [pc, #332]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c1c:	d107      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1e:	f107 0318 	add.w	r3, r7, #24
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f8ba 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c2c:	e093      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c32:	e090      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c34:	4b4a      	ldr	r3, [pc, #296]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c40:	d107      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c42:	f107 030c 	add.w	r3, r7, #12
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f9fc 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c50:	e081      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c56:	e07e      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c58:	4b41      	ldr	r3, [pc, #260]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d109      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c64:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	08db      	lsrs	r3, r3, #3
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	4a3d      	ldr	r2, [pc, #244]	; (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007c70:	fa22 f303 	lsr.w	r3, r2, r3
 8007c74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c76:	e06e      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c7c:	e06b      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c7e:	4b38      	ldr	r3, [pc, #224]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8a:	d102      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007c8c:	4b36      	ldr	r3, [pc, #216]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c90:	e061      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c96:	e05e      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c98:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ca4:	d102      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007ca6:	4b31      	ldr	r3, [pc, #196]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007caa:	e054      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb0:	e051      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb6:	e04e      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cbe:	d148      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd0:	d02a      	beq.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd8:	d838      	bhi.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ce6:	d00d      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007ce8:	e030      	b.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cea:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf6:	d102      	bne.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007cf8:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007cfc:	e02b      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d02:	e028      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d04:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d10:	d107      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fae8 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d20:	e019      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d26:	e016      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d34:	d107      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d36:	f107 0318 	add.w	r3, r7, #24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f82e 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d44:	e007      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d4a:	e004      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d50:	e001      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3740      	adds	r7, #64	; 0x40
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	58024400 	.word	0x58024400
 8007d64:	03d09000 	.word	0x03d09000
 8007d68:	003d0900 	.word	0x003d0900
 8007d6c:	007a1200 	.word	0x007a1200

08007d70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d74:	f7fe fb8e 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	091b      	lsrs	r3, r3, #4
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	4904      	ldr	r1, [pc, #16]	; (8007d98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d86:	5ccb      	ldrb	r3, [r1, r3]
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	58024400 	.word	0x58024400
 8007d98:	0800c958 	.word	0x0800c958

08007d9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b089      	sub	sp, #36	; 0x24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007da4:	4ba1      	ldr	r3, [pc, #644]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007dae:	4b9f      	ldr	r3, [pc, #636]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	0b1b      	lsrs	r3, r3, #12
 8007db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007db8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007dba:	4b9c      	ldr	r3, [pc, #624]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	091b      	lsrs	r3, r3, #4
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007dc6:	4b99      	ldr	r3, [pc, #612]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dca:	08db      	lsrs	r3, r3, #3
 8007dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8111 	beq.w	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	f000 8083 	beq.w	8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	f200 80a1 	bhi.w	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d056      	beq.n	8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e06:	e099      	b.n	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e08:	4b88      	ldr	r3, [pc, #544]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02d      	beq.n	8007e70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e14:	4b85      	ldr	r3, [pc, #532]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	4a84      	ldr	r2, [pc, #528]	; (8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b7b      	ldr	r3, [pc, #492]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e6e:	e087      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e82:	4b6a      	ldr	r3, [pc, #424]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eb2:	e065      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800803c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec6:	4b59      	ldr	r3, [pc, #356]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ef6:	e043      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0a:	4b48      	ldr	r3, [pc, #288]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f3a:	e021      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800803c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4e:	4b37      	ldr	r3, [pc, #220]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f80:	4b2a      	ldr	r3, [pc, #168]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	0a5b      	lsrs	r3, r3, #9
 8007f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa6:	ee17 2a90 	vmov	r2, s15
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007fae:	4b1f      	ldr	r3, [pc, #124]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd4:	ee17 2a90 	vmov	r2, s15
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	0e1b      	lsrs	r3, r3, #24
 8007fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008002:	ee17 2a90 	vmov	r2, s15
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800800a:	e008      	b.n	800801e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	609a      	str	r2, [r3, #8]
}
 800801e:	bf00      	nop
 8008020:	3724      	adds	r7, #36	; 0x24
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	58024400 	.word	0x58024400
 8008030:	03d09000 	.word	0x03d09000
 8008034:	46000000 	.word	0x46000000
 8008038:	4c742400 	.word	0x4c742400
 800803c:	4a742400 	.word	0x4a742400
 8008040:	4af42400 	.word	0x4af42400

08008044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008044:	b480      	push	{r7}
 8008046:	b089      	sub	sp, #36	; 0x24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800804c:	4ba1      	ldr	r3, [pc, #644]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008056:	4b9f      	ldr	r3, [pc, #636]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805a:	0d1b      	lsrs	r3, r3, #20
 800805c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008062:	4b9c      	ldr	r3, [pc, #624]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800806e:	4b99      	ldr	r3, [pc, #612]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008072:	08db      	lsrs	r3, r3, #3
 8008074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8111 	beq.w	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b02      	cmp	r3, #2
 8008096:	f000 8083 	beq.w	80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b02      	cmp	r3, #2
 800809e:	f200 80a1 	bhi.w	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d056      	beq.n	800815c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080ae:	e099      	b.n	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080b0:	4b88      	ldr	r3, [pc, #544]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02d      	beq.n	8008118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080bc:	4b85      	ldr	r3, [pc, #532]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	08db      	lsrs	r3, r3, #3
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	4a84      	ldr	r2, [pc, #528]	; (80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080c8:	fa22 f303 	lsr.w	r3, r2, r3
 80080cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e6:	4b7b      	ldr	r3, [pc, #492]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008112:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008116:	e087      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812a:	4b6a      	ldr	r3, [pc, #424]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813a:	ed97 6a03 	vldr	s12, [r7, #12]
 800813e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800814e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800815a:	e065      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800816a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816e:	4b59      	ldr	r3, [pc, #356]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008182:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800819e:	e043      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b2:	4b48      	ldr	r3, [pc, #288]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081e2:	e021      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a03 	vldr	s12, [r7, #12]
 800820a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008228:	4b2a      	ldr	r3, [pc, #168]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	0a5b      	lsrs	r3, r3, #9
 800822e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800823e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008242:	edd7 6a07 	vldr	s13, [r7, #28]
 8008246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800824a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800824e:	ee17 2a90 	vmov	r2, s15
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008256:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	0c1b      	lsrs	r3, r3, #16
 800825c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800826c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008270:	edd7 6a07 	vldr	s13, [r7, #28]
 8008274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827c:	ee17 2a90 	vmov	r2, s15
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008284:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800829a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829e:	edd7 6a07 	vldr	s13, [r7, #28]
 80082a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082aa:	ee17 2a90 	vmov	r2, s15
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082b2:	e008      	b.n	80082c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	609a      	str	r2, [r3, #8]
}
 80082c6:	bf00      	nop
 80082c8:	3724      	adds	r7, #36	; 0x24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	58024400 	.word	0x58024400
 80082d8:	03d09000 	.word	0x03d09000
 80082dc:	46000000 	.word	0x46000000
 80082e0:	4c742400 	.word	0x4c742400
 80082e4:	4a742400 	.word	0x4a742400
 80082e8:	4af42400 	.word	0x4af42400

080082ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b089      	sub	sp, #36	; 0x24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082f4:	4ba0      	ldr	r3, [pc, #640]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80082fe:	4b9e      	ldr	r3, [pc, #632]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	091b      	lsrs	r3, r3, #4
 8008304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008308:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800830a:	4b9b      	ldr	r3, [pc, #620]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008314:	4b98      	ldr	r3, [pc, #608]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008318:	08db      	lsrs	r3, r3, #3
 800831a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8111 	beq.w	800855a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b02      	cmp	r3, #2
 800833c:	f000 8083 	beq.w	8008446 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	2b02      	cmp	r3, #2
 8008344:	f200 80a1 	bhi.w	800848a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d056      	beq.n	8008402 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008354:	e099      	b.n	800848a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008356:	4b88      	ldr	r3, [pc, #544]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02d      	beq.n	80083be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008362:	4b85      	ldr	r3, [pc, #532]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	08db      	lsrs	r3, r3, #3
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	4a83      	ldr	r2, [pc, #524]	; (800857c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800836e:	fa22 f303 	lsr.w	r3, r2, r3
 8008372:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	ee07 3a90 	vmov	s15, r3
 8008384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838c:	4b7a      	ldr	r3, [pc, #488]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	ee07 3a90 	vmov	s15, r3
 8008398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839c:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083bc:	e087      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80083cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d0:	4b69      	ldr	r3, [pc, #420]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d8:	ee07 3a90 	vmov	s15, r3
 80083dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008400:	e065      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	ee07 3a90 	vmov	s15, r3
 8008408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008414:	4b58      	ldr	r3, [pc, #352]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008424:	ed97 6a03 	vldr	s12, [r7, #12]
 8008428:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800842c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008440:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008444:	e043      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	ee07 3a90 	vmov	s15, r3
 800844c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008450:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800858c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008458:	4b47      	ldr	r3, [pc, #284]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008468:	ed97 6a03 	vldr	s12, [r7, #12]
 800846c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800847c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008484:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008488:	e021      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008494:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849c:	4b36      	ldr	r3, [pc, #216]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80084ce:	4b2a      	ldr	r3, [pc, #168]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	0a5b      	lsrs	r3, r3, #9
 80084d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f4:	ee17 2a90 	vmov	r2, s15
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80084fc:	4b1e      	ldr	r3, [pc, #120]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008516:	edd7 6a07 	vldr	s13, [r7, #28]
 800851a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800851e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008522:	ee17 2a90 	vmov	r2, s15
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800852a:	4b13      	ldr	r3, [pc, #76]	; (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	0e1b      	lsrs	r3, r3, #24
 8008530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008544:	edd7 6a07 	vldr	s13, [r7, #28]
 8008548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008550:	ee17 2a90 	vmov	r2, s15
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008558:	e008      	b.n	800856c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	609a      	str	r2, [r3, #8]
}
 800856c:	bf00      	nop
 800856e:	3724      	adds	r7, #36	; 0x24
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	46000000 	.word	0x46000000
 8008584:	4c742400 	.word	0x4c742400
 8008588:	4a742400 	.word	0x4a742400
 800858c:	4af42400 	.word	0x4af42400

08008590 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800859e:	4b53      	ldr	r3, [pc, #332]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d101      	bne.n	80085ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e099      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085ae:	4b4f      	ldr	r3, [pc, #316]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a4e      	ldr	r2, [pc, #312]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ba:	f7fa fad9 	bl	8002b70 <HAL_GetTick>
 80085be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085c0:	e008      	b.n	80085d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085c2:	f7fa fad5 	bl	8002b70 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e086      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085d4:	4b45      	ldr	r3, [pc, #276]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085e0:	4b42      	ldr	r3, [pc, #264]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	031b      	lsls	r3, r3, #12
 80085ee:	493f      	ldr	r1, [pc, #252]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	628b      	str	r3, [r1, #40]	; 0x28
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	3b01      	subs	r3, #1
 8008604:	025b      	lsls	r3, r3, #9
 8008606:	b29b      	uxth	r3, r3
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	3b01      	subs	r3, #1
 800861e:	061b      	lsls	r3, r3, #24
 8008620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008624:	4931      	ldr	r1, [pc, #196]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800862a:	4b30      	ldr	r3, [pc, #192]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	492d      	ldr	r1, [pc, #180]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008638:	4313      	orrs	r3, r2
 800863a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800863c:	4b2b      	ldr	r3, [pc, #172]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	f023 0220 	bic.w	r2, r3, #32
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	4928      	ldr	r1, [pc, #160]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800864a:	4313      	orrs	r3, r2
 800864c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800864e:	4b27      	ldr	r3, [pc, #156]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	4a26      	ldr	r2, [pc, #152]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800865a:	4b24      	ldr	r3, [pc, #144]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800865c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800865e:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <RCCEx_PLL2_Config+0x160>)
 8008660:	4013      	ands	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	69d2      	ldr	r2, [r2, #28]
 8008666:	00d2      	lsls	r2, r2, #3
 8008668:	4920      	ldr	r1, [pc, #128]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800866a:	4313      	orrs	r3, r2
 800866c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800866e:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008674:	f043 0310 	orr.w	r3, r3, #16
 8008678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008680:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a19      	ldr	r2, [pc, #100]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800868c:	e00f      	b.n	80086ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d106      	bne.n	80086a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008694:	4b15      	ldr	r3, [pc, #84]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a14      	ldr	r2, [pc, #80]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800869e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086a0:	e005      	b.n	80086ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	4a11      	ldr	r2, [pc, #68]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a0e      	ldr	r2, [pc, #56]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ba:	f7fa fa59 	bl	8002b70 <HAL_GetTick>
 80086be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086c0:	e008      	b.n	80086d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80086c2:	f7fa fa55 	bl	8002b70 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e006      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f0      	beq.n	80086c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	ffff0007 	.word	0xffff0007

080086f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008702:	4b53      	ldr	r3, [pc, #332]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b03      	cmp	r3, #3
 800870c:	d101      	bne.n	8008712 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e099      	b.n	8008846 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008712:	4b4f      	ldr	r3, [pc, #316]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a4e      	ldr	r2, [pc, #312]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800871c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871e:	f7fa fa27 	bl	8002b70 <HAL_GetTick>
 8008722:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008724:	e008      	b.n	8008738 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008726:	f7fa fa23 	bl	8002b70 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e086      	b.n	8008846 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008738:	4b45      	ldr	r3, [pc, #276]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f0      	bne.n	8008726 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008744:	4b42      	ldr	r3, [pc, #264]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	051b      	lsls	r3, r3, #20
 8008752:	493f      	ldr	r1, [pc, #252]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008754:	4313      	orrs	r3, r2
 8008756:	628b      	str	r3, [r1, #40]	; 0x28
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	3b01      	subs	r3, #1
 8008768:	025b      	lsls	r3, r3, #9
 800876a:	b29b      	uxth	r3, r3
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	3b01      	subs	r3, #1
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	3b01      	subs	r3, #1
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008788:	4931      	ldr	r1, [pc, #196]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800878e:	4b30      	ldr	r3, [pc, #192]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	492d      	ldr	r1, [pc, #180]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800879c:	4313      	orrs	r3, r2
 800879e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087a0:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	4928      	ldr	r1, [pc, #160]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087b2:	4b27      	ldr	r3, [pc, #156]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	4a26      	ldr	r2, [pc, #152]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c2:	4b24      	ldr	r3, [pc, #144]	; (8008854 <RCCEx_PLL3_Config+0x160>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	69d2      	ldr	r2, [r2, #28]
 80087ca:	00d2      	lsls	r2, r2, #3
 80087cc:	4920      	ldr	r1, [pc, #128]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087d2:	4b1f      	ldr	r3, [pc, #124]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087e4:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	4a19      	ldr	r2, [pc, #100]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f0:	e00f      	b.n	8008812 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d106      	bne.n	8008806 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	4a14      	ldr	r2, [pc, #80]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008804:	e005      	b.n	8008812 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008806:	4b12      	ldr	r3, [pc, #72]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	4a11      	ldr	r2, [pc, #68]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800880c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008810:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a0e      	ldr	r2, [pc, #56]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881e:	f7fa f9a7 	bl	8002b70 <HAL_GetTick>
 8008822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008824:	e008      	b.n	8008838 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008826:	f7fa f9a3 	bl	8002b70 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e006      	b.n	8008846 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	58024400 	.word	0x58024400
 8008854:	ffff0007 	.word	0xffff0007

08008858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e049      	b.n	80088fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7f9 fdee 	bl	8002460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3304      	adds	r3, #4
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f000 fea6 	bl	80095e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	d001      	beq.n	8008920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e054      	b.n	80089ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a26      	ldr	r2, [pc, #152]	; (80089d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d022      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800894a:	d01d      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a22      	ldr	r2, [pc, #136]	; (80089dc <HAL_TIM_Base_Start_IT+0xd4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d018      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d013      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a1f      	ldr	r2, [pc, #124]	; (80089e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00e      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1e      	ldr	r2, [pc, #120]	; (80089e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d009      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1c      	ldr	r2, [pc, #112]	; (80089ec <HAL_TIM_Base_Start_IT+0xe4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d004      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1b      	ldr	r2, [pc, #108]	; (80089f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d115      	bne.n	80089b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <HAL_TIM_Base_Start_IT+0xec>)
 8008990:	4013      	ands	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b06      	cmp	r3, #6
 8008998:	d015      	beq.n	80089c6 <HAL_TIM_Base_Start_IT+0xbe>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a0:	d011      	beq.n	80089c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0201 	orr.w	r2, r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b2:	e008      	b.n	80089c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e000      	b.n	80089c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	40010000 	.word	0x40010000
 80089dc:	40000400 	.word	0x40000400
 80089e0:	40000800 	.word	0x40000800
 80089e4:	40000c00 	.word	0x40000c00
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40001800 	.word	0x40001800
 80089f0:	40014000 	.word	0x40014000
 80089f4:	00010007 	.word	0x00010007

080089f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e049      	b.n	8008a9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f841 	bl	8008aa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3304      	adds	r3, #4
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f000 fdd6 	bl	80095e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d109      	bne.n	8008ae0 <HAL_TIM_PWM_Start+0x24>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	bf14      	ite	ne
 8008ad8:	2301      	movne	r3, #1
 8008ada:	2300      	moveq	r3, #0
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	e03c      	b.n	8008b5a <HAL_TIM_PWM_Start+0x9e>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d109      	bne.n	8008afa <HAL_TIM_PWM_Start+0x3e>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	bf14      	ite	ne
 8008af2:	2301      	movne	r3, #1
 8008af4:	2300      	moveq	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	e02f      	b.n	8008b5a <HAL_TIM_PWM_Start+0x9e>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d109      	bne.n	8008b14 <HAL_TIM_PWM_Start+0x58>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	bf14      	ite	ne
 8008b0c:	2301      	movne	r3, #1
 8008b0e:	2300      	moveq	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	e022      	b.n	8008b5a <HAL_TIM_PWM_Start+0x9e>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	2b0c      	cmp	r3, #12
 8008b18:	d109      	bne.n	8008b2e <HAL_TIM_PWM_Start+0x72>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	bf14      	ite	ne
 8008b26:	2301      	movne	r3, #1
 8008b28:	2300      	moveq	r3, #0
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	e015      	b.n	8008b5a <HAL_TIM_PWM_Start+0x9e>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d109      	bne.n	8008b48 <HAL_TIM_PWM_Start+0x8c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	bf14      	ite	ne
 8008b40:	2301      	movne	r3, #1
 8008b42:	2300      	moveq	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	e008      	b.n	8008b5a <HAL_TIM_PWM_Start+0x9e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	bf14      	ite	ne
 8008b54:	2301      	movne	r3, #1
 8008b56:	2300      	moveq	r3, #0
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e0a1      	b.n	8008ca6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d104      	bne.n	8008b72 <HAL_TIM_PWM_Start+0xb6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b70:	e023      	b.n	8008bba <HAL_TIM_PWM_Start+0xfe>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d104      	bne.n	8008b82 <HAL_TIM_PWM_Start+0xc6>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b80:	e01b      	b.n	8008bba <HAL_TIM_PWM_Start+0xfe>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d104      	bne.n	8008b92 <HAL_TIM_PWM_Start+0xd6>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b90:	e013      	b.n	8008bba <HAL_TIM_PWM_Start+0xfe>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b0c      	cmp	r3, #12
 8008b96:	d104      	bne.n	8008ba2 <HAL_TIM_PWM_Start+0xe6>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ba0:	e00b      	b.n	8008bba <HAL_TIM_PWM_Start+0xfe>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b10      	cmp	r3, #16
 8008ba6:	d104      	bne.n	8008bb2 <HAL_TIM_PWM_Start+0xf6>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bb0:	e003      	b.n	8008bba <HAL_TIM_PWM_Start+0xfe>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 f91e 	bl	8009e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a38      	ldr	r2, [pc, #224]	; (8008cb0 <HAL_TIM_PWM_Start+0x1f4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <HAL_TIM_PWM_Start+0x13e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a37      	ldr	r2, [pc, #220]	; (8008cb4 <HAL_TIM_PWM_Start+0x1f8>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00e      	beq.n	8008bfa <HAL_TIM_PWM_Start+0x13e>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a35      	ldr	r2, [pc, #212]	; (8008cb8 <HAL_TIM_PWM_Start+0x1fc>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d009      	beq.n	8008bfa <HAL_TIM_PWM_Start+0x13e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a34      	ldr	r2, [pc, #208]	; (8008cbc <HAL_TIM_PWM_Start+0x200>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d004      	beq.n	8008bfa <HAL_TIM_PWM_Start+0x13e>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a32      	ldr	r2, [pc, #200]	; (8008cc0 <HAL_TIM_PWM_Start+0x204>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d101      	bne.n	8008bfe <HAL_TIM_PWM_Start+0x142>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <HAL_TIM_PWM_Start+0x144>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d007      	beq.n	8008c14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a25      	ldr	r2, [pc, #148]	; (8008cb0 <HAL_TIM_PWM_Start+0x1f4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d022      	beq.n	8008c64 <HAL_TIM_PWM_Start+0x1a8>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d01d      	beq.n	8008c64 <HAL_TIM_PWM_Start+0x1a8>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a25      	ldr	r2, [pc, #148]	; (8008cc4 <HAL_TIM_PWM_Start+0x208>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d018      	beq.n	8008c64 <HAL_TIM_PWM_Start+0x1a8>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a24      	ldr	r2, [pc, #144]	; (8008cc8 <HAL_TIM_PWM_Start+0x20c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d013      	beq.n	8008c64 <HAL_TIM_PWM_Start+0x1a8>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a22      	ldr	r2, [pc, #136]	; (8008ccc <HAL_TIM_PWM_Start+0x210>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00e      	beq.n	8008c64 <HAL_TIM_PWM_Start+0x1a8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1a      	ldr	r2, [pc, #104]	; (8008cb4 <HAL_TIM_PWM_Start+0x1f8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d009      	beq.n	8008c64 <HAL_TIM_PWM_Start+0x1a8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <HAL_TIM_PWM_Start+0x214>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d004      	beq.n	8008c64 <HAL_TIM_PWM_Start+0x1a8>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a16      	ldr	r2, [pc, #88]	; (8008cb8 <HAL_TIM_PWM_Start+0x1fc>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d115      	bne.n	8008c90 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	4b1a      	ldr	r3, [pc, #104]	; (8008cd4 <HAL_TIM_PWM_Start+0x218>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b06      	cmp	r3, #6
 8008c74:	d015      	beq.n	8008ca2 <HAL_TIM_PWM_Start+0x1e6>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c7c:	d011      	beq.n	8008ca2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0201 	orr.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8e:	e008      	b.n	8008ca2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f042 0201 	orr.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e000      	b.n	8008ca4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40010400 	.word	0x40010400
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	40014400 	.word	0x40014400
 8008cc0:	40014800 	.word	0x40014800
 8008cc4:	40000400 	.word	0x40000400
 8008cc8:	40000800 	.word	0x40000800
 8008ccc:	40000c00 	.word	0x40000c00
 8008cd0:	40001800 	.word	0x40001800
 8008cd4:	00010007 	.word	0x00010007

08008cd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e08f      	b.n	8008e0c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7f9 fc23 	bl	800254c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6899      	ldr	r1, [r3, #8]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b3e      	ldr	r3, [pc, #248]	; (8008e14 <HAL_TIM_Encoder_Init+0x13c>)
 8008d1a:	400b      	ands	r3, r1
 8008d1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f000 fc5d 	bl	80095e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4b31      	ldr	r3, [pc, #196]	; (8008e18 <HAL_TIM_Encoder_Init+0x140>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	4313      	orrs	r3, r2
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4b2b      	ldr	r3, [pc, #172]	; (8008e1c <HAL_TIM_Encoder_Init+0x144>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	4b2a      	ldr	r3, [pc, #168]	; (8008e20 <HAL_TIM_Encoder_Init+0x148>)
 8008d76:	4013      	ands	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	4313      	orrs	r3, r2
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	011a      	lsls	r2, r3, #4
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	031b      	lsls	r3, r3, #12
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	fffebff8 	.word	0xfffebff8
 8008e18:	fffffcfc 	.word	0xfffffcfc
 8008e1c:	fffff3f3 	.word	0xfffff3f3
 8008e20:	ffff0f0f 	.word	0xffff0f0f

08008e24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d110      	bne.n	8008e76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d102      	bne.n	8008e60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e5a:	7b7b      	ldrb	r3, [r7, #13]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d001      	beq.n	8008e64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e069      	b.n	8008f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e74:	e031      	b.n	8008eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d110      	bne.n	8008e9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d102      	bne.n	8008e88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e82:	7b3b      	ldrb	r3, [r7, #12]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d001      	beq.n	8008e8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e055      	b.n	8008f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e9c:	e01d      	b.n	8008eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d108      	bne.n	8008eb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d105      	bne.n	8008eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eaa:	7b7b      	ldrb	r3, [r7, #13]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d102      	bne.n	8008eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008eb0:	7b3b      	ldrb	r3, [r7, #12]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d001      	beq.n	8008eba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e03e      	b.n	8008f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_TIM_Encoder_Start+0xc4>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d008      	beq.n	8008ef8 <HAL_TIM_Encoder_Start+0xd4>
 8008ee6:	e00f      	b.n	8008f08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2201      	movs	r2, #1
 8008eee:	2100      	movs	r1, #0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 ff87 	bl	8009e04 <TIM_CCxChannelCmd>
      break;
 8008ef6:	e016      	b.n	8008f26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2201      	movs	r2, #1
 8008efe:	2104      	movs	r1, #4
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 ff7f 	bl	8009e04 <TIM_CCxChannelCmd>
      break;
 8008f06:	e00e      	b.n	8008f26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 ff77 	bl	8009e04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	2104      	movs	r1, #4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 ff70 	bl	8009e04 <TIM_CCxChannelCmd>
      break;
 8008f24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f042 0201 	orr.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d122      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d11b      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0202 	mvn.w	r2, #2
 8008f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fb12 	bl	80095ac <HAL_TIM_IC_CaptureCallback>
 8008f88:	e005      	b.n	8008f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fb04 	bl	8009598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fb15 	bl	80095c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d122      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d11b      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0204 	mvn.w	r2, #4
 8008fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fae8 	bl	80095ac <HAL_TIM_IC_CaptureCallback>
 8008fdc:	e005      	b.n	8008fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fada 	bl	8009598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 faeb 	bl	80095c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d122      	bne.n	8009044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b08      	cmp	r3, #8
 800900a:	d11b      	bne.n	8009044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0208 	mvn.w	r2, #8
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2204      	movs	r2, #4
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fabe 	bl	80095ac <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fab0 	bl	8009598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fac1 	bl	80095c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b10      	cmp	r3, #16
 8009050:	d122      	bne.n	8009098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b10      	cmp	r3, #16
 800905e:	d11b      	bne.n	8009098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f06f 0210 	mvn.w	r2, #16
 8009068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2208      	movs	r2, #8
 800906e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fa94 	bl	80095ac <HAL_TIM_IC_CaptureCallback>
 8009084:	e005      	b.n	8009092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa86 	bl	8009598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa97 	bl	80095c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d10e      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d107      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f06f 0201 	mvn.w	r2, #1
 80090bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7f7 fd1a 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ce:	2b80      	cmp	r3, #128	; 0x80
 80090d0:	d10e      	bne.n	80090f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090dc:	2b80      	cmp	r3, #128	; 0x80
 80090de:	d107      	bne.n	80090f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 ff48 	bl	8009f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fe:	d10e      	bne.n	800911e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910a:	2b80      	cmp	r3, #128	; 0x80
 800910c:	d107      	bne.n	800911e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 ff3b 	bl	8009f94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009128:	2b40      	cmp	r3, #64	; 0x40
 800912a:	d10e      	bne.n	800914a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009136:	2b40      	cmp	r3, #64	; 0x40
 8009138:	d107      	bne.n	800914a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa45 	bl	80095d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f003 0320 	and.w	r3, r3, #32
 8009154:	2b20      	cmp	r3, #32
 8009156:	d10e      	bne.n	8009176 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b20      	cmp	r3, #32
 8009164:	d107      	bne.n	8009176 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f06f 0220 	mvn.w	r2, #32
 800916e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fefb 	bl	8009f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800919a:	2302      	movs	r3, #2
 800919c:	e0ff      	b.n	800939e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b14      	cmp	r3, #20
 80091aa:	f200 80f0 	bhi.w	800938e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	08009209 	.word	0x08009209
 80091b8:	0800938f 	.word	0x0800938f
 80091bc:	0800938f 	.word	0x0800938f
 80091c0:	0800938f 	.word	0x0800938f
 80091c4:	08009249 	.word	0x08009249
 80091c8:	0800938f 	.word	0x0800938f
 80091cc:	0800938f 	.word	0x0800938f
 80091d0:	0800938f 	.word	0x0800938f
 80091d4:	0800928b 	.word	0x0800928b
 80091d8:	0800938f 	.word	0x0800938f
 80091dc:	0800938f 	.word	0x0800938f
 80091e0:	0800938f 	.word	0x0800938f
 80091e4:	080092cb 	.word	0x080092cb
 80091e8:	0800938f 	.word	0x0800938f
 80091ec:	0800938f 	.word	0x0800938f
 80091f0:	0800938f 	.word	0x0800938f
 80091f4:	0800930d 	.word	0x0800930d
 80091f8:	0800938f 	.word	0x0800938f
 80091fc:	0800938f 	.word	0x0800938f
 8009200:	0800938f 	.word	0x0800938f
 8009204:	0800934d 	.word	0x0800934d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fa84 	bl	800971c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0208 	orr.w	r2, r2, #8
 8009222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0204 	bic.w	r2, r2, #4
 8009232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6999      	ldr	r1, [r3, #24]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	691a      	ldr	r2, [r3, #16]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	619a      	str	r2, [r3, #24]
      break;
 8009246:	e0a5      	b.n	8009394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	4618      	mov	r0, r3
 8009250:	f000 faf4 	bl	800983c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699a      	ldr	r2, [r3, #24]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6999      	ldr	r1, [r3, #24]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	021a      	lsls	r2, r3, #8
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	619a      	str	r2, [r3, #24]
      break;
 8009288:	e084      	b.n	8009394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fb5d 	bl	8009950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0208 	orr.w	r2, r2, #8
 80092a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0204 	bic.w	r2, r2, #4
 80092b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69d9      	ldr	r1, [r3, #28]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	691a      	ldr	r2, [r3, #16]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	61da      	str	r2, [r3, #28]
      break;
 80092c8:	e064      	b.n	8009394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fbc5 	bl	8009a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69d9      	ldr	r1, [r3, #28]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	021a      	lsls	r2, r3, #8
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	61da      	str	r2, [r3, #28]
      break;
 800930a:	e043      	b.n	8009394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fc0e 	bl	8009b34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0208 	orr.w	r2, r2, #8
 8009326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0204 	bic.w	r2, r2, #4
 8009336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	691a      	ldr	r2, [r3, #16]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800934a:	e023      	b.n	8009394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fc52 	bl	8009bfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	021a      	lsls	r2, r3, #8
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800938c:	e002      	b.n	8009394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	75fb      	strb	r3, [r7, #23]
      break;
 8009392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop

080093a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_TIM_ConfigClockSource+0x1c>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e0dc      	b.n	800957e <HAL_TIM_ConfigClockSource+0x1d6>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	4b6a      	ldr	r3, [pc, #424]	; (8009588 <HAL_TIM_ConfigClockSource+0x1e0>)
 80093e0:	4013      	ands	r3, r2
 80093e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a64      	ldr	r2, [pc, #400]	; (800958c <HAL_TIM_ConfigClockSource+0x1e4>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	f000 80a9 	beq.w	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009400:	4a62      	ldr	r2, [pc, #392]	; (800958c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	f200 80ae 	bhi.w	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009408:	4a61      	ldr	r2, [pc, #388]	; (8009590 <HAL_TIM_ConfigClockSource+0x1e8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	f000 80a1 	beq.w	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009410:	4a5f      	ldr	r2, [pc, #380]	; (8009590 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	f200 80a6 	bhi.w	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009418:	4a5e      	ldr	r2, [pc, #376]	; (8009594 <HAL_TIM_ConfigClockSource+0x1ec>)
 800941a:	4293      	cmp	r3, r2
 800941c:	f000 8099 	beq.w	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009420:	4a5c      	ldr	r2, [pc, #368]	; (8009594 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009422:	4293      	cmp	r3, r2
 8009424:	f200 809e 	bhi.w	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009428:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800942c:	f000 8091 	beq.w	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009430:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009434:	f200 8096 	bhi.w	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800943c:	f000 8089 	beq.w	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009444:	f200 808e 	bhi.w	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800944c:	d03e      	beq.n	80094cc <HAL_TIM_ConfigClockSource+0x124>
 800944e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009452:	f200 8087 	bhi.w	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945a:	f000 8086 	beq.w	800956a <HAL_TIM_ConfigClockSource+0x1c2>
 800945e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009462:	d87f      	bhi.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009464:	2b70      	cmp	r3, #112	; 0x70
 8009466:	d01a      	beq.n	800949e <HAL_TIM_ConfigClockSource+0xf6>
 8009468:	2b70      	cmp	r3, #112	; 0x70
 800946a:	d87b      	bhi.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 800946c:	2b60      	cmp	r3, #96	; 0x60
 800946e:	d050      	beq.n	8009512 <HAL_TIM_ConfigClockSource+0x16a>
 8009470:	2b60      	cmp	r3, #96	; 0x60
 8009472:	d877      	bhi.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009474:	2b50      	cmp	r3, #80	; 0x50
 8009476:	d03c      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x14a>
 8009478:	2b50      	cmp	r3, #80	; 0x50
 800947a:	d873      	bhi.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 800947c:	2b40      	cmp	r3, #64	; 0x40
 800947e:	d058      	beq.n	8009532 <HAL_TIM_ConfigClockSource+0x18a>
 8009480:	2b40      	cmp	r3, #64	; 0x40
 8009482:	d86f      	bhi.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009484:	2b30      	cmp	r3, #48	; 0x30
 8009486:	d064      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009488:	2b30      	cmp	r3, #48	; 0x30
 800948a:	d86b      	bhi.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 800948c:	2b20      	cmp	r3, #32
 800948e:	d060      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009490:	2b20      	cmp	r3, #32
 8009492:	d867      	bhi.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d05c      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 8009498:	2b10      	cmp	r3, #16
 800949a:	d05a      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0x1aa>
 800949c:	e062      	b.n	8009564 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6899      	ldr	r1, [r3, #8]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f000 fc89 	bl	8009dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	609a      	str	r2, [r3, #8]
      break;
 80094ca:	e04f      	b.n	800956c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	6899      	ldr	r1, [r3, #8]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f000 fc72 	bl	8009dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094ee:	609a      	str	r2, [r3, #8]
      break;
 80094f0:	e03c      	b.n	800956c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	6859      	ldr	r1, [r3, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	461a      	mov	r2, r3
 8009500:	f000 fbe2 	bl	8009cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2150      	movs	r1, #80	; 0x50
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fc3c 	bl	8009d88 <TIM_ITRx_SetConfig>
      break;
 8009510:	e02c      	b.n	800956c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6859      	ldr	r1, [r3, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	461a      	mov	r2, r3
 8009520:	f000 fc01 	bl	8009d26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2160      	movs	r1, #96	; 0x60
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fc2c 	bl	8009d88 <TIM_ITRx_SetConfig>
      break;
 8009530:	e01c      	b.n	800956c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6859      	ldr	r1, [r3, #4]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	461a      	mov	r2, r3
 8009540:	f000 fbc2 	bl	8009cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2140      	movs	r1, #64	; 0x40
 800954a:	4618      	mov	r0, r3
 800954c:	f000 fc1c 	bl	8009d88 <TIM_ITRx_SetConfig>
      break;
 8009550:	e00c      	b.n	800956c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4619      	mov	r1, r3
 800955c:	4610      	mov	r0, r2
 800955e:	f000 fc13 	bl	8009d88 <TIM_ITRx_SetConfig>
      break;
 8009562:	e003      	b.n	800956c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	73fb      	strb	r3, [r7, #15]
      break;
 8009568:	e000      	b.n	800956c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800956a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	ffceff88 	.word	0xffceff88
 800958c:	00100040 	.word	0x00100040
 8009590:	00100030 	.word	0x00100030
 8009594:	00100020 	.word	0x00100020

08009598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a40      	ldr	r2, [pc, #256]	; (80096fc <TIM_Base_SetConfig+0x114>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d013      	beq.n	8009628 <TIM_Base_SetConfig+0x40>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009606:	d00f      	beq.n	8009628 <TIM_Base_SetConfig+0x40>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a3d      	ldr	r2, [pc, #244]	; (8009700 <TIM_Base_SetConfig+0x118>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d00b      	beq.n	8009628 <TIM_Base_SetConfig+0x40>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a3c      	ldr	r2, [pc, #240]	; (8009704 <TIM_Base_SetConfig+0x11c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d007      	beq.n	8009628 <TIM_Base_SetConfig+0x40>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a3b      	ldr	r2, [pc, #236]	; (8009708 <TIM_Base_SetConfig+0x120>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_Base_SetConfig+0x40>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a3a      	ldr	r2, [pc, #232]	; (800970c <TIM_Base_SetConfig+0x124>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d108      	bne.n	800963a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800962e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a2f      	ldr	r2, [pc, #188]	; (80096fc <TIM_Base_SetConfig+0x114>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d01f      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009648:	d01b      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2c      	ldr	r2, [pc, #176]	; (8009700 <TIM_Base_SetConfig+0x118>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d017      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a2b      	ldr	r2, [pc, #172]	; (8009704 <TIM_Base_SetConfig+0x11c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d013      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a2a      	ldr	r2, [pc, #168]	; (8009708 <TIM_Base_SetConfig+0x120>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00f      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a29      	ldr	r2, [pc, #164]	; (800970c <TIM_Base_SetConfig+0x124>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00b      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a28      	ldr	r2, [pc, #160]	; (8009710 <TIM_Base_SetConfig+0x128>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d007      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a27      	ldr	r2, [pc, #156]	; (8009714 <TIM_Base_SetConfig+0x12c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d003      	beq.n	8009682 <TIM_Base_SetConfig+0x9a>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a26      	ldr	r2, [pc, #152]	; (8009718 <TIM_Base_SetConfig+0x130>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d108      	bne.n	8009694 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	4313      	orrs	r3, r2
 80096a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a10      	ldr	r2, [pc, #64]	; (80096fc <TIM_Base_SetConfig+0x114>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00f      	beq.n	80096e0 <TIM_Base_SetConfig+0xf8>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a12      	ldr	r2, [pc, #72]	; (800970c <TIM_Base_SetConfig+0x124>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00b      	beq.n	80096e0 <TIM_Base_SetConfig+0xf8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a11      	ldr	r2, [pc, #68]	; (8009710 <TIM_Base_SetConfig+0x128>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d007      	beq.n	80096e0 <TIM_Base_SetConfig+0xf8>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a10      	ldr	r2, [pc, #64]	; (8009714 <TIM_Base_SetConfig+0x12c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d003      	beq.n	80096e0 <TIM_Base_SetConfig+0xf8>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a0f      	ldr	r2, [pc, #60]	; (8009718 <TIM_Base_SetConfig+0x130>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d103      	bne.n	80096e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	615a      	str	r2, [r3, #20]
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40010000 	.word	0x40010000
 8009700:	40000400 	.word	0x40000400
 8009704:	40000800 	.word	0x40000800
 8009708:	40000c00 	.word	0x40000c00
 800970c:	40010400 	.word	0x40010400
 8009710:	40014000 	.word	0x40014000
 8009714:	40014400 	.word	0x40014400
 8009718:	40014800 	.word	0x40014800

0800971c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	f023 0201 	bic.w	r2, r3, #1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4b37      	ldr	r3, [pc, #220]	; (8009824 <TIM_OC1_SetConfig+0x108>)
 8009748:	4013      	ands	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f023 0302 	bic.w	r3, r3, #2
 8009764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	4313      	orrs	r3, r2
 800976e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a2d      	ldr	r2, [pc, #180]	; (8009828 <TIM_OC1_SetConfig+0x10c>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00f      	beq.n	8009798 <TIM_OC1_SetConfig+0x7c>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a2c      	ldr	r2, [pc, #176]	; (800982c <TIM_OC1_SetConfig+0x110>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00b      	beq.n	8009798 <TIM_OC1_SetConfig+0x7c>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a2b      	ldr	r2, [pc, #172]	; (8009830 <TIM_OC1_SetConfig+0x114>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d007      	beq.n	8009798 <TIM_OC1_SetConfig+0x7c>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a2a      	ldr	r2, [pc, #168]	; (8009834 <TIM_OC1_SetConfig+0x118>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d003      	beq.n	8009798 <TIM_OC1_SetConfig+0x7c>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a29      	ldr	r2, [pc, #164]	; (8009838 <TIM_OC1_SetConfig+0x11c>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d10c      	bne.n	80097b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f023 0308 	bic.w	r3, r3, #8
 800979e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f023 0304 	bic.w	r3, r3, #4
 80097b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a1c      	ldr	r2, [pc, #112]	; (8009828 <TIM_OC1_SetConfig+0x10c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00f      	beq.n	80097da <TIM_OC1_SetConfig+0xbe>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a1b      	ldr	r2, [pc, #108]	; (800982c <TIM_OC1_SetConfig+0x110>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d00b      	beq.n	80097da <TIM_OC1_SetConfig+0xbe>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a1a      	ldr	r2, [pc, #104]	; (8009830 <TIM_OC1_SetConfig+0x114>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d007      	beq.n	80097da <TIM_OC1_SetConfig+0xbe>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a19      	ldr	r2, [pc, #100]	; (8009834 <TIM_OC1_SetConfig+0x118>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d003      	beq.n	80097da <TIM_OC1_SetConfig+0xbe>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a18      	ldr	r2, [pc, #96]	; (8009838 <TIM_OC1_SetConfig+0x11c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d111      	bne.n	80097fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	621a      	str	r2, [r3, #32]
}
 8009818:	bf00      	nop
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	fffeff8f 	.word	0xfffeff8f
 8009828:	40010000 	.word	0x40010000
 800982c:	40010400 	.word	0x40010400
 8009830:	40014000 	.word	0x40014000
 8009834:	40014400 	.word	0x40014400
 8009838:	40014800 	.word	0x40014800

0800983c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	f023 0210 	bic.w	r2, r3, #16
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	4b34      	ldr	r3, [pc, #208]	; (8009938 <TIM_OC2_SetConfig+0xfc>)
 8009868:	4013      	ands	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	021b      	lsls	r3, r3, #8
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0320 	bic.w	r3, r3, #32
 8009886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	011b      	lsls	r3, r3, #4
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	4313      	orrs	r3, r2
 8009892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a29      	ldr	r2, [pc, #164]	; (800993c <TIM_OC2_SetConfig+0x100>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d003      	beq.n	80098a4 <TIM_OC2_SetConfig+0x68>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a28      	ldr	r2, [pc, #160]	; (8009940 <TIM_OC2_SetConfig+0x104>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d10d      	bne.n	80098c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a1e      	ldr	r2, [pc, #120]	; (800993c <TIM_OC2_SetConfig+0x100>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00f      	beq.n	80098e8 <TIM_OC2_SetConfig+0xac>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a1d      	ldr	r2, [pc, #116]	; (8009940 <TIM_OC2_SetConfig+0x104>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00b      	beq.n	80098e8 <TIM_OC2_SetConfig+0xac>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a1c      	ldr	r2, [pc, #112]	; (8009944 <TIM_OC2_SetConfig+0x108>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d007      	beq.n	80098e8 <TIM_OC2_SetConfig+0xac>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a1b      	ldr	r2, [pc, #108]	; (8009948 <TIM_OC2_SetConfig+0x10c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d003      	beq.n	80098e8 <TIM_OC2_SetConfig+0xac>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1a      	ldr	r2, [pc, #104]	; (800994c <TIM_OC2_SetConfig+0x110>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d113      	bne.n	8009910 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	feff8fff 	.word	0xfeff8fff
 800993c:	40010000 	.word	0x40010000
 8009940:	40010400 	.word	0x40010400
 8009944:	40014000 	.word	0x40014000
 8009948:	40014400 	.word	0x40014400
 800994c:	40014800 	.word	0x40014800

08009950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4b33      	ldr	r3, [pc, #204]	; (8009a48 <TIM_OC3_SetConfig+0xf8>)
 800997c:	4013      	ands	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4313      	orrs	r3, r2
 8009990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	021b      	lsls	r3, r3, #8
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a28      	ldr	r2, [pc, #160]	; (8009a4c <TIM_OC3_SetConfig+0xfc>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d003      	beq.n	80099b6 <TIM_OC3_SetConfig+0x66>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a27      	ldr	r2, [pc, #156]	; (8009a50 <TIM_OC3_SetConfig+0x100>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d10d      	bne.n	80099d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	021b      	lsls	r3, r3, #8
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a1d      	ldr	r2, [pc, #116]	; (8009a4c <TIM_OC3_SetConfig+0xfc>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d00f      	beq.n	80099fa <TIM_OC3_SetConfig+0xaa>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a1c      	ldr	r2, [pc, #112]	; (8009a50 <TIM_OC3_SetConfig+0x100>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00b      	beq.n	80099fa <TIM_OC3_SetConfig+0xaa>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a1b      	ldr	r2, [pc, #108]	; (8009a54 <TIM_OC3_SetConfig+0x104>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d007      	beq.n	80099fa <TIM_OC3_SetConfig+0xaa>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a1a      	ldr	r2, [pc, #104]	; (8009a58 <TIM_OC3_SetConfig+0x108>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d003      	beq.n	80099fa <TIM_OC3_SetConfig+0xaa>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a19      	ldr	r2, [pc, #100]	; (8009a5c <TIM_OC3_SetConfig+0x10c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d113      	bne.n	8009a22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	011b      	lsls	r3, r3, #4
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	621a      	str	r2, [r3, #32]
}
 8009a3c:	bf00      	nop
 8009a3e:	371c      	adds	r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	fffeff8f 	.word	0xfffeff8f
 8009a4c:	40010000 	.word	0x40010000
 8009a50:	40010400 	.word	0x40010400
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40014400 	.word	0x40014400
 8009a5c:	40014800 	.word	0x40014800

08009a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4b24      	ldr	r3, [pc, #144]	; (8009b1c <TIM_OC4_SetConfig+0xbc>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	021b      	lsls	r3, r3, #8
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	031b      	lsls	r3, r3, #12
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a19      	ldr	r2, [pc, #100]	; (8009b20 <TIM_OC4_SetConfig+0xc0>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d00f      	beq.n	8009ae0 <TIM_OC4_SetConfig+0x80>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a18      	ldr	r2, [pc, #96]	; (8009b24 <TIM_OC4_SetConfig+0xc4>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d00b      	beq.n	8009ae0 <TIM_OC4_SetConfig+0x80>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a17      	ldr	r2, [pc, #92]	; (8009b28 <TIM_OC4_SetConfig+0xc8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d007      	beq.n	8009ae0 <TIM_OC4_SetConfig+0x80>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a16      	ldr	r2, [pc, #88]	; (8009b2c <TIM_OC4_SetConfig+0xcc>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d003      	beq.n	8009ae0 <TIM_OC4_SetConfig+0x80>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a15      	ldr	r2, [pc, #84]	; (8009b30 <TIM_OC4_SetConfig+0xd0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d109      	bne.n	8009af4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	019b      	lsls	r3, r3, #6
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	621a      	str	r2, [r3, #32]
}
 8009b0e:	bf00      	nop
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	feff8fff 	.word	0xfeff8fff
 8009b20:	40010000 	.word	0x40010000
 8009b24:	40010400 	.word	0x40010400
 8009b28:	40014000 	.word	0x40014000
 8009b2c:	40014400 	.word	0x40014400
 8009b30:	40014800 	.word	0x40014800

08009b34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4b21      	ldr	r3, [pc, #132]	; (8009be4 <TIM_OC5_SetConfig+0xb0>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	041b      	lsls	r3, r3, #16
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <TIM_OC5_SetConfig+0xb4>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d00f      	beq.n	8009baa <TIM_OC5_SetConfig+0x76>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a17      	ldr	r2, [pc, #92]	; (8009bec <TIM_OC5_SetConfig+0xb8>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00b      	beq.n	8009baa <TIM_OC5_SetConfig+0x76>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a16      	ldr	r2, [pc, #88]	; (8009bf0 <TIM_OC5_SetConfig+0xbc>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d007      	beq.n	8009baa <TIM_OC5_SetConfig+0x76>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a15      	ldr	r2, [pc, #84]	; (8009bf4 <TIM_OC5_SetConfig+0xc0>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d003      	beq.n	8009baa <TIM_OC5_SetConfig+0x76>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a14      	ldr	r2, [pc, #80]	; (8009bf8 <TIM_OC5_SetConfig+0xc4>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d109      	bne.n	8009bbe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	021b      	lsls	r3, r3, #8
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	621a      	str	r2, [r3, #32]
}
 8009bd8:	bf00      	nop
 8009bda:	371c      	adds	r7, #28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	fffeff8f 	.word	0xfffeff8f
 8009be8:	40010000 	.word	0x40010000
 8009bec:	40010400 	.word	0x40010400
 8009bf0:	40014000 	.word	0x40014000
 8009bf4:	40014400 	.word	0x40014400
 8009bf8:	40014800 	.word	0x40014800

08009bfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	4b22      	ldr	r3, [pc, #136]	; (8009cb0 <TIM_OC6_SetConfig+0xb4>)
 8009c28:	4013      	ands	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	051b      	lsls	r3, r3, #20
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a19      	ldr	r2, [pc, #100]	; (8009cb4 <TIM_OC6_SetConfig+0xb8>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d00f      	beq.n	8009c74 <TIM_OC6_SetConfig+0x78>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a18      	ldr	r2, [pc, #96]	; (8009cb8 <TIM_OC6_SetConfig+0xbc>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00b      	beq.n	8009c74 <TIM_OC6_SetConfig+0x78>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <TIM_OC6_SetConfig+0xc0>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d007      	beq.n	8009c74 <TIM_OC6_SetConfig+0x78>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a16      	ldr	r2, [pc, #88]	; (8009cc0 <TIM_OC6_SetConfig+0xc4>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d003      	beq.n	8009c74 <TIM_OC6_SetConfig+0x78>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a15      	ldr	r2, [pc, #84]	; (8009cc4 <TIM_OC6_SetConfig+0xc8>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d109      	bne.n	8009c88 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	029b      	lsls	r3, r3, #10
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	621a      	str	r2, [r3, #32]
}
 8009ca2:	bf00      	nop
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	feff8fff 	.word	0xfeff8fff
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40010400 	.word	0x40010400
 8009cbc:	40014000 	.word	0x40014000
 8009cc0:	40014400 	.word	0x40014400
 8009cc4:	40014800 	.word	0x40014800

08009cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	f023 0201 	bic.w	r2, r3, #1
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f023 030a 	bic.w	r3, r3, #10
 8009d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	621a      	str	r2, [r3, #32]
}
 8009d1a:	bf00      	nop
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b087      	sub	sp, #28
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	f023 0210 	bic.w	r2, r3, #16
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6a1b      	ldr	r3, [r3, #32]
 8009d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	031b      	lsls	r3, r3, #12
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	621a      	str	r2, [r3, #32]
}
 8009d7a:	bf00      	nop
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <TIM_ITRx_SetConfig+0x38>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	f043 0307 	orr.w	r3, r3, #7
 8009daa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	609a      	str	r2, [r3, #8]
}
 8009db2:	bf00      	nop
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	ffcfff8f 	.word	0xffcfff8f

08009dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	021a      	lsls	r2, r3, #8
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	431a      	orrs	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	609a      	str	r2, [r3, #8]
}
 8009df8:	bf00      	nop
 8009dfa:	371c      	adds	r7, #28
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f003 031f 	and.w	r3, r3, #31
 8009e16:	2201      	movs	r2, #1
 8009e18:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6a1a      	ldr	r2, [r3, #32]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	43db      	mvns	r3, r3
 8009e26:	401a      	ands	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a1a      	ldr	r2, [r3, #32]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	621a      	str	r2, [r3, #32]
}
 8009e42:	bf00      	nop
 8009e44:	371c      	adds	r7, #28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
	...

08009e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e06d      	b.n	8009f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a30      	ldr	r2, [pc, #192]	; (8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d004      	beq.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a2f      	ldr	r2, [pc, #188]	; (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d108      	bne.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ea2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a20      	ldr	r2, [pc, #128]	; (8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d022      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eda:	d01d      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a1d      	ldr	r2, [pc, #116]	; (8009f58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d018      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a1c      	ldr	r2, [pc, #112]	; (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d013      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a1a      	ldr	r2, [pc, #104]	; (8009f60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00e      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a15      	ldr	r2, [pc, #84]	; (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d009      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a16      	ldr	r2, [pc, #88]	; (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d004      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a15      	ldr	r2, [pc, #84]	; (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d10c      	bne.n	8009f32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	40010000 	.word	0x40010000
 8009f54:	40010400 	.word	0x40010400
 8009f58:	40000400 	.word	0x40000400
 8009f5c:	40000800 	.word	0x40000800
 8009f60:	40000c00 	.word	0x40000c00
 8009f64:	40001800 	.word	0x40001800
 8009f68:	40014000 	.word	0x40014000

08009f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e042      	b.n	800a040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d106      	bne.n	8009fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7f8 fb43 	bl	8002658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2224      	movs	r2, #36	; 0x24
 8009fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0201 	bic.w	r2, r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f8c2 	bl	800a174 <UART_SetConfig>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e022      	b.n	800a040 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fe16 	bl	800ac34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0201 	orr.w	r2, r2, #1
 800a036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fe9d 	bl	800ad78 <UART_CheckIdleState>
 800a03e:	4603      	mov	r3, r0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08a      	sub	sp, #40	; 0x28
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	603b      	str	r3, [r7, #0]
 800a054:	4613      	mov	r3, r2
 800a056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a05e:	2b20      	cmp	r3, #32
 800a060:	f040 8083 	bne.w	800a16a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <HAL_UART_Transmit+0x28>
 800a06a:	88fb      	ldrh	r3, [r7, #6]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e07b      	b.n	800a16c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d101      	bne.n	800a082 <HAL_UART_Transmit+0x3a>
 800a07e:	2302      	movs	r3, #2
 800a080:	e074      	b.n	800a16c <HAL_UART_Transmit+0x124>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2221      	movs	r2, #33	; 0x21
 800a096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a09a:	f7f8 fd69 	bl	8002b70 <HAL_GetTick>
 800a09e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	88fa      	ldrh	r2, [r7, #6]
 800a0a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	88fa      	ldrh	r2, [r7, #6]
 800a0ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b8:	d108      	bne.n	800a0cc <HAL_UART_Transmit+0x84>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d104      	bne.n	800a0cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	e003      	b.n	800a0d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a0dc:	e02c      	b.n	800a138 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2180      	movs	r1, #128	; 0x80
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fe90 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e039      	b.n	800a16c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10b      	bne.n	800a116 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a10c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	3302      	adds	r3, #2
 800a112:	61bb      	str	r3, [r7, #24]
 800a114:	e007      	b.n	800a126 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	781a      	ldrb	r2, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	3301      	adds	r3, #1
 800a124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a13e:	b29b      	uxth	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1cc      	bne.n	800a0de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2200      	movs	r2, #0
 800a14c:	2140      	movs	r1, #64	; 0x40
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 fe5d 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e006      	b.n	800a16c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2220      	movs	r2, #32
 800a162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	e000      	b.n	800a16c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a16a:	2302      	movs	r3, #2
  }
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3720      	adds	r7, #32
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a174:	b5b0      	push	{r4, r5, r7, lr}
 800a176:	b08e      	sub	sp, #56	; 0x38
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	431a      	orrs	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	431a      	orrs	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	4313      	orrs	r3, r2
 800a198:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	4bbf      	ldr	r3, [pc, #764]	; (800a4a0 <UART_SetConfig+0x32c>)
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	6812      	ldr	r2, [r2, #0]
 800a1a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1aa:	430b      	orrs	r3, r1
 800a1ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4ab5      	ldr	r2, [pc, #724]	; (800a4a4 <UART_SetConfig+0x330>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d004      	beq.n	800a1de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	4bb0      	ldr	r3, [pc, #704]	; (800a4a8 <UART_SetConfig+0x334>)
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	6812      	ldr	r2, [r2, #0]
 800a1ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1ee:	430b      	orrs	r3, r1
 800a1f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	f023 010f 	bic.w	r1, r3, #15
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4aa7      	ldr	r2, [pc, #668]	; (800a4ac <UART_SetConfig+0x338>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d176      	bne.n	800a300 <UART_SetConfig+0x18c>
 800a212:	4ba7      	ldr	r3, [pc, #668]	; (800a4b0 <UART_SetConfig+0x33c>)
 800a214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a21a:	2b28      	cmp	r3, #40	; 0x28
 800a21c:	d86c      	bhi.n	800a2f8 <UART_SetConfig+0x184>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <UART_SetConfig+0xb0>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a2c9 	.word	0x0800a2c9
 800a228:	0800a2f9 	.word	0x0800a2f9
 800a22c:	0800a2f9 	.word	0x0800a2f9
 800a230:	0800a2f9 	.word	0x0800a2f9
 800a234:	0800a2f9 	.word	0x0800a2f9
 800a238:	0800a2f9 	.word	0x0800a2f9
 800a23c:	0800a2f9 	.word	0x0800a2f9
 800a240:	0800a2f9 	.word	0x0800a2f9
 800a244:	0800a2d1 	.word	0x0800a2d1
 800a248:	0800a2f9 	.word	0x0800a2f9
 800a24c:	0800a2f9 	.word	0x0800a2f9
 800a250:	0800a2f9 	.word	0x0800a2f9
 800a254:	0800a2f9 	.word	0x0800a2f9
 800a258:	0800a2f9 	.word	0x0800a2f9
 800a25c:	0800a2f9 	.word	0x0800a2f9
 800a260:	0800a2f9 	.word	0x0800a2f9
 800a264:	0800a2d9 	.word	0x0800a2d9
 800a268:	0800a2f9 	.word	0x0800a2f9
 800a26c:	0800a2f9 	.word	0x0800a2f9
 800a270:	0800a2f9 	.word	0x0800a2f9
 800a274:	0800a2f9 	.word	0x0800a2f9
 800a278:	0800a2f9 	.word	0x0800a2f9
 800a27c:	0800a2f9 	.word	0x0800a2f9
 800a280:	0800a2f9 	.word	0x0800a2f9
 800a284:	0800a2e1 	.word	0x0800a2e1
 800a288:	0800a2f9 	.word	0x0800a2f9
 800a28c:	0800a2f9 	.word	0x0800a2f9
 800a290:	0800a2f9 	.word	0x0800a2f9
 800a294:	0800a2f9 	.word	0x0800a2f9
 800a298:	0800a2f9 	.word	0x0800a2f9
 800a29c:	0800a2f9 	.word	0x0800a2f9
 800a2a0:	0800a2f9 	.word	0x0800a2f9
 800a2a4:	0800a2e9 	.word	0x0800a2e9
 800a2a8:	0800a2f9 	.word	0x0800a2f9
 800a2ac:	0800a2f9 	.word	0x0800a2f9
 800a2b0:	0800a2f9 	.word	0x0800a2f9
 800a2b4:	0800a2f9 	.word	0x0800a2f9
 800a2b8:	0800a2f9 	.word	0x0800a2f9
 800a2bc:	0800a2f9 	.word	0x0800a2f9
 800a2c0:	0800a2f9 	.word	0x0800a2f9
 800a2c4:	0800a2f1 	.word	0x0800a2f1
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e222      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a2d0:	2304      	movs	r3, #4
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	e21e      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a2d8:	2308      	movs	r3, #8
 800a2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2de:	e21a      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a2e0:	2310      	movs	r3, #16
 800a2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e6:	e216      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a2e8:	2320      	movs	r3, #32
 800a2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ee:	e212      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a2f0:	2340      	movs	r3, #64	; 0x40
 800a2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f6:	e20e      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a2f8:	2380      	movs	r3, #128	; 0x80
 800a2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fe:	e20a      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a6b      	ldr	r2, [pc, #428]	; (800a4b4 <UART_SetConfig+0x340>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d130      	bne.n	800a36c <UART_SetConfig+0x1f8>
 800a30a:	4b69      	ldr	r3, [pc, #420]	; (800a4b0 <UART_SetConfig+0x33c>)
 800a30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30e:	f003 0307 	and.w	r3, r3, #7
 800a312:	2b05      	cmp	r3, #5
 800a314:	d826      	bhi.n	800a364 <UART_SetConfig+0x1f0>
 800a316:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <UART_SetConfig+0x1a8>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a335 	.word	0x0800a335
 800a320:	0800a33d 	.word	0x0800a33d
 800a324:	0800a345 	.word	0x0800a345
 800a328:	0800a34d 	.word	0x0800a34d
 800a32c:	0800a355 	.word	0x0800a355
 800a330:	0800a35d 	.word	0x0800a35d
 800a334:	2300      	movs	r3, #0
 800a336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33a:	e1ec      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a33c:	2304      	movs	r3, #4
 800a33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a342:	e1e8      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a344:	2308      	movs	r3, #8
 800a346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34a:	e1e4      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a34c:	2310      	movs	r3, #16
 800a34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a352:	e1e0      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a354:	2320      	movs	r3, #32
 800a356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a35a:	e1dc      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a35c:	2340      	movs	r3, #64	; 0x40
 800a35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a362:	e1d8      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a364:	2380      	movs	r3, #128	; 0x80
 800a366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36a:	e1d4      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a51      	ldr	r2, [pc, #324]	; (800a4b8 <UART_SetConfig+0x344>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d130      	bne.n	800a3d8 <UART_SetConfig+0x264>
 800a376:	4b4e      	ldr	r3, [pc, #312]	; (800a4b0 <UART_SetConfig+0x33c>)
 800a378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	2b05      	cmp	r3, #5
 800a380:	d826      	bhi.n	800a3d0 <UART_SetConfig+0x25c>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <UART_SetConfig+0x214>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3a1 	.word	0x0800a3a1
 800a38c:	0800a3a9 	.word	0x0800a3a9
 800a390:	0800a3b1 	.word	0x0800a3b1
 800a394:	0800a3b9 	.word	0x0800a3b9
 800a398:	0800a3c1 	.word	0x0800a3c1
 800a39c:	0800a3c9 	.word	0x0800a3c9
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a6:	e1b6      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a3a8:	2304      	movs	r3, #4
 800a3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ae:	e1b2      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b6:	e1ae      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a3b8:	2310      	movs	r3, #16
 800a3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3be:	e1aa      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a3c0:	2320      	movs	r3, #32
 800a3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c6:	e1a6      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a3c8:	2340      	movs	r3, #64	; 0x40
 800a3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ce:	e1a2      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a3d0:	2380      	movs	r3, #128	; 0x80
 800a3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d6:	e19e      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a37      	ldr	r2, [pc, #220]	; (800a4bc <UART_SetConfig+0x348>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d130      	bne.n	800a444 <UART_SetConfig+0x2d0>
 800a3e2:	4b33      	ldr	r3, [pc, #204]	; (800a4b0 <UART_SetConfig+0x33c>)
 800a3e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	2b05      	cmp	r3, #5
 800a3ec:	d826      	bhi.n	800a43c <UART_SetConfig+0x2c8>
 800a3ee:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <UART_SetConfig+0x280>)
 800a3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f4:	0800a40d 	.word	0x0800a40d
 800a3f8:	0800a415 	.word	0x0800a415
 800a3fc:	0800a41d 	.word	0x0800a41d
 800a400:	0800a425 	.word	0x0800a425
 800a404:	0800a42d 	.word	0x0800a42d
 800a408:	0800a435 	.word	0x0800a435
 800a40c:	2300      	movs	r3, #0
 800a40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a412:	e180      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a414:	2304      	movs	r3, #4
 800a416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41a:	e17c      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a41c:	2308      	movs	r3, #8
 800a41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a422:	e178      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a424:	2310      	movs	r3, #16
 800a426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42a:	e174      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a42c:	2320      	movs	r3, #32
 800a42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a432:	e170      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a434:	2340      	movs	r3, #64	; 0x40
 800a436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43a:	e16c      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a43c:	2380      	movs	r3, #128	; 0x80
 800a43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a442:	e168      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a1d      	ldr	r2, [pc, #116]	; (800a4c0 <UART_SetConfig+0x34c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d142      	bne.n	800a4d4 <UART_SetConfig+0x360>
 800a44e:	4b18      	ldr	r3, [pc, #96]	; (800a4b0 <UART_SetConfig+0x33c>)
 800a450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	2b05      	cmp	r3, #5
 800a458:	d838      	bhi.n	800a4cc <UART_SetConfig+0x358>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <UART_SetConfig+0x2ec>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a479 	.word	0x0800a479
 800a464:	0800a481 	.word	0x0800a481
 800a468:	0800a489 	.word	0x0800a489
 800a46c:	0800a491 	.word	0x0800a491
 800a470:	0800a499 	.word	0x0800a499
 800a474:	0800a4c5 	.word	0x0800a4c5
 800a478:	2300      	movs	r3, #0
 800a47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47e:	e14a      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a480:	2304      	movs	r3, #4
 800a482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a486:	e146      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a488:	2308      	movs	r3, #8
 800a48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48e:	e142      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a490:	2310      	movs	r3, #16
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e13e      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a498:	2320      	movs	r3, #32
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e13a      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a4a0:	cfff69f3 	.word	0xcfff69f3
 800a4a4:	58000c00 	.word	0x58000c00
 800a4a8:	11fff4ff 	.word	0x11fff4ff
 800a4ac:	40011000 	.word	0x40011000
 800a4b0:	58024400 	.word	0x58024400
 800a4b4:	40004400 	.word	0x40004400
 800a4b8:	40004800 	.word	0x40004800
 800a4bc:	40004c00 	.word	0x40004c00
 800a4c0:	40005000 	.word	0x40005000
 800a4c4:	2340      	movs	r3, #64	; 0x40
 800a4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ca:	e124      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a4cc:	2380      	movs	r3, #128	; 0x80
 800a4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d2:	e120      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4acc      	ldr	r2, [pc, #816]	; (800a80c <UART_SetConfig+0x698>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d176      	bne.n	800a5cc <UART_SetConfig+0x458>
 800a4de:	4bcc      	ldr	r3, [pc, #816]	; (800a810 <UART_SetConfig+0x69c>)
 800a4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4e6:	2b28      	cmp	r3, #40	; 0x28
 800a4e8:	d86c      	bhi.n	800a5c4 <UART_SetConfig+0x450>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <UART_SetConfig+0x37c>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a595 	.word	0x0800a595
 800a4f4:	0800a5c5 	.word	0x0800a5c5
 800a4f8:	0800a5c5 	.word	0x0800a5c5
 800a4fc:	0800a5c5 	.word	0x0800a5c5
 800a500:	0800a5c5 	.word	0x0800a5c5
 800a504:	0800a5c5 	.word	0x0800a5c5
 800a508:	0800a5c5 	.word	0x0800a5c5
 800a50c:	0800a5c5 	.word	0x0800a5c5
 800a510:	0800a59d 	.word	0x0800a59d
 800a514:	0800a5c5 	.word	0x0800a5c5
 800a518:	0800a5c5 	.word	0x0800a5c5
 800a51c:	0800a5c5 	.word	0x0800a5c5
 800a520:	0800a5c5 	.word	0x0800a5c5
 800a524:	0800a5c5 	.word	0x0800a5c5
 800a528:	0800a5c5 	.word	0x0800a5c5
 800a52c:	0800a5c5 	.word	0x0800a5c5
 800a530:	0800a5a5 	.word	0x0800a5a5
 800a534:	0800a5c5 	.word	0x0800a5c5
 800a538:	0800a5c5 	.word	0x0800a5c5
 800a53c:	0800a5c5 	.word	0x0800a5c5
 800a540:	0800a5c5 	.word	0x0800a5c5
 800a544:	0800a5c5 	.word	0x0800a5c5
 800a548:	0800a5c5 	.word	0x0800a5c5
 800a54c:	0800a5c5 	.word	0x0800a5c5
 800a550:	0800a5ad 	.word	0x0800a5ad
 800a554:	0800a5c5 	.word	0x0800a5c5
 800a558:	0800a5c5 	.word	0x0800a5c5
 800a55c:	0800a5c5 	.word	0x0800a5c5
 800a560:	0800a5c5 	.word	0x0800a5c5
 800a564:	0800a5c5 	.word	0x0800a5c5
 800a568:	0800a5c5 	.word	0x0800a5c5
 800a56c:	0800a5c5 	.word	0x0800a5c5
 800a570:	0800a5b5 	.word	0x0800a5b5
 800a574:	0800a5c5 	.word	0x0800a5c5
 800a578:	0800a5c5 	.word	0x0800a5c5
 800a57c:	0800a5c5 	.word	0x0800a5c5
 800a580:	0800a5c5 	.word	0x0800a5c5
 800a584:	0800a5c5 	.word	0x0800a5c5
 800a588:	0800a5c5 	.word	0x0800a5c5
 800a58c:	0800a5c5 	.word	0x0800a5c5
 800a590:	0800a5bd 	.word	0x0800a5bd
 800a594:	2301      	movs	r3, #1
 800a596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59a:	e0bc      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a59c:	2304      	movs	r3, #4
 800a59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a2:	e0b8      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a5a4:	2308      	movs	r3, #8
 800a5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5aa:	e0b4      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a5ac:	2310      	movs	r3, #16
 800a5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b2:	e0b0      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a5b4:	2320      	movs	r3, #32
 800a5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ba:	e0ac      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a5bc:	2340      	movs	r3, #64	; 0x40
 800a5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c2:	e0a8      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a5c4:	2380      	movs	r3, #128	; 0x80
 800a5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ca:	e0a4      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a90      	ldr	r2, [pc, #576]	; (800a814 <UART_SetConfig+0x6a0>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d130      	bne.n	800a638 <UART_SetConfig+0x4c4>
 800a5d6:	4b8e      	ldr	r3, [pc, #568]	; (800a810 <UART_SetConfig+0x69c>)
 800a5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d826      	bhi.n	800a630 <UART_SetConfig+0x4bc>
 800a5e2:	a201      	add	r2, pc, #4	; (adr r2, 800a5e8 <UART_SetConfig+0x474>)
 800a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e8:	0800a601 	.word	0x0800a601
 800a5ec:	0800a609 	.word	0x0800a609
 800a5f0:	0800a611 	.word	0x0800a611
 800a5f4:	0800a619 	.word	0x0800a619
 800a5f8:	0800a621 	.word	0x0800a621
 800a5fc:	0800a629 	.word	0x0800a629
 800a600:	2300      	movs	r3, #0
 800a602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a606:	e086      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a608:	2304      	movs	r3, #4
 800a60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60e:	e082      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a610:	2308      	movs	r3, #8
 800a612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a616:	e07e      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a618:	2310      	movs	r3, #16
 800a61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61e:	e07a      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a620:	2320      	movs	r3, #32
 800a622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a626:	e076      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a628:	2340      	movs	r3, #64	; 0x40
 800a62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62e:	e072      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a636:	e06e      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a76      	ldr	r2, [pc, #472]	; (800a818 <UART_SetConfig+0x6a4>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d130      	bne.n	800a6a4 <UART_SetConfig+0x530>
 800a642:	4b73      	ldr	r3, [pc, #460]	; (800a810 <UART_SetConfig+0x69c>)
 800a644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b05      	cmp	r3, #5
 800a64c:	d826      	bhi.n	800a69c <UART_SetConfig+0x528>
 800a64e:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <UART_SetConfig+0x4e0>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a66d 	.word	0x0800a66d
 800a658:	0800a675 	.word	0x0800a675
 800a65c:	0800a67d 	.word	0x0800a67d
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a68d 	.word	0x0800a68d
 800a668:	0800a695 	.word	0x0800a695
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a672:	e050      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a674:	2304      	movs	r3, #4
 800a676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67a:	e04c      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a67c:	2308      	movs	r3, #8
 800a67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a682:	e048      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a684:	2310      	movs	r3, #16
 800a686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68a:	e044      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a68c:	2320      	movs	r3, #32
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e040      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a694:	2340      	movs	r3, #64	; 0x40
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e03c      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a69c:	2380      	movs	r3, #128	; 0x80
 800a69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a2:	e038      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a5c      	ldr	r2, [pc, #368]	; (800a81c <UART_SetConfig+0x6a8>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d130      	bne.n	800a710 <UART_SetConfig+0x59c>
 800a6ae:	4b58      	ldr	r3, [pc, #352]	; (800a810 <UART_SetConfig+0x69c>)
 800a6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d826      	bhi.n	800a708 <UART_SetConfig+0x594>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <UART_SetConfig+0x54c>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d9 	.word	0x0800a6d9
 800a6c4:	0800a6e1 	.word	0x0800a6e1
 800a6c8:	0800a6e9 	.word	0x0800a6e9
 800a6cc:	0800a6f1 	.word	0x0800a6f1
 800a6d0:	0800a6f9 	.word	0x0800a6f9
 800a6d4:	0800a701 	.word	0x0800a701
 800a6d8:	2302      	movs	r3, #2
 800a6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6de:	e01a      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a6e0:	2304      	movs	r3, #4
 800a6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e6:	e016      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a6e8:	2308      	movs	r3, #8
 800a6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ee:	e012      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a6f0:	2310      	movs	r3, #16
 800a6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f6:	e00e      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a6f8:	2320      	movs	r3, #32
 800a6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fe:	e00a      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a700:	2340      	movs	r3, #64	; 0x40
 800a702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a706:	e006      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a708:	2380      	movs	r3, #128	; 0x80
 800a70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70e:	e002      	b.n	800a716 <UART_SetConfig+0x5a2>
 800a710:	2380      	movs	r3, #128	; 0x80
 800a712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a40      	ldr	r2, [pc, #256]	; (800a81c <UART_SetConfig+0x6a8>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	f040 80ef 	bne.w	800a900 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a726:	2b20      	cmp	r3, #32
 800a728:	dc46      	bgt.n	800a7b8 <UART_SetConfig+0x644>
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	f2c0 8081 	blt.w	800a832 <UART_SetConfig+0x6be>
 800a730:	3b02      	subs	r3, #2
 800a732:	2b1e      	cmp	r3, #30
 800a734:	d87d      	bhi.n	800a832 <UART_SetConfig+0x6be>
 800a736:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <UART_SetConfig+0x5c8>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a7bf 	.word	0x0800a7bf
 800a740:	0800a833 	.word	0x0800a833
 800a744:	0800a7c7 	.word	0x0800a7c7
 800a748:	0800a833 	.word	0x0800a833
 800a74c:	0800a833 	.word	0x0800a833
 800a750:	0800a833 	.word	0x0800a833
 800a754:	0800a7d7 	.word	0x0800a7d7
 800a758:	0800a833 	.word	0x0800a833
 800a75c:	0800a833 	.word	0x0800a833
 800a760:	0800a833 	.word	0x0800a833
 800a764:	0800a833 	.word	0x0800a833
 800a768:	0800a833 	.word	0x0800a833
 800a76c:	0800a833 	.word	0x0800a833
 800a770:	0800a833 	.word	0x0800a833
 800a774:	0800a7e7 	.word	0x0800a7e7
 800a778:	0800a833 	.word	0x0800a833
 800a77c:	0800a833 	.word	0x0800a833
 800a780:	0800a833 	.word	0x0800a833
 800a784:	0800a833 	.word	0x0800a833
 800a788:	0800a833 	.word	0x0800a833
 800a78c:	0800a833 	.word	0x0800a833
 800a790:	0800a833 	.word	0x0800a833
 800a794:	0800a833 	.word	0x0800a833
 800a798:	0800a833 	.word	0x0800a833
 800a79c:	0800a833 	.word	0x0800a833
 800a7a0:	0800a833 	.word	0x0800a833
 800a7a4:	0800a833 	.word	0x0800a833
 800a7a8:	0800a833 	.word	0x0800a833
 800a7ac:	0800a833 	.word	0x0800a833
 800a7b0:	0800a833 	.word	0x0800a833
 800a7b4:	0800a825 	.word	0x0800a825
 800a7b8:	2b40      	cmp	r3, #64	; 0x40
 800a7ba:	d036      	beq.n	800a82a <UART_SetConfig+0x6b6>
 800a7bc:	e039      	b.n	800a832 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a7be:	f7fd fad7 	bl	8007d70 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a7c4:	e03b      	b.n	800a83e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c6:	f107 0314 	add.w	r3, r7, #20
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fd fae6 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7d4:	e033      	b.n	800a83e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7d6:	f107 0308 	add.w	r3, r7, #8
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fd fc32 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7e4:	e02b      	b.n	800a83e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7e6:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <UART_SetConfig+0x69c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0320 	and.w	r3, r3, #32
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7f2:	4b07      	ldr	r3, [pc, #28]	; (800a810 <UART_SetConfig+0x69c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	08db      	lsrs	r3, r3, #3
 800a7f8:	f003 0303 	and.w	r3, r3, #3
 800a7fc:	4a08      	ldr	r2, [pc, #32]	; (800a820 <UART_SetConfig+0x6ac>)
 800a7fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a804:	e01b      	b.n	800a83e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <UART_SetConfig+0x6ac>)
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a80a:	e018      	b.n	800a83e <UART_SetConfig+0x6ca>
 800a80c:	40011400 	.word	0x40011400
 800a810:	58024400 	.word	0x58024400
 800a814:	40007800 	.word	0x40007800
 800a818:	40007c00 	.word	0x40007c00
 800a81c:	58000c00 	.word	0x58000c00
 800a820:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a824:	4bc4      	ldr	r3, [pc, #784]	; (800ab38 <UART_SetConfig+0x9c4>)
 800a826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a828:	e009      	b.n	800a83e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a82a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a830:	e005      	b.n	800a83e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a83c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 81da 	beq.w	800abfa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	4abc      	ldr	r2, [pc, #752]	; (800ab3c <UART_SetConfig+0x9c8>)
 800a84c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a850:	461a      	mov	r2, r3
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	fbb3 f3f2 	udiv	r3, r3, r2
 800a858:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	4413      	add	r3, r2
 800a864:	6a3a      	ldr	r2, [r7, #32]
 800a866:	429a      	cmp	r2, r3
 800a868:	d305      	bcc.n	800a876 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a870:	6a3a      	ldr	r2, [r7, #32]
 800a872:	429a      	cmp	r2, r3
 800a874:	d903      	bls.n	800a87e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a87c:	e1bd      	b.n	800abfa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	4618      	mov	r0, r3
 800a882:	f04f 0100 	mov.w	r1, #0
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	4aac      	ldr	r2, [pc, #688]	; (800ab3c <UART_SetConfig+0x9c8>)
 800a88c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a890:	b29a      	uxth	r2, r3
 800a892:	f04f 0300 	mov.w	r3, #0
 800a896:	f7f5 fd7b 	bl	8000390 <__aeabi_uldivmod>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	f04f 0300 	mov.w	r3, #0
 800a8aa:	020b      	lsls	r3, r1, #8
 800a8ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8b0:	0202      	lsls	r2, r0, #8
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	6849      	ldr	r1, [r1, #4]
 800a8b6:	0849      	lsrs	r1, r1, #1
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	f04f 0100 	mov.w	r1, #0
 800a8be:	1814      	adds	r4, r2, r0
 800a8c0:	eb43 0501 	adc.w	r5, r3, r1
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f04f 0300 	mov.w	r3, #0
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fd5d 	bl	8000390 <__aeabi_uldivmod>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4613      	mov	r3, r2
 800a8dc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8e4:	d308      	bcc.n	800a8f8 <UART_SetConfig+0x784>
 800a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ec:	d204      	bcs.n	800a8f8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	e180      	b.n	800abfa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a8fe:	e17c      	b.n	800abfa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a908:	f040 80be 	bne.w	800aa88 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a90c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a910:	2b20      	cmp	r3, #32
 800a912:	dc49      	bgt.n	800a9a8 <UART_SetConfig+0x834>
 800a914:	2b00      	cmp	r3, #0
 800a916:	db7c      	blt.n	800aa12 <UART_SetConfig+0x89e>
 800a918:	2b20      	cmp	r3, #32
 800a91a:	d87a      	bhi.n	800aa12 <UART_SetConfig+0x89e>
 800a91c:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <UART_SetConfig+0x7b0>)
 800a91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a922:	bf00      	nop
 800a924:	0800a9af 	.word	0x0800a9af
 800a928:	0800a9b7 	.word	0x0800a9b7
 800a92c:	0800aa13 	.word	0x0800aa13
 800a930:	0800aa13 	.word	0x0800aa13
 800a934:	0800a9bf 	.word	0x0800a9bf
 800a938:	0800aa13 	.word	0x0800aa13
 800a93c:	0800aa13 	.word	0x0800aa13
 800a940:	0800aa13 	.word	0x0800aa13
 800a944:	0800a9cf 	.word	0x0800a9cf
 800a948:	0800aa13 	.word	0x0800aa13
 800a94c:	0800aa13 	.word	0x0800aa13
 800a950:	0800aa13 	.word	0x0800aa13
 800a954:	0800aa13 	.word	0x0800aa13
 800a958:	0800aa13 	.word	0x0800aa13
 800a95c:	0800aa13 	.word	0x0800aa13
 800a960:	0800aa13 	.word	0x0800aa13
 800a964:	0800a9df 	.word	0x0800a9df
 800a968:	0800aa13 	.word	0x0800aa13
 800a96c:	0800aa13 	.word	0x0800aa13
 800a970:	0800aa13 	.word	0x0800aa13
 800a974:	0800aa13 	.word	0x0800aa13
 800a978:	0800aa13 	.word	0x0800aa13
 800a97c:	0800aa13 	.word	0x0800aa13
 800a980:	0800aa13 	.word	0x0800aa13
 800a984:	0800aa13 	.word	0x0800aa13
 800a988:	0800aa13 	.word	0x0800aa13
 800a98c:	0800aa13 	.word	0x0800aa13
 800a990:	0800aa13 	.word	0x0800aa13
 800a994:	0800aa13 	.word	0x0800aa13
 800a998:	0800aa13 	.word	0x0800aa13
 800a99c:	0800aa13 	.word	0x0800aa13
 800a9a0:	0800aa13 	.word	0x0800aa13
 800a9a4:	0800aa05 	.word	0x0800aa05
 800a9a8:	2b40      	cmp	r3, #64	; 0x40
 800a9aa:	d02e      	beq.n	800aa0a <UART_SetConfig+0x896>
 800a9ac:	e031      	b.n	800aa12 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9ae:	f7fb fda1 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 800a9b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a9b4:	e033      	b.n	800aa1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9b6:	f7fb fdb3 	bl	8006520 <HAL_RCC_GetPCLK2Freq>
 800a9ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a9bc:	e02f      	b.n	800aa1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9be:	f107 0314 	add.w	r3, r7, #20
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fd f9ea 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9cc:	e027      	b.n	800aa1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fd fb36 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9dc:	e01f      	b.n	800aa1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9de:	4b58      	ldr	r3, [pc, #352]	; (800ab40 <UART_SetConfig+0x9cc>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d009      	beq.n	800a9fe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9ea:	4b55      	ldr	r3, [pc, #340]	; (800ab40 <UART_SetConfig+0x9cc>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	08db      	lsrs	r3, r3, #3
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	4a53      	ldr	r2, [pc, #332]	; (800ab44 <UART_SetConfig+0x9d0>)
 800a9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9fc:	e00f      	b.n	800aa1e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a9fe:	4b51      	ldr	r3, [pc, #324]	; (800ab44 <UART_SetConfig+0x9d0>)
 800aa00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa02:	e00c      	b.n	800aa1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa04:	4b4c      	ldr	r3, [pc, #304]	; (800ab38 <UART_SetConfig+0x9c4>)
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa08:	e009      	b.n	800aa1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa10:	e005      	b.n	800aa1e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 80ea 	beq.w	800abfa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	4a44      	ldr	r2, [pc, #272]	; (800ab3c <UART_SetConfig+0x9c8>)
 800aa2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa30:	461a      	mov	r2, r3
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa38:	005a      	lsls	r2, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	441a      	add	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa4a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	2b0f      	cmp	r3, #15
 800aa50:	d916      	bls.n	800aa80 <UART_SetConfig+0x90c>
 800aa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa58:	d212      	bcs.n	800aa80 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	f023 030f 	bic.w	r3, r3, #15
 800aa62:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	085b      	lsrs	r3, r3, #1
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa72:	4313      	orrs	r3, r2
 800aa74:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa7c:	60da      	str	r2, [r3, #12]
 800aa7e:	e0bc      	b.n	800abfa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa86:	e0b8      	b.n	800abfa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa8c:	2b20      	cmp	r3, #32
 800aa8e:	dc4b      	bgt.n	800ab28 <UART_SetConfig+0x9b4>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f2c0 8087 	blt.w	800aba4 <UART_SetConfig+0xa30>
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	f200 8084 	bhi.w	800aba4 <UART_SetConfig+0xa30>
 800aa9c:	a201      	add	r2, pc, #4	; (adr r2, 800aaa4 <UART_SetConfig+0x930>)
 800aa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa2:	bf00      	nop
 800aaa4:	0800ab2f 	.word	0x0800ab2f
 800aaa8:	0800ab49 	.word	0x0800ab49
 800aaac:	0800aba5 	.word	0x0800aba5
 800aab0:	0800aba5 	.word	0x0800aba5
 800aab4:	0800ab51 	.word	0x0800ab51
 800aab8:	0800aba5 	.word	0x0800aba5
 800aabc:	0800aba5 	.word	0x0800aba5
 800aac0:	0800aba5 	.word	0x0800aba5
 800aac4:	0800ab61 	.word	0x0800ab61
 800aac8:	0800aba5 	.word	0x0800aba5
 800aacc:	0800aba5 	.word	0x0800aba5
 800aad0:	0800aba5 	.word	0x0800aba5
 800aad4:	0800aba5 	.word	0x0800aba5
 800aad8:	0800aba5 	.word	0x0800aba5
 800aadc:	0800aba5 	.word	0x0800aba5
 800aae0:	0800aba5 	.word	0x0800aba5
 800aae4:	0800ab71 	.word	0x0800ab71
 800aae8:	0800aba5 	.word	0x0800aba5
 800aaec:	0800aba5 	.word	0x0800aba5
 800aaf0:	0800aba5 	.word	0x0800aba5
 800aaf4:	0800aba5 	.word	0x0800aba5
 800aaf8:	0800aba5 	.word	0x0800aba5
 800aafc:	0800aba5 	.word	0x0800aba5
 800ab00:	0800aba5 	.word	0x0800aba5
 800ab04:	0800aba5 	.word	0x0800aba5
 800ab08:	0800aba5 	.word	0x0800aba5
 800ab0c:	0800aba5 	.word	0x0800aba5
 800ab10:	0800aba5 	.word	0x0800aba5
 800ab14:	0800aba5 	.word	0x0800aba5
 800ab18:	0800aba5 	.word	0x0800aba5
 800ab1c:	0800aba5 	.word	0x0800aba5
 800ab20:	0800aba5 	.word	0x0800aba5
 800ab24:	0800ab97 	.word	0x0800ab97
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d037      	beq.n	800ab9c <UART_SetConfig+0xa28>
 800ab2c:	e03a      	b.n	800aba4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab2e:	f7fb fce1 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 800ab32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab34:	e03c      	b.n	800abb0 <UART_SetConfig+0xa3c>
 800ab36:	bf00      	nop
 800ab38:	003d0900 	.word	0x003d0900
 800ab3c:	0800c968 	.word	0x0800c968
 800ab40:	58024400 	.word	0x58024400
 800ab44:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab48:	f7fb fcea 	bl	8006520 <HAL_RCC_GetPCLK2Freq>
 800ab4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab4e:	e02f      	b.n	800abb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab50:	f107 0314 	add.w	r3, r7, #20
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fd f921 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab5e:	e027      	b.n	800abb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab60:	f107 0308 	add.w	r3, r7, #8
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fd fa6d 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab6e:	e01f      	b.n	800abb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab70:	4b2c      	ldr	r3, [pc, #176]	; (800ac24 <UART_SetConfig+0xab0>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0320 	and.w	r3, r3, #32
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d009      	beq.n	800ab90 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab7c:	4b29      	ldr	r3, [pc, #164]	; (800ac24 <UART_SetConfig+0xab0>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	08db      	lsrs	r3, r3, #3
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	4a28      	ldr	r2, [pc, #160]	; (800ac28 <UART_SetConfig+0xab4>)
 800ab88:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab8e:	e00f      	b.n	800abb0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ab90:	4b25      	ldr	r3, [pc, #148]	; (800ac28 <UART_SetConfig+0xab4>)
 800ab92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab94:	e00c      	b.n	800abb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab96:	4b25      	ldr	r3, [pc, #148]	; (800ac2c <UART_SetConfig+0xab8>)
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab9a:	e009      	b.n	800abb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aba2:	e005      	b.n	800abb0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800abae:	bf00      	nop
    }

    if (pclk != 0U)
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d021      	beq.n	800abfa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	4a1d      	ldr	r2, [pc, #116]	; (800ac30 <UART_SetConfig+0xabc>)
 800abbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abc0:	461a      	mov	r2, r3
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	fbb3 f2f2 	udiv	r2, r3, r2
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	085b      	lsrs	r3, r3, #1
 800abce:	441a      	add	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	2b0f      	cmp	r3, #15
 800abde:	d909      	bls.n	800abf4 <UART_SetConfig+0xa80>
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe6:	d205      	bcs.n	800abf4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	b29a      	uxth	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60da      	str	r2, [r3, #12]
 800abf2:	e002      	b.n	800abfa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ac16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3738      	adds	r7, #56	; 0x38
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bdb0      	pop	{r4, r5, r7, pc}
 800ac22:	bf00      	nop
 800ac24:	58024400 	.word	0x58024400
 800ac28:	03d09000 	.word	0x03d09000
 800ac2c:	003d0900 	.word	0x003d0900
 800ac30:	0800c968 	.word	0x0800c968

0800ac34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00a      	beq.n	800ac5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00a      	beq.n	800aca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	430a      	orrs	r2, r1
 800acc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	f003 0310 	and.w	r3, r3, #16
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00a      	beq.n	800ace6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acea:	f003 0320 	and.w	r3, r3, #32
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01a      	beq.n	800ad4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad32:	d10a      	bne.n	800ad4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	605a      	str	r2, [r3, #4]
  }
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad88:	f7f7 fef2 	bl	8002b70 <HAL_GetTick>
 800ad8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0308 	and.w	r3, r3, #8
 800ad98:	2b08      	cmp	r3, #8
 800ad9a:	d10e      	bne.n	800adba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f82f 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e025      	b.n	800ae06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d10e      	bne.n	800ade6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f819 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e00f      	b.n	800ae06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2220      	movs	r2, #32
 800adea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b09c      	sub	sp, #112	; 0x70
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	603b      	str	r3, [r7, #0]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae1e:	e0a9      	b.n	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae26:	f000 80a5 	beq.w	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae2a:	f7f7 fea1 	bl	8002b70 <HAL_GetTick>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d302      	bcc.n	800ae40 <UART_WaitOnFlagUntilTimeout+0x32>
 800ae3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d140      	bne.n	800aec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae48:	e853 3f00 	ldrex	r3, [r3]
 800ae4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae54:	667b      	str	r3, [r7, #100]	; 0x64
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae66:	e841 2300 	strex	r3, r2, [r1]
 800ae6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1e6      	bne.n	800ae40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3308      	adds	r3, #8
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae7c:	e853 3f00 	ldrex	r3, [r3]
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	f023 0301 	bic.w	r3, r3, #1
 800ae88:	663b      	str	r3, [r7, #96]	; 0x60
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3308      	adds	r3, #8
 800ae90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae92:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e5      	bne.n	800ae72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e069      	b.n	800af96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d051      	beq.n	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aede:	d149      	bne.n	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aefe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af08:	637b      	str	r3, [r7, #52]	; 0x34
 800af0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e6      	bne.n	800aeea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3308      	adds	r3, #8
 800af22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	613b      	str	r3, [r7, #16]
   return(result);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f023 0301 	bic.w	r3, r3, #1
 800af32:	66bb      	str	r3, [r7, #104]	; 0x68
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3308      	adds	r3, #8
 800af3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af3c:	623a      	str	r2, [r7, #32]
 800af3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	69f9      	ldr	r1, [r7, #28]
 800af42:	6a3a      	ldr	r2, [r7, #32]
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	61bb      	str	r3, [r7, #24]
   return(result);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e5      	bne.n	800af1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2220      	movs	r2, #32
 800af64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e010      	b.n	800af96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	69da      	ldr	r2, [r3, #28]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	4013      	ands	r3, r2
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	429a      	cmp	r2, r3
 800af82:	bf0c      	ite	eq
 800af84:	2301      	moveq	r3, #1
 800af86:	2300      	movne	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	461a      	mov	r2, r3
 800af8c:	79fb      	ldrb	r3, [r7, #7]
 800af8e:	429a      	cmp	r2, r3
 800af90:	f43f af46 	beq.w	800ae20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3770      	adds	r7, #112	; 0x70
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <HAL_UARTEx_DisableFifoMode+0x16>
 800afb0:	2302      	movs	r3, #2
 800afb2:	e027      	b.n	800b004 <HAL_UARTEx_DisableFifoMode+0x66>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2224      	movs	r2, #36	; 0x24
 800afc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0201 	bic.w	r2, r2, #1
 800afda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800afe2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b024:	2302      	movs	r3, #2
 800b026:	e02d      	b.n	800b084 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2224      	movs	r2, #36	; 0x24
 800b034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0201 	bic.w	r2, r2, #1
 800b04e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f84f 	bl	800b108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e02d      	b.n	800b100 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2224      	movs	r2, #36	; 0x24
 800b0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0201 	bic.w	r2, r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f811 	bl	800b108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b114:	2b00      	cmp	r3, #0
 800b116:	d108      	bne.n	800b12a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b128:	e031      	b.n	800b18e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b12a:	2310      	movs	r3, #16
 800b12c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b12e:	2310      	movs	r3, #16
 800b130:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	0e5b      	lsrs	r3, r3, #25
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 0307 	and.w	r3, r3, #7
 800b140:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	0f5b      	lsrs	r3, r3, #29
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	7b3a      	ldrb	r2, [r7, #12]
 800b156:	4911      	ldr	r1, [pc, #68]	; (800b19c <UARTEx_SetNbDataToProcess+0x94>)
 800b158:	5c8a      	ldrb	r2, [r1, r2]
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b15e:	7b3a      	ldrb	r2, [r7, #12]
 800b160:	490f      	ldr	r1, [pc, #60]	; (800b1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b162:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b164:	fb93 f3f2 	sdiv	r3, r3, r2
 800b168:	b29a      	uxth	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	7b7a      	ldrb	r2, [r7, #13]
 800b174:	4909      	ldr	r1, [pc, #36]	; (800b19c <UARTEx_SetNbDataToProcess+0x94>)
 800b176:	5c8a      	ldrb	r2, [r1, r2]
 800b178:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b17c:	7b7a      	ldrb	r2, [r7, #13]
 800b17e:	4908      	ldr	r1, [pc, #32]	; (800b1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b180:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b182:	fb93 f3f2 	sdiv	r3, r3, r2
 800b186:	b29a      	uxth	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b18e:	bf00      	nop
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	0800c980 	.word	0x0800c980
 800b1a0:	0800c988 	.word	0x0800c988

0800b1a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1a4:	b084      	sub	sp, #16
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	f107 001c 	add.w	r0, r7, #28
 800b1b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d120      	bne.n	800b1fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	4b2a      	ldr	r3, [pc, #168]	; (800b278 <USB_CoreInit+0xd4>)
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d105      	bne.n	800b1f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 faa8 	bl	800b748 <USB_CoreReset>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73fb      	strb	r3, [r7, #15]
 800b1fc:	e01a      	b.n	800b234 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fa9c 	bl	800b748 <USB_CoreReset>
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
 800b226:	e005      	b.n	800b234 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	2b01      	cmp	r3, #1
 800b238:	d116      	bne.n	800b268 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b248:	4b0c      	ldr	r3, [pc, #48]	; (800b27c <USB_CoreInit+0xd8>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f043 0206 	orr.w	r2, r3, #6
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f043 0220 	orr.w	r2, r3, #32
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b268:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b274:	b004      	add	sp, #16
 800b276:	4770      	bx	lr
 800b278:	ffbdffbf 	.word	0xffbdffbf
 800b27c:	03ee0000 	.word	0x03ee0000

0800b280 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f023 0201 	bic.w	r2, r3, #1
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d115      	bne.n	800b2f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	f7f7 fc59 	bl	8002b88 <HAL_Delay>
      ms++;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fa25 	bl	800b72c <USB_GetMode>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d01e      	beq.n	800b326 <USB_SetCurrentMode+0x84>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b31      	cmp	r3, #49	; 0x31
 800b2ec:	d9f0      	bls.n	800b2d0 <USB_SetCurrentMode+0x2e>
 800b2ee:	e01a      	b.n	800b326 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d115      	bne.n	800b322 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b302:	2001      	movs	r0, #1
 800b304:	f7f7 fc40 	bl	8002b88 <HAL_Delay>
      ms++;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3301      	adds	r3, #1
 800b30c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa0c 	bl	800b72c <USB_GetMode>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <USB_SetCurrentMode+0x84>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b31      	cmp	r3, #49	; 0x31
 800b31e:	d9f0      	bls.n	800b302 <USB_SetCurrentMode+0x60>
 800b320:	e001      	b.n	800b326 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e005      	b.n	800b332 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b32      	cmp	r3, #50	; 0x32
 800b32a:	d101      	bne.n	800b330 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e000      	b.n	800b332 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b33c:	b084      	sub	sp, #16
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b34a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b356:	2300      	movs	r3, #0
 800b358:	613b      	str	r3, [r7, #16]
 800b35a:	e009      	b.n	800b370 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	3340      	adds	r3, #64	; 0x40
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4413      	add	r3, r2
 800b366:	2200      	movs	r2, #0
 800b368:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3301      	adds	r3, #1
 800b36e:	613b      	str	r3, [r7, #16]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	2b0e      	cmp	r3, #14
 800b374:	d9f2      	bls.n	800b35c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d11c      	bne.n	800b3b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b38a:	f043 0302 	orr.w	r3, r3, #2
 800b38e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b394:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	e005      	b.n	800b3c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3dc:	461a      	mov	r2, r3
 800b3de:	680b      	ldr	r3, [r1, #0]
 800b3e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d10c      	bne.n	800b402 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d104      	bne.n	800b3f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f961 	bl	800b6b8 <USB_SetDevSpeed>
 800b3f6:	e008      	b.n	800b40a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f95c 	bl	800b6b8 <USB_SetDevSpeed>
 800b400:	e003      	b.n	800b40a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b402:	2103      	movs	r1, #3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f957 	bl	800b6b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b40a:	2110      	movs	r1, #16
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 f8f3 	bl	800b5f8 <USB_FlushTxFifo>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f91d 	bl	800b65c <USB_FlushRxFifo>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b432:	461a      	mov	r2, r3
 800b434:	2300      	movs	r3, #0
 800b436:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b43e:	461a      	mov	r2, r3
 800b440:	2300      	movs	r3, #0
 800b442:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	461a      	mov	r2, r3
 800b44c:	2300      	movs	r3, #0
 800b44e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b450:	2300      	movs	r3, #0
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	e043      	b.n	800b4de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	4413      	add	r3, r2
 800b45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b46c:	d118      	bne.n	800b4a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10a      	bne.n	800b48a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	015a      	lsls	r2, r3, #5
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	4413      	add	r3, r2
 800b47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b480:	461a      	mov	r2, r3
 800b482:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	e013      	b.n	800b4b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	4413      	add	r3, r2
 800b492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b496:	461a      	mov	r2, r3
 800b498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	e008      	b.n	800b4b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4be:	461a      	mov	r2, r3
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	015a      	lsls	r2, r3, #5
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	613b      	str	r3, [r7, #16]
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d3b7      	bcc.n	800b456 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	613b      	str	r3, [r7, #16]
 800b4ea:	e043      	b.n	800b574 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b502:	d118      	bne.n	800b536 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	015a      	lsls	r2, r3, #5
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	4413      	add	r3, r2
 800b512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b516:	461a      	mov	r2, r3
 800b518:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b51c:	6013      	str	r3, [r2, #0]
 800b51e:	e013      	b.n	800b548 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4413      	add	r3, r2
 800b528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52c:	461a      	mov	r2, r3
 800b52e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	e008      	b.n	800b548 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b542:	461a      	mov	r2, r3
 800b544:	2300      	movs	r3, #0
 800b546:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b554:	461a      	mov	r2, r3
 800b556:	2300      	movs	r3, #0
 800b558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	4413      	add	r3, r2
 800b562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b566:	461a      	mov	r2, r3
 800b568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b56c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	3301      	adds	r3, #1
 800b572:	613b      	str	r3, [r7, #16]
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d3b7      	bcc.n	800b4ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b58a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b58e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b59c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d105      	bne.n	800b5b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	f043 0210 	orr.w	r2, r3, #16
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	699a      	ldr	r2, [r3, #24]
 800b5b4:	4b0e      	ldr	r3, [pc, #56]	; (800b5f0 <USB_DevInit+0x2b4>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d005      	beq.n	800b5ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	f043 0208 	orr.w	r2, r3, #8
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d105      	bne.n	800b5e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	699a      	ldr	r2, [r3, #24]
 800b5d8:	4b06      	ldr	r3, [pc, #24]	; (800b5f4 <USB_DevInit+0x2b8>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5ec:	b004      	add	sp, #16
 800b5ee:	4770      	bx	lr
 800b5f0:	803c3800 	.word	0x803c3800
 800b5f4:	40000004 	.word	0x40000004

0800b5f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b602:	2300      	movs	r3, #0
 800b604:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3301      	adds	r3, #1
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	4a12      	ldr	r2, [pc, #72]	; (800b658 <USB_FlushTxFifo+0x60>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d901      	bls.n	800b616 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e01a      	b.n	800b64c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	daf3      	bge.n	800b606 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	019b      	lsls	r3, r3, #6
 800b626:	f043 0220 	orr.w	r2, r3, #32
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	4a08      	ldr	r2, [pc, #32]	; (800b658 <USB_FlushTxFifo+0x60>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d901      	bls.n	800b63e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e006      	b.n	800b64c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	f003 0320 	and.w	r3, r3, #32
 800b646:	2b20      	cmp	r3, #32
 800b648:	d0f1      	beq.n	800b62e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	00030d40 	.word	0x00030d40

0800b65c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3301      	adds	r3, #1
 800b66c:	60fb      	str	r3, [r7, #12]
 800b66e:	4a11      	ldr	r2, [pc, #68]	; (800b6b4 <USB_FlushRxFifo+0x58>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d901      	bls.n	800b678 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e017      	b.n	800b6a8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	daf3      	bge.n	800b668 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2210      	movs	r2, #16
 800b688:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3301      	adds	r3, #1
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	4a08      	ldr	r2, [pc, #32]	; (800b6b4 <USB_FlushRxFifo+0x58>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d901      	bls.n	800b69a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b696:	2303      	movs	r3, #3
 800b698:	e006      	b.n	800b6a8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	f003 0310 	and.w	r3, r3, #16
 800b6a2:	2b10      	cmp	r3, #16
 800b6a4:	d0f1      	beq.n	800b68a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	00030d40 	.word	0x00030d40

0800b6b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	68f9      	ldr	r1, [r7, #12]
 800b6d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b085      	sub	sp, #20
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b704:	f023 0303 	bic.w	r3, r3, #3
 800b708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b718:	f043 0302 	orr.w	r3, r3, #2
 800b71c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	f003 0301 	and.w	r3, r3, #1
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b750:	2300      	movs	r3, #0
 800b752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3301      	adds	r3, #1
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	4a13      	ldr	r2, [pc, #76]	; (800b7a8 <USB_CoreReset+0x60>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d901      	bls.n	800b764 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	e01a      	b.n	800b79a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	daf3      	bge.n	800b754 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b76c:	2300      	movs	r3, #0
 800b76e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	f043 0201 	orr.w	r2, r3, #1
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3301      	adds	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	4a09      	ldr	r2, [pc, #36]	; (800b7a8 <USB_CoreReset+0x60>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d901      	bls.n	800b78c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b788:	2303      	movs	r3, #3
 800b78a:	e006      	b.n	800b79a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	2b01      	cmp	r3, #1
 800b796:	d0f1      	beq.n	800b77c <USB_CoreReset+0x34>

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	00030d40 	.word	0x00030d40

0800b7ac <__errno>:
 800b7ac:	4b01      	ldr	r3, [pc, #4]	; (800b7b4 <__errno+0x8>)
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	2400001c 	.word	0x2400001c

0800b7b8 <__libc_init_array>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	4d0d      	ldr	r5, [pc, #52]	; (800b7f0 <__libc_init_array+0x38>)
 800b7bc:	4c0d      	ldr	r4, [pc, #52]	; (800b7f4 <__libc_init_array+0x3c>)
 800b7be:	1b64      	subs	r4, r4, r5
 800b7c0:	10a4      	asrs	r4, r4, #2
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	42a6      	cmp	r6, r4
 800b7c6:	d109      	bne.n	800b7dc <__libc_init_array+0x24>
 800b7c8:	4d0b      	ldr	r5, [pc, #44]	; (800b7f8 <__libc_init_array+0x40>)
 800b7ca:	4c0c      	ldr	r4, [pc, #48]	; (800b7fc <__libc_init_array+0x44>)
 800b7cc:	f000 fc56 	bl	800c07c <_init>
 800b7d0:	1b64      	subs	r4, r4, r5
 800b7d2:	10a4      	asrs	r4, r4, #2
 800b7d4:	2600      	movs	r6, #0
 800b7d6:	42a6      	cmp	r6, r4
 800b7d8:	d105      	bne.n	800b7e6 <__libc_init_array+0x2e>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e0:	4798      	blx	r3
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	e7ee      	b.n	800b7c4 <__libc_init_array+0xc>
 800b7e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ea:	4798      	blx	r3
 800b7ec:	3601      	adds	r6, #1
 800b7ee:	e7f2      	b.n	800b7d6 <__libc_init_array+0x1e>
 800b7f0:	0800c9cc 	.word	0x0800c9cc
 800b7f4:	0800c9cc 	.word	0x0800c9cc
 800b7f8:	0800c9cc 	.word	0x0800c9cc
 800b7fc:	0800c9d0 	.word	0x0800c9d0

0800b800 <memcpy>:
 800b800:	440a      	add	r2, r1
 800b802:	4291      	cmp	r1, r2
 800b804:	f100 33ff 	add.w	r3, r0, #4294967295
 800b808:	d100      	bne.n	800b80c <memcpy+0xc>
 800b80a:	4770      	bx	lr
 800b80c:	b510      	push	{r4, lr}
 800b80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b816:	4291      	cmp	r1, r2
 800b818:	d1f9      	bne.n	800b80e <memcpy+0xe>
 800b81a:	bd10      	pop	{r4, pc}

0800b81c <memmove>:
 800b81c:	4288      	cmp	r0, r1
 800b81e:	b510      	push	{r4, lr}
 800b820:	eb01 0402 	add.w	r4, r1, r2
 800b824:	d902      	bls.n	800b82c <memmove+0x10>
 800b826:	4284      	cmp	r4, r0
 800b828:	4623      	mov	r3, r4
 800b82a:	d807      	bhi.n	800b83c <memmove+0x20>
 800b82c:	1e43      	subs	r3, r0, #1
 800b82e:	42a1      	cmp	r1, r4
 800b830:	d008      	beq.n	800b844 <memmove+0x28>
 800b832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b83a:	e7f8      	b.n	800b82e <memmove+0x12>
 800b83c:	4402      	add	r2, r0
 800b83e:	4601      	mov	r1, r0
 800b840:	428a      	cmp	r2, r1
 800b842:	d100      	bne.n	800b846 <memmove+0x2a>
 800b844:	bd10      	pop	{r4, pc}
 800b846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b84e:	e7f7      	b.n	800b840 <memmove+0x24>

0800b850 <memset>:
 800b850:	4402      	add	r2, r0
 800b852:	4603      	mov	r3, r0
 800b854:	4293      	cmp	r3, r2
 800b856:	d100      	bne.n	800b85a <memset+0xa>
 800b858:	4770      	bx	lr
 800b85a:	f803 1b01 	strb.w	r1, [r3], #1
 800b85e:	e7f9      	b.n	800b854 <memset+0x4>

0800b860 <siprintf>:
 800b860:	b40e      	push	{r1, r2, r3}
 800b862:	b500      	push	{lr}
 800b864:	b09c      	sub	sp, #112	; 0x70
 800b866:	ab1d      	add	r3, sp, #116	; 0x74
 800b868:	9002      	str	r0, [sp, #8]
 800b86a:	9006      	str	r0, [sp, #24]
 800b86c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b870:	4809      	ldr	r0, [pc, #36]	; (800b898 <siprintf+0x38>)
 800b872:	9107      	str	r1, [sp, #28]
 800b874:	9104      	str	r1, [sp, #16]
 800b876:	4909      	ldr	r1, [pc, #36]	; (800b89c <siprintf+0x3c>)
 800b878:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87c:	9105      	str	r1, [sp, #20]
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	a902      	add	r1, sp, #8
 800b884:	f000 f870 	bl	800b968 <_svfiprintf_r>
 800b888:	9b02      	ldr	r3, [sp, #8]
 800b88a:	2200      	movs	r2, #0
 800b88c:	701a      	strb	r2, [r3, #0]
 800b88e:	b01c      	add	sp, #112	; 0x70
 800b890:	f85d eb04 	ldr.w	lr, [sp], #4
 800b894:	b003      	add	sp, #12
 800b896:	4770      	bx	lr
 800b898:	2400001c 	.word	0x2400001c
 800b89c:	ffff0208 	.word	0xffff0208

0800b8a0 <strcpy>:
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8a6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	d1f9      	bne.n	800b8a2 <strcpy+0x2>
 800b8ae:	4770      	bx	lr

0800b8b0 <__ssputs_r>:
 800b8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	688e      	ldr	r6, [r1, #8]
 800b8b6:	429e      	cmp	r6, r3
 800b8b8:	4682      	mov	sl, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	4690      	mov	r8, r2
 800b8be:	461f      	mov	r7, r3
 800b8c0:	d838      	bhi.n	800b934 <__ssputs_r+0x84>
 800b8c2:	898a      	ldrh	r2, [r1, #12]
 800b8c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8c8:	d032      	beq.n	800b930 <__ssputs_r+0x80>
 800b8ca:	6825      	ldr	r5, [r4, #0]
 800b8cc:	6909      	ldr	r1, [r1, #16]
 800b8ce:	eba5 0901 	sub.w	r9, r5, r1
 800b8d2:	6965      	ldr	r5, [r4, #20]
 800b8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8dc:	3301      	adds	r3, #1
 800b8de:	444b      	add	r3, r9
 800b8e0:	106d      	asrs	r5, r5, #1
 800b8e2:	429d      	cmp	r5, r3
 800b8e4:	bf38      	it	cc
 800b8e6:	461d      	movcc	r5, r3
 800b8e8:	0553      	lsls	r3, r2, #21
 800b8ea:	d531      	bpl.n	800b950 <__ssputs_r+0xa0>
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	f000 fb1f 	bl	800bf30 <_malloc_r>
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	b950      	cbnz	r0, 800b90c <__ssputs_r+0x5c>
 800b8f6:	230c      	movs	r3, #12
 800b8f8:	f8ca 3000 	str.w	r3, [sl]
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	f04f 30ff 	mov.w	r0, #4294967295
 800b908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b90c:	6921      	ldr	r1, [r4, #16]
 800b90e:	464a      	mov	r2, r9
 800b910:	f7ff ff76 	bl	800b800 <memcpy>
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	6126      	str	r6, [r4, #16]
 800b922:	6165      	str	r5, [r4, #20]
 800b924:	444e      	add	r6, r9
 800b926:	eba5 0509 	sub.w	r5, r5, r9
 800b92a:	6026      	str	r6, [r4, #0]
 800b92c:	60a5      	str	r5, [r4, #8]
 800b92e:	463e      	mov	r6, r7
 800b930:	42be      	cmp	r6, r7
 800b932:	d900      	bls.n	800b936 <__ssputs_r+0x86>
 800b934:	463e      	mov	r6, r7
 800b936:	4632      	mov	r2, r6
 800b938:	6820      	ldr	r0, [r4, #0]
 800b93a:	4641      	mov	r1, r8
 800b93c:	f7ff ff6e 	bl	800b81c <memmove>
 800b940:	68a3      	ldr	r3, [r4, #8]
 800b942:	6822      	ldr	r2, [r4, #0]
 800b944:	1b9b      	subs	r3, r3, r6
 800b946:	4432      	add	r2, r6
 800b948:	60a3      	str	r3, [r4, #8]
 800b94a:	6022      	str	r2, [r4, #0]
 800b94c:	2000      	movs	r0, #0
 800b94e:	e7db      	b.n	800b908 <__ssputs_r+0x58>
 800b950:	462a      	mov	r2, r5
 800b952:	f000 fb47 	bl	800bfe4 <_realloc_r>
 800b956:	4606      	mov	r6, r0
 800b958:	2800      	cmp	r0, #0
 800b95a:	d1e1      	bne.n	800b920 <__ssputs_r+0x70>
 800b95c:	6921      	ldr	r1, [r4, #16]
 800b95e:	4650      	mov	r0, sl
 800b960:	f000 fa96 	bl	800be90 <_free_r>
 800b964:	e7c7      	b.n	800b8f6 <__ssputs_r+0x46>
	...

0800b968 <_svfiprintf_r>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	4698      	mov	r8, r3
 800b96e:	898b      	ldrh	r3, [r1, #12]
 800b970:	061b      	lsls	r3, r3, #24
 800b972:	b09d      	sub	sp, #116	; 0x74
 800b974:	4607      	mov	r7, r0
 800b976:	460d      	mov	r5, r1
 800b978:	4614      	mov	r4, r2
 800b97a:	d50e      	bpl.n	800b99a <_svfiprintf_r+0x32>
 800b97c:	690b      	ldr	r3, [r1, #16]
 800b97e:	b963      	cbnz	r3, 800b99a <_svfiprintf_r+0x32>
 800b980:	2140      	movs	r1, #64	; 0x40
 800b982:	f000 fad5 	bl	800bf30 <_malloc_r>
 800b986:	6028      	str	r0, [r5, #0]
 800b988:	6128      	str	r0, [r5, #16]
 800b98a:	b920      	cbnz	r0, 800b996 <_svfiprintf_r+0x2e>
 800b98c:	230c      	movs	r3, #12
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	f04f 30ff 	mov.w	r0, #4294967295
 800b994:	e0d1      	b.n	800bb3a <_svfiprintf_r+0x1d2>
 800b996:	2340      	movs	r3, #64	; 0x40
 800b998:	616b      	str	r3, [r5, #20]
 800b99a:	2300      	movs	r3, #0
 800b99c:	9309      	str	r3, [sp, #36]	; 0x24
 800b99e:	2320      	movs	r3, #32
 800b9a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9a8:	2330      	movs	r3, #48	; 0x30
 800b9aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb54 <_svfiprintf_r+0x1ec>
 800b9ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9b2:	f04f 0901 	mov.w	r9, #1
 800b9b6:	4623      	mov	r3, r4
 800b9b8:	469a      	mov	sl, r3
 800b9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9be:	b10a      	cbz	r2, 800b9c4 <_svfiprintf_r+0x5c>
 800b9c0:	2a25      	cmp	r2, #37	; 0x25
 800b9c2:	d1f9      	bne.n	800b9b8 <_svfiprintf_r+0x50>
 800b9c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b9c8:	d00b      	beq.n	800b9e2 <_svfiprintf_r+0x7a>
 800b9ca:	465b      	mov	r3, fp
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff ff6d 	bl	800b8b0 <__ssputs_r>
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	f000 80aa 	beq.w	800bb30 <_svfiprintf_r+0x1c8>
 800b9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9de:	445a      	add	r2, fp
 800b9e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 80a2 	beq.w	800bb30 <_svfiprintf_r+0x1c8>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9f6:	f10a 0a01 	add.w	sl, sl, #1
 800b9fa:	9304      	str	r3, [sp, #16]
 800b9fc:	9307      	str	r3, [sp, #28]
 800b9fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba02:	931a      	str	r3, [sp, #104]	; 0x68
 800ba04:	4654      	mov	r4, sl
 800ba06:	2205      	movs	r2, #5
 800ba08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0c:	4851      	ldr	r0, [pc, #324]	; (800bb54 <_svfiprintf_r+0x1ec>)
 800ba0e:	f7f4 fc6f 	bl	80002f0 <memchr>
 800ba12:	9a04      	ldr	r2, [sp, #16]
 800ba14:	b9d8      	cbnz	r0, 800ba4e <_svfiprintf_r+0xe6>
 800ba16:	06d0      	lsls	r0, r2, #27
 800ba18:	bf44      	itt	mi
 800ba1a:	2320      	movmi	r3, #32
 800ba1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba20:	0711      	lsls	r1, r2, #28
 800ba22:	bf44      	itt	mi
 800ba24:	232b      	movmi	r3, #43	; 0x2b
 800ba26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba30:	d015      	beq.n	800ba5e <_svfiprintf_r+0xf6>
 800ba32:	9a07      	ldr	r2, [sp, #28]
 800ba34:	4654      	mov	r4, sl
 800ba36:	2000      	movs	r0, #0
 800ba38:	f04f 0c0a 	mov.w	ip, #10
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba42:	3b30      	subs	r3, #48	; 0x30
 800ba44:	2b09      	cmp	r3, #9
 800ba46:	d94e      	bls.n	800bae6 <_svfiprintf_r+0x17e>
 800ba48:	b1b0      	cbz	r0, 800ba78 <_svfiprintf_r+0x110>
 800ba4a:	9207      	str	r2, [sp, #28]
 800ba4c:	e014      	b.n	800ba78 <_svfiprintf_r+0x110>
 800ba4e:	eba0 0308 	sub.w	r3, r0, r8
 800ba52:	fa09 f303 	lsl.w	r3, r9, r3
 800ba56:	4313      	orrs	r3, r2
 800ba58:	9304      	str	r3, [sp, #16]
 800ba5a:	46a2      	mov	sl, r4
 800ba5c:	e7d2      	b.n	800ba04 <_svfiprintf_r+0x9c>
 800ba5e:	9b03      	ldr	r3, [sp, #12]
 800ba60:	1d19      	adds	r1, r3, #4
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	9103      	str	r1, [sp, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	bfbb      	ittet	lt
 800ba6a:	425b      	neglt	r3, r3
 800ba6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba70:	9307      	strge	r3, [sp, #28]
 800ba72:	9307      	strlt	r3, [sp, #28]
 800ba74:	bfb8      	it	lt
 800ba76:	9204      	strlt	r2, [sp, #16]
 800ba78:	7823      	ldrb	r3, [r4, #0]
 800ba7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba7c:	d10c      	bne.n	800ba98 <_svfiprintf_r+0x130>
 800ba7e:	7863      	ldrb	r3, [r4, #1]
 800ba80:	2b2a      	cmp	r3, #42	; 0x2a
 800ba82:	d135      	bne.n	800baf0 <_svfiprintf_r+0x188>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	1d1a      	adds	r2, r3, #4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	9203      	str	r2, [sp, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	bfb8      	it	lt
 800ba90:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba94:	3402      	adds	r4, #2
 800ba96:	9305      	str	r3, [sp, #20]
 800ba98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb64 <_svfiprintf_r+0x1fc>
 800ba9c:	7821      	ldrb	r1, [r4, #0]
 800ba9e:	2203      	movs	r2, #3
 800baa0:	4650      	mov	r0, sl
 800baa2:	f7f4 fc25 	bl	80002f0 <memchr>
 800baa6:	b140      	cbz	r0, 800baba <_svfiprintf_r+0x152>
 800baa8:	2340      	movs	r3, #64	; 0x40
 800baaa:	eba0 000a 	sub.w	r0, r0, sl
 800baae:	fa03 f000 	lsl.w	r0, r3, r0
 800bab2:	9b04      	ldr	r3, [sp, #16]
 800bab4:	4303      	orrs	r3, r0
 800bab6:	3401      	adds	r4, #1
 800bab8:	9304      	str	r3, [sp, #16]
 800baba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800babe:	4826      	ldr	r0, [pc, #152]	; (800bb58 <_svfiprintf_r+0x1f0>)
 800bac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bac4:	2206      	movs	r2, #6
 800bac6:	f7f4 fc13 	bl	80002f0 <memchr>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d038      	beq.n	800bb40 <_svfiprintf_r+0x1d8>
 800bace:	4b23      	ldr	r3, [pc, #140]	; (800bb5c <_svfiprintf_r+0x1f4>)
 800bad0:	bb1b      	cbnz	r3, 800bb1a <_svfiprintf_r+0x1b2>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	3307      	adds	r3, #7
 800bad6:	f023 0307 	bic.w	r3, r3, #7
 800bada:	3308      	adds	r3, #8
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae0:	4433      	add	r3, r6
 800bae2:	9309      	str	r3, [sp, #36]	; 0x24
 800bae4:	e767      	b.n	800b9b6 <_svfiprintf_r+0x4e>
 800bae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800baea:	460c      	mov	r4, r1
 800baec:	2001      	movs	r0, #1
 800baee:	e7a5      	b.n	800ba3c <_svfiprintf_r+0xd4>
 800baf0:	2300      	movs	r3, #0
 800baf2:	3401      	adds	r4, #1
 800baf4:	9305      	str	r3, [sp, #20]
 800baf6:	4619      	mov	r1, r3
 800baf8:	f04f 0c0a 	mov.w	ip, #10
 800bafc:	4620      	mov	r0, r4
 800bafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb02:	3a30      	subs	r2, #48	; 0x30
 800bb04:	2a09      	cmp	r2, #9
 800bb06:	d903      	bls.n	800bb10 <_svfiprintf_r+0x1a8>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d0c5      	beq.n	800ba98 <_svfiprintf_r+0x130>
 800bb0c:	9105      	str	r1, [sp, #20]
 800bb0e:	e7c3      	b.n	800ba98 <_svfiprintf_r+0x130>
 800bb10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb14:	4604      	mov	r4, r0
 800bb16:	2301      	movs	r3, #1
 800bb18:	e7f0      	b.n	800bafc <_svfiprintf_r+0x194>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <_svfiprintf_r+0x1f8>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	4638      	mov	r0, r7
 800bb26:	f3af 8000 	nop.w
 800bb2a:	1c42      	adds	r2, r0, #1
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	d1d6      	bne.n	800bade <_svfiprintf_r+0x176>
 800bb30:	89ab      	ldrh	r3, [r5, #12]
 800bb32:	065b      	lsls	r3, r3, #25
 800bb34:	f53f af2c 	bmi.w	800b990 <_svfiprintf_r+0x28>
 800bb38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb3a:	b01d      	add	sp, #116	; 0x74
 800bb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb40:	ab03      	add	r3, sp, #12
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	462a      	mov	r2, r5
 800bb46:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <_svfiprintf_r+0x1f8>)
 800bb48:	a904      	add	r1, sp, #16
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	f000 f87a 	bl	800bc44 <_printf_i>
 800bb50:	e7eb      	b.n	800bb2a <_svfiprintf_r+0x1c2>
 800bb52:	bf00      	nop
 800bb54:	0800c990 	.word	0x0800c990
 800bb58:	0800c99a 	.word	0x0800c99a
 800bb5c:	00000000 	.word	0x00000000
 800bb60:	0800b8b1 	.word	0x0800b8b1
 800bb64:	0800c996 	.word	0x0800c996

0800bb68 <_printf_common>:
 800bb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6c:	4616      	mov	r6, r2
 800bb6e:	4699      	mov	r9, r3
 800bb70:	688a      	ldr	r2, [r1, #8]
 800bb72:	690b      	ldr	r3, [r1, #16]
 800bb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	bfb8      	it	lt
 800bb7c:	4613      	movlt	r3, r2
 800bb7e:	6033      	str	r3, [r6, #0]
 800bb80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb84:	4607      	mov	r7, r0
 800bb86:	460c      	mov	r4, r1
 800bb88:	b10a      	cbz	r2, 800bb8e <_printf_common+0x26>
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	6033      	str	r3, [r6, #0]
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	0699      	lsls	r1, r3, #26
 800bb92:	bf42      	ittt	mi
 800bb94:	6833      	ldrmi	r3, [r6, #0]
 800bb96:	3302      	addmi	r3, #2
 800bb98:	6033      	strmi	r3, [r6, #0]
 800bb9a:	6825      	ldr	r5, [r4, #0]
 800bb9c:	f015 0506 	ands.w	r5, r5, #6
 800bba0:	d106      	bne.n	800bbb0 <_printf_common+0x48>
 800bba2:	f104 0a19 	add.w	sl, r4, #25
 800bba6:	68e3      	ldr	r3, [r4, #12]
 800bba8:	6832      	ldr	r2, [r6, #0]
 800bbaa:	1a9b      	subs	r3, r3, r2
 800bbac:	42ab      	cmp	r3, r5
 800bbae:	dc26      	bgt.n	800bbfe <_printf_common+0x96>
 800bbb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbb4:	1e13      	subs	r3, r2, #0
 800bbb6:	6822      	ldr	r2, [r4, #0]
 800bbb8:	bf18      	it	ne
 800bbba:	2301      	movne	r3, #1
 800bbbc:	0692      	lsls	r2, r2, #26
 800bbbe:	d42b      	bmi.n	800bc18 <_printf_common+0xb0>
 800bbc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	47c0      	blx	r8
 800bbca:	3001      	adds	r0, #1
 800bbcc:	d01e      	beq.n	800bc0c <_printf_common+0xa4>
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	68e5      	ldr	r5, [r4, #12]
 800bbd2:	6832      	ldr	r2, [r6, #0]
 800bbd4:	f003 0306 	and.w	r3, r3, #6
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	bf08      	it	eq
 800bbdc:	1aad      	subeq	r5, r5, r2
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	6922      	ldr	r2, [r4, #16]
 800bbe2:	bf0c      	ite	eq
 800bbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbe8:	2500      	movne	r5, #0
 800bbea:	4293      	cmp	r3, r2
 800bbec:	bfc4      	itt	gt
 800bbee:	1a9b      	subgt	r3, r3, r2
 800bbf0:	18ed      	addgt	r5, r5, r3
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	341a      	adds	r4, #26
 800bbf6:	42b5      	cmp	r5, r6
 800bbf8:	d11a      	bne.n	800bc30 <_printf_common+0xc8>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e008      	b.n	800bc10 <_printf_common+0xa8>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	4652      	mov	r2, sl
 800bc02:	4649      	mov	r1, r9
 800bc04:	4638      	mov	r0, r7
 800bc06:	47c0      	blx	r8
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d103      	bne.n	800bc14 <_printf_common+0xac>
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc14:	3501      	adds	r5, #1
 800bc16:	e7c6      	b.n	800bba6 <_printf_common+0x3e>
 800bc18:	18e1      	adds	r1, r4, r3
 800bc1a:	1c5a      	adds	r2, r3, #1
 800bc1c:	2030      	movs	r0, #48	; 0x30
 800bc1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc22:	4422      	add	r2, r4
 800bc24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc2c:	3302      	adds	r3, #2
 800bc2e:	e7c7      	b.n	800bbc0 <_printf_common+0x58>
 800bc30:	2301      	movs	r3, #1
 800bc32:	4622      	mov	r2, r4
 800bc34:	4649      	mov	r1, r9
 800bc36:	4638      	mov	r0, r7
 800bc38:	47c0      	blx	r8
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	d0e6      	beq.n	800bc0c <_printf_common+0xa4>
 800bc3e:	3601      	adds	r6, #1
 800bc40:	e7d9      	b.n	800bbf6 <_printf_common+0x8e>
	...

0800bc44 <_printf_i>:
 800bc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc48:	460c      	mov	r4, r1
 800bc4a:	4691      	mov	r9, r2
 800bc4c:	7e27      	ldrb	r7, [r4, #24]
 800bc4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc50:	2f78      	cmp	r7, #120	; 0x78
 800bc52:	4680      	mov	r8, r0
 800bc54:	469a      	mov	sl, r3
 800bc56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc5a:	d807      	bhi.n	800bc6c <_printf_i+0x28>
 800bc5c:	2f62      	cmp	r7, #98	; 0x62
 800bc5e:	d80a      	bhi.n	800bc76 <_printf_i+0x32>
 800bc60:	2f00      	cmp	r7, #0
 800bc62:	f000 80d8 	beq.w	800be16 <_printf_i+0x1d2>
 800bc66:	2f58      	cmp	r7, #88	; 0x58
 800bc68:	f000 80a3 	beq.w	800bdb2 <_printf_i+0x16e>
 800bc6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc74:	e03a      	b.n	800bcec <_printf_i+0xa8>
 800bc76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc7a:	2b15      	cmp	r3, #21
 800bc7c:	d8f6      	bhi.n	800bc6c <_printf_i+0x28>
 800bc7e:	a001      	add	r0, pc, #4	; (adr r0, 800bc84 <_printf_i+0x40>)
 800bc80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bc84:	0800bcdd 	.word	0x0800bcdd
 800bc88:	0800bcf1 	.word	0x0800bcf1
 800bc8c:	0800bc6d 	.word	0x0800bc6d
 800bc90:	0800bc6d 	.word	0x0800bc6d
 800bc94:	0800bc6d 	.word	0x0800bc6d
 800bc98:	0800bc6d 	.word	0x0800bc6d
 800bc9c:	0800bcf1 	.word	0x0800bcf1
 800bca0:	0800bc6d 	.word	0x0800bc6d
 800bca4:	0800bc6d 	.word	0x0800bc6d
 800bca8:	0800bc6d 	.word	0x0800bc6d
 800bcac:	0800bc6d 	.word	0x0800bc6d
 800bcb0:	0800bdfd 	.word	0x0800bdfd
 800bcb4:	0800bd21 	.word	0x0800bd21
 800bcb8:	0800bddf 	.word	0x0800bddf
 800bcbc:	0800bc6d 	.word	0x0800bc6d
 800bcc0:	0800bc6d 	.word	0x0800bc6d
 800bcc4:	0800be1f 	.word	0x0800be1f
 800bcc8:	0800bc6d 	.word	0x0800bc6d
 800bccc:	0800bd21 	.word	0x0800bd21
 800bcd0:	0800bc6d 	.word	0x0800bc6d
 800bcd4:	0800bc6d 	.word	0x0800bc6d
 800bcd8:	0800bde7 	.word	0x0800bde7
 800bcdc:	680b      	ldr	r3, [r1, #0]
 800bcde:	1d1a      	adds	r2, r3, #4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	600a      	str	r2, [r1, #0]
 800bce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcec:	2301      	movs	r3, #1
 800bcee:	e0a3      	b.n	800be38 <_printf_i+0x1f4>
 800bcf0:	6825      	ldr	r5, [r4, #0]
 800bcf2:	6808      	ldr	r0, [r1, #0]
 800bcf4:	062e      	lsls	r6, r5, #24
 800bcf6:	f100 0304 	add.w	r3, r0, #4
 800bcfa:	d50a      	bpl.n	800bd12 <_printf_i+0xce>
 800bcfc:	6805      	ldr	r5, [r0, #0]
 800bcfe:	600b      	str	r3, [r1, #0]
 800bd00:	2d00      	cmp	r5, #0
 800bd02:	da03      	bge.n	800bd0c <_printf_i+0xc8>
 800bd04:	232d      	movs	r3, #45	; 0x2d
 800bd06:	426d      	negs	r5, r5
 800bd08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd0c:	485e      	ldr	r0, [pc, #376]	; (800be88 <_printf_i+0x244>)
 800bd0e:	230a      	movs	r3, #10
 800bd10:	e019      	b.n	800bd46 <_printf_i+0x102>
 800bd12:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bd16:	6805      	ldr	r5, [r0, #0]
 800bd18:	600b      	str	r3, [r1, #0]
 800bd1a:	bf18      	it	ne
 800bd1c:	b22d      	sxthne	r5, r5
 800bd1e:	e7ef      	b.n	800bd00 <_printf_i+0xbc>
 800bd20:	680b      	ldr	r3, [r1, #0]
 800bd22:	6825      	ldr	r5, [r4, #0]
 800bd24:	1d18      	adds	r0, r3, #4
 800bd26:	6008      	str	r0, [r1, #0]
 800bd28:	0628      	lsls	r0, r5, #24
 800bd2a:	d501      	bpl.n	800bd30 <_printf_i+0xec>
 800bd2c:	681d      	ldr	r5, [r3, #0]
 800bd2e:	e002      	b.n	800bd36 <_printf_i+0xf2>
 800bd30:	0669      	lsls	r1, r5, #25
 800bd32:	d5fb      	bpl.n	800bd2c <_printf_i+0xe8>
 800bd34:	881d      	ldrh	r5, [r3, #0]
 800bd36:	4854      	ldr	r0, [pc, #336]	; (800be88 <_printf_i+0x244>)
 800bd38:	2f6f      	cmp	r7, #111	; 0x6f
 800bd3a:	bf0c      	ite	eq
 800bd3c:	2308      	moveq	r3, #8
 800bd3e:	230a      	movne	r3, #10
 800bd40:	2100      	movs	r1, #0
 800bd42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd46:	6866      	ldr	r6, [r4, #4]
 800bd48:	60a6      	str	r6, [r4, #8]
 800bd4a:	2e00      	cmp	r6, #0
 800bd4c:	bfa2      	ittt	ge
 800bd4e:	6821      	ldrge	r1, [r4, #0]
 800bd50:	f021 0104 	bicge.w	r1, r1, #4
 800bd54:	6021      	strge	r1, [r4, #0]
 800bd56:	b90d      	cbnz	r5, 800bd5c <_printf_i+0x118>
 800bd58:	2e00      	cmp	r6, #0
 800bd5a:	d04d      	beq.n	800bdf8 <_printf_i+0x1b4>
 800bd5c:	4616      	mov	r6, r2
 800bd5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd62:	fb03 5711 	mls	r7, r3, r1, r5
 800bd66:	5dc7      	ldrb	r7, [r0, r7]
 800bd68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd6c:	462f      	mov	r7, r5
 800bd6e:	42bb      	cmp	r3, r7
 800bd70:	460d      	mov	r5, r1
 800bd72:	d9f4      	bls.n	800bd5e <_printf_i+0x11a>
 800bd74:	2b08      	cmp	r3, #8
 800bd76:	d10b      	bne.n	800bd90 <_printf_i+0x14c>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	07df      	lsls	r7, r3, #31
 800bd7c:	d508      	bpl.n	800bd90 <_printf_i+0x14c>
 800bd7e:	6923      	ldr	r3, [r4, #16]
 800bd80:	6861      	ldr	r1, [r4, #4]
 800bd82:	4299      	cmp	r1, r3
 800bd84:	bfde      	ittt	le
 800bd86:	2330      	movle	r3, #48	; 0x30
 800bd88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd90:	1b92      	subs	r2, r2, r6
 800bd92:	6122      	str	r2, [r4, #16]
 800bd94:	f8cd a000 	str.w	sl, [sp]
 800bd98:	464b      	mov	r3, r9
 800bd9a:	aa03      	add	r2, sp, #12
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	4640      	mov	r0, r8
 800bda0:	f7ff fee2 	bl	800bb68 <_printf_common>
 800bda4:	3001      	adds	r0, #1
 800bda6:	d14c      	bne.n	800be42 <_printf_i+0x1fe>
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdac:	b004      	add	sp, #16
 800bdae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb2:	4835      	ldr	r0, [pc, #212]	; (800be88 <_printf_i+0x244>)
 800bdb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	680e      	ldr	r6, [r1, #0]
 800bdbc:	061f      	lsls	r7, r3, #24
 800bdbe:	f856 5b04 	ldr.w	r5, [r6], #4
 800bdc2:	600e      	str	r6, [r1, #0]
 800bdc4:	d514      	bpl.n	800bdf0 <_printf_i+0x1ac>
 800bdc6:	07d9      	lsls	r1, r3, #31
 800bdc8:	bf44      	itt	mi
 800bdca:	f043 0320 	orrmi.w	r3, r3, #32
 800bdce:	6023      	strmi	r3, [r4, #0]
 800bdd0:	b91d      	cbnz	r5, 800bdda <_printf_i+0x196>
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	f023 0320 	bic.w	r3, r3, #32
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	2310      	movs	r3, #16
 800bddc:	e7b0      	b.n	800bd40 <_printf_i+0xfc>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	f043 0320 	orr.w	r3, r3, #32
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	2378      	movs	r3, #120	; 0x78
 800bde8:	4828      	ldr	r0, [pc, #160]	; (800be8c <_printf_i+0x248>)
 800bdea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdee:	e7e3      	b.n	800bdb8 <_printf_i+0x174>
 800bdf0:	065e      	lsls	r6, r3, #25
 800bdf2:	bf48      	it	mi
 800bdf4:	b2ad      	uxthmi	r5, r5
 800bdf6:	e7e6      	b.n	800bdc6 <_printf_i+0x182>
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	e7bb      	b.n	800bd74 <_printf_i+0x130>
 800bdfc:	680b      	ldr	r3, [r1, #0]
 800bdfe:	6826      	ldr	r6, [r4, #0]
 800be00:	6960      	ldr	r0, [r4, #20]
 800be02:	1d1d      	adds	r5, r3, #4
 800be04:	600d      	str	r5, [r1, #0]
 800be06:	0635      	lsls	r5, r6, #24
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	d501      	bpl.n	800be10 <_printf_i+0x1cc>
 800be0c:	6018      	str	r0, [r3, #0]
 800be0e:	e002      	b.n	800be16 <_printf_i+0x1d2>
 800be10:	0671      	lsls	r1, r6, #25
 800be12:	d5fb      	bpl.n	800be0c <_printf_i+0x1c8>
 800be14:	8018      	strh	r0, [r3, #0]
 800be16:	2300      	movs	r3, #0
 800be18:	6123      	str	r3, [r4, #16]
 800be1a:	4616      	mov	r6, r2
 800be1c:	e7ba      	b.n	800bd94 <_printf_i+0x150>
 800be1e:	680b      	ldr	r3, [r1, #0]
 800be20:	1d1a      	adds	r2, r3, #4
 800be22:	600a      	str	r2, [r1, #0]
 800be24:	681e      	ldr	r6, [r3, #0]
 800be26:	6862      	ldr	r2, [r4, #4]
 800be28:	2100      	movs	r1, #0
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7f4 fa60 	bl	80002f0 <memchr>
 800be30:	b108      	cbz	r0, 800be36 <_printf_i+0x1f2>
 800be32:	1b80      	subs	r0, r0, r6
 800be34:	6060      	str	r0, [r4, #4]
 800be36:	6863      	ldr	r3, [r4, #4]
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	2300      	movs	r3, #0
 800be3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be40:	e7a8      	b.n	800bd94 <_printf_i+0x150>
 800be42:	6923      	ldr	r3, [r4, #16]
 800be44:	4632      	mov	r2, r6
 800be46:	4649      	mov	r1, r9
 800be48:	4640      	mov	r0, r8
 800be4a:	47d0      	blx	sl
 800be4c:	3001      	adds	r0, #1
 800be4e:	d0ab      	beq.n	800bda8 <_printf_i+0x164>
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	079b      	lsls	r3, r3, #30
 800be54:	d413      	bmi.n	800be7e <_printf_i+0x23a>
 800be56:	68e0      	ldr	r0, [r4, #12]
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	4298      	cmp	r0, r3
 800be5c:	bfb8      	it	lt
 800be5e:	4618      	movlt	r0, r3
 800be60:	e7a4      	b.n	800bdac <_printf_i+0x168>
 800be62:	2301      	movs	r3, #1
 800be64:	4632      	mov	r2, r6
 800be66:	4649      	mov	r1, r9
 800be68:	4640      	mov	r0, r8
 800be6a:	47d0      	blx	sl
 800be6c:	3001      	adds	r0, #1
 800be6e:	d09b      	beq.n	800bda8 <_printf_i+0x164>
 800be70:	3501      	adds	r5, #1
 800be72:	68e3      	ldr	r3, [r4, #12]
 800be74:	9903      	ldr	r1, [sp, #12]
 800be76:	1a5b      	subs	r3, r3, r1
 800be78:	42ab      	cmp	r3, r5
 800be7a:	dcf2      	bgt.n	800be62 <_printf_i+0x21e>
 800be7c:	e7eb      	b.n	800be56 <_printf_i+0x212>
 800be7e:	2500      	movs	r5, #0
 800be80:	f104 0619 	add.w	r6, r4, #25
 800be84:	e7f5      	b.n	800be72 <_printf_i+0x22e>
 800be86:	bf00      	nop
 800be88:	0800c9a1 	.word	0x0800c9a1
 800be8c:	0800c9b2 	.word	0x0800c9b2

0800be90 <_free_r>:
 800be90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be92:	2900      	cmp	r1, #0
 800be94:	d048      	beq.n	800bf28 <_free_r+0x98>
 800be96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be9a:	9001      	str	r0, [sp, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f1a1 0404 	sub.w	r4, r1, #4
 800bea2:	bfb8      	it	lt
 800bea4:	18e4      	addlt	r4, r4, r3
 800bea6:	f000 f8d3 	bl	800c050 <__malloc_lock>
 800beaa:	4a20      	ldr	r2, [pc, #128]	; (800bf2c <_free_r+0x9c>)
 800beac:	9801      	ldr	r0, [sp, #4]
 800beae:	6813      	ldr	r3, [r2, #0]
 800beb0:	4615      	mov	r5, r2
 800beb2:	b933      	cbnz	r3, 800bec2 <_free_r+0x32>
 800beb4:	6063      	str	r3, [r4, #4]
 800beb6:	6014      	str	r4, [r2, #0]
 800beb8:	b003      	add	sp, #12
 800beba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bebe:	f000 b8cd 	b.w	800c05c <__malloc_unlock>
 800bec2:	42a3      	cmp	r3, r4
 800bec4:	d90b      	bls.n	800bede <_free_r+0x4e>
 800bec6:	6821      	ldr	r1, [r4, #0]
 800bec8:	1862      	adds	r2, r4, r1
 800beca:	4293      	cmp	r3, r2
 800becc:	bf04      	itt	eq
 800bece:	681a      	ldreq	r2, [r3, #0]
 800bed0:	685b      	ldreq	r3, [r3, #4]
 800bed2:	6063      	str	r3, [r4, #4]
 800bed4:	bf04      	itt	eq
 800bed6:	1852      	addeq	r2, r2, r1
 800bed8:	6022      	streq	r2, [r4, #0]
 800beda:	602c      	str	r4, [r5, #0]
 800bedc:	e7ec      	b.n	800beb8 <_free_r+0x28>
 800bede:	461a      	mov	r2, r3
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	b10b      	cbz	r3, 800bee8 <_free_r+0x58>
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	d9fa      	bls.n	800bede <_free_r+0x4e>
 800bee8:	6811      	ldr	r1, [r2, #0]
 800beea:	1855      	adds	r5, r2, r1
 800beec:	42a5      	cmp	r5, r4
 800beee:	d10b      	bne.n	800bf08 <_free_r+0x78>
 800bef0:	6824      	ldr	r4, [r4, #0]
 800bef2:	4421      	add	r1, r4
 800bef4:	1854      	adds	r4, r2, r1
 800bef6:	42a3      	cmp	r3, r4
 800bef8:	6011      	str	r1, [r2, #0]
 800befa:	d1dd      	bne.n	800beb8 <_free_r+0x28>
 800befc:	681c      	ldr	r4, [r3, #0]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	6053      	str	r3, [r2, #4]
 800bf02:	4421      	add	r1, r4
 800bf04:	6011      	str	r1, [r2, #0]
 800bf06:	e7d7      	b.n	800beb8 <_free_r+0x28>
 800bf08:	d902      	bls.n	800bf10 <_free_r+0x80>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	6003      	str	r3, [r0, #0]
 800bf0e:	e7d3      	b.n	800beb8 <_free_r+0x28>
 800bf10:	6825      	ldr	r5, [r4, #0]
 800bf12:	1961      	adds	r1, r4, r5
 800bf14:	428b      	cmp	r3, r1
 800bf16:	bf04      	itt	eq
 800bf18:	6819      	ldreq	r1, [r3, #0]
 800bf1a:	685b      	ldreq	r3, [r3, #4]
 800bf1c:	6063      	str	r3, [r4, #4]
 800bf1e:	bf04      	itt	eq
 800bf20:	1949      	addeq	r1, r1, r5
 800bf22:	6021      	streq	r1, [r4, #0]
 800bf24:	6054      	str	r4, [r2, #4]
 800bf26:	e7c7      	b.n	800beb8 <_free_r+0x28>
 800bf28:	b003      	add	sp, #12
 800bf2a:	bd30      	pop	{r4, r5, pc}
 800bf2c:	240004d4 	.word	0x240004d4

0800bf30 <_malloc_r>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	1ccd      	adds	r5, r1, #3
 800bf34:	f025 0503 	bic.w	r5, r5, #3
 800bf38:	3508      	adds	r5, #8
 800bf3a:	2d0c      	cmp	r5, #12
 800bf3c:	bf38      	it	cc
 800bf3e:	250c      	movcc	r5, #12
 800bf40:	2d00      	cmp	r5, #0
 800bf42:	4606      	mov	r6, r0
 800bf44:	db01      	blt.n	800bf4a <_malloc_r+0x1a>
 800bf46:	42a9      	cmp	r1, r5
 800bf48:	d903      	bls.n	800bf52 <_malloc_r+0x22>
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	6033      	str	r3, [r6, #0]
 800bf4e:	2000      	movs	r0, #0
 800bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf52:	f000 f87d 	bl	800c050 <__malloc_lock>
 800bf56:	4921      	ldr	r1, [pc, #132]	; (800bfdc <_malloc_r+0xac>)
 800bf58:	680a      	ldr	r2, [r1, #0]
 800bf5a:	4614      	mov	r4, r2
 800bf5c:	b99c      	cbnz	r4, 800bf86 <_malloc_r+0x56>
 800bf5e:	4f20      	ldr	r7, [pc, #128]	; (800bfe0 <_malloc_r+0xb0>)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	b923      	cbnz	r3, 800bf6e <_malloc_r+0x3e>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4630      	mov	r0, r6
 800bf68:	f000 f862 	bl	800c030 <_sbrk_r>
 800bf6c:	6038      	str	r0, [r7, #0]
 800bf6e:	4629      	mov	r1, r5
 800bf70:	4630      	mov	r0, r6
 800bf72:	f000 f85d 	bl	800c030 <_sbrk_r>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d123      	bne.n	800bfc2 <_malloc_r+0x92>
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	6033      	str	r3, [r6, #0]
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f000 f86c 	bl	800c05c <__malloc_unlock>
 800bf84:	e7e3      	b.n	800bf4e <_malloc_r+0x1e>
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	1b5b      	subs	r3, r3, r5
 800bf8a:	d417      	bmi.n	800bfbc <_malloc_r+0x8c>
 800bf8c:	2b0b      	cmp	r3, #11
 800bf8e:	d903      	bls.n	800bf98 <_malloc_r+0x68>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	441c      	add	r4, r3
 800bf94:	6025      	str	r5, [r4, #0]
 800bf96:	e004      	b.n	800bfa2 <_malloc_r+0x72>
 800bf98:	6863      	ldr	r3, [r4, #4]
 800bf9a:	42a2      	cmp	r2, r4
 800bf9c:	bf0c      	ite	eq
 800bf9e:	600b      	streq	r3, [r1, #0]
 800bfa0:	6053      	strne	r3, [r2, #4]
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f000 f85a 	bl	800c05c <__malloc_unlock>
 800bfa8:	f104 000b 	add.w	r0, r4, #11
 800bfac:	1d23      	adds	r3, r4, #4
 800bfae:	f020 0007 	bic.w	r0, r0, #7
 800bfb2:	1ac2      	subs	r2, r0, r3
 800bfb4:	d0cc      	beq.n	800bf50 <_malloc_r+0x20>
 800bfb6:	1a1b      	subs	r3, r3, r0
 800bfb8:	50a3      	str	r3, [r4, r2]
 800bfba:	e7c9      	b.n	800bf50 <_malloc_r+0x20>
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	6864      	ldr	r4, [r4, #4]
 800bfc0:	e7cc      	b.n	800bf5c <_malloc_r+0x2c>
 800bfc2:	1cc4      	adds	r4, r0, #3
 800bfc4:	f024 0403 	bic.w	r4, r4, #3
 800bfc8:	42a0      	cmp	r0, r4
 800bfca:	d0e3      	beq.n	800bf94 <_malloc_r+0x64>
 800bfcc:	1a21      	subs	r1, r4, r0
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f000 f82e 	bl	800c030 <_sbrk_r>
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	d1dd      	bne.n	800bf94 <_malloc_r+0x64>
 800bfd8:	e7cf      	b.n	800bf7a <_malloc_r+0x4a>
 800bfda:	bf00      	nop
 800bfdc:	240004d4 	.word	0x240004d4
 800bfe0:	240004d8 	.word	0x240004d8

0800bfe4 <_realloc_r>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	4614      	mov	r4, r2
 800bfea:	460e      	mov	r6, r1
 800bfec:	b921      	cbnz	r1, 800bff8 <_realloc_r+0x14>
 800bfee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bff2:	4611      	mov	r1, r2
 800bff4:	f7ff bf9c 	b.w	800bf30 <_malloc_r>
 800bff8:	b922      	cbnz	r2, 800c004 <_realloc_r+0x20>
 800bffa:	f7ff ff49 	bl	800be90 <_free_r>
 800bffe:	4625      	mov	r5, r4
 800c000:	4628      	mov	r0, r5
 800c002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c004:	f000 f830 	bl	800c068 <_malloc_usable_size_r>
 800c008:	42a0      	cmp	r0, r4
 800c00a:	d20f      	bcs.n	800c02c <_realloc_r+0x48>
 800c00c:	4621      	mov	r1, r4
 800c00e:	4638      	mov	r0, r7
 800c010:	f7ff ff8e 	bl	800bf30 <_malloc_r>
 800c014:	4605      	mov	r5, r0
 800c016:	2800      	cmp	r0, #0
 800c018:	d0f2      	beq.n	800c000 <_realloc_r+0x1c>
 800c01a:	4631      	mov	r1, r6
 800c01c:	4622      	mov	r2, r4
 800c01e:	f7ff fbef 	bl	800b800 <memcpy>
 800c022:	4631      	mov	r1, r6
 800c024:	4638      	mov	r0, r7
 800c026:	f7ff ff33 	bl	800be90 <_free_r>
 800c02a:	e7e9      	b.n	800c000 <_realloc_r+0x1c>
 800c02c:	4635      	mov	r5, r6
 800c02e:	e7e7      	b.n	800c000 <_realloc_r+0x1c>

0800c030 <_sbrk_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4d06      	ldr	r5, [pc, #24]	; (800c04c <_sbrk_r+0x1c>)
 800c034:	2300      	movs	r3, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	f7f6 fc2a 	bl	8002894 <_sbrk>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_sbrk_r+0x1a>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	b103      	cbz	r3, 800c04a <_sbrk_r+0x1a>
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	240018b8 	.word	0x240018b8

0800c050 <__malloc_lock>:
 800c050:	4801      	ldr	r0, [pc, #4]	; (800c058 <__malloc_lock+0x8>)
 800c052:	f000 b811 	b.w	800c078 <__retarget_lock_acquire_recursive>
 800c056:	bf00      	nop
 800c058:	240018c0 	.word	0x240018c0

0800c05c <__malloc_unlock>:
 800c05c:	4801      	ldr	r0, [pc, #4]	; (800c064 <__malloc_unlock+0x8>)
 800c05e:	f000 b80c 	b.w	800c07a <__retarget_lock_release_recursive>
 800c062:	bf00      	nop
 800c064:	240018c0 	.word	0x240018c0

0800c068 <_malloc_usable_size_r>:
 800c068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c06c:	1f18      	subs	r0, r3, #4
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bfbc      	itt	lt
 800c072:	580b      	ldrlt	r3, [r1, r0]
 800c074:	18c0      	addlt	r0, r0, r3
 800c076:	4770      	bx	lr

0800c078 <__retarget_lock_acquire_recursive>:
 800c078:	4770      	bx	lr

0800c07a <__retarget_lock_release_recursive>:
 800c07a:	4770      	bx	lr

0800c07c <_init>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	bf00      	nop
 800c080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c082:	bc08      	pop	{r3}
 800c084:	469e      	mov	lr, r3
 800c086:	4770      	bx	lr

0800c088 <_fini>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	bf00      	nop
 800c08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08e:	bc08      	pop	{r3}
 800c090:	469e      	mov	lr, r3
 800c092:	4770      	bx	lr
